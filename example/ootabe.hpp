/*
	This file FrillShark Odbc C++ source Generation.
	"ootabe.hpp"
	Set_Driver("ODBC Driver 17 for SQL Server");
	Set_Server("192.168.0.254");
	Set_UserID("masamitsu");
	Set_Password(" .... ");
	Set_Database("ootabe");
	Microsoft SQL Server 2017 (RTM-GDR) (KB4583456) - 14.0.2037.2 (X64)
	Nov  2 2020 19:19:59
	Copyright (C) 2017 Microsoft Corporation
	Express Edition (64-bit) on Windows Server 2016 Standard 10.0 <X64> (Build 14393: ) (Hypervisor)

*/

#ifndef __OOTABE_HPP__
#define __OOTABE_HPP__
/*
	This file FrillShark Odbc C++ source Generation.
*/
#ifndef ODBCCOMMON_HPP_INCLUDED
#define ODBCCOMMON_HPP_INCLUDED
#ifdef _WIN32
#include <windows.h>
#endif
#include <array>
#include <cmath>
#include <codecvt>
#include <cstdio>
#include <cstring>
#include <cuchar>
#include <cwchar>
#include <iconv.h>
#include <iostream>
#include <locale>
#include <sql.h>
#include <sqlext.h>
#include <sstream>
#include <string>
#include <vector>
//#include <msclr/marshal_cppstd.h>
//#include <emmintrin.h>
#define MAXBUF 1048576

using namespace std;
union my__128 {
	unsigned long long x[2];
	unsigned char y[16];
#ifndef _WIN32
	unsigned __int128 z;
#endif
};
namespace OdbcCommon {
typedef enum {
	_unknown = -1,
	_bit = 0,
	_tinyint = 1,
	_smallint = 2,
	_int = 3,
	_bigint = 4,
	_decimal = 5,
	_numeric = 6,
	_real = 7,
	_float = 8,
	_smallmoney = 9,
	_money = 10,
	_date = 11,
	_time = 12,
	_datetime = 13,
	_datetime2 = 14,
	_smalldatetime = 15,
	_datetimeoffset = 16,
	_char = 17,
	_varchar = 18,
	_text = 19,
	_nchar = 20,
	_nvarchar = 21,
	_ntext = 22,
	_binary = 23,
	_verbinary = 24,
	_image = 25,
	_xml = 26,
} eSqlType;

typedef enum {
	_NoModify = 0,
	_Select = 1,
	_Insert = 2,
	_Update = 3,
	_Delete = 4,
} eRecordModify;

class UtfConvartor {
public:
	//
	// utf32 to utf8
	//
	static bool ConvChU32ToU8(const char32_t u32Ch, std::array<char, 4> &u8Ch) {
		if (u32Ch < 0 || u32Ch > 0x10FFFF) {
			return false;
		}

		if (u32Ch < 128) {
			u8Ch[0] = char(u32Ch);
			u8Ch[1] = 0;
			u8Ch[2] = 0;
			u8Ch[3] = 0;
		} else if (u32Ch < 2048) {
			u8Ch[0] = 0xC0 | char(u32Ch >> 6);
			u8Ch[1] = 0x80 | (char(u32Ch) & 0x3F);
			u8Ch[2] = 0;
			u8Ch[3] = 0;
		} else if (u32Ch < 65536) {
			u8Ch[0] = 0xE0 | char(u32Ch >> 12);
			u8Ch[1] = 0x80 | (char(u32Ch >> 6) & 0x3F);
			u8Ch[2] = 0x80 | (char(u32Ch) & 0x3F);
			u8Ch[3] = 0;
		} else {
			u8Ch[0] = 0xF0 | char(u32Ch >> 18);
			u8Ch[1] = 0x80 | (char(u32Ch >> 12) & 0x3F);
			u8Ch[2] = 0x80 | (char(u32Ch >> 6) & 0x3F);
			u8Ch[3] = 0x80 | (char(u32Ch) & 0x3F);
		}

		return true;
	}

	// UTF-8 から UTF-32

	static int GetU8ByteCount(char ch) {
		if (0 <= uint8_t(ch) && uint8_t(ch) < 0x80) {
			return 1;
		}
		if (0xC2 <= uint8_t(ch) && uint8_t(ch) < 0xE0) {
			return 2;
		}
		if (0xE0 <= uint8_t(ch) && uint8_t(ch) < 0xF0) {
			return 3;
		}
		if (0xF0 <= uint8_t(ch) && uint8_t(ch) < 0xF8) {
			return 4;
		}
		return 0;
	}

	static bool IsU8LaterByte(char ch) { return 0x80 <= uint8_t(ch) && uint8_t(ch) < 0xC0; }

	static bool ConvChU8ToU32(const std::array<char, 4> &u8Ch, char32_t &u32Ch) {
		int numBytes = GetU8ByteCount(u8Ch[0]);
		if (numBytes == 0) {
			return false;
		}
		switch (numBytes) {
		case 1:
			u32Ch = char32_t(uint8_t(u8Ch[0]));
			break;
		case 2:
			if (!IsU8LaterByte(u8Ch[1])) {
				return false;
			}
			if ((uint8_t(u8Ch[0]) & 0x1E) == 0) {
				return false;
			}

			u32Ch = char32_t(u8Ch[0] & 0x1F) << 6;
			u32Ch |= char32_t(u8Ch[1] & 0x3F);
			break;
		case 3:
			if (!IsU8LaterByte(u8Ch[1]) || !IsU8LaterByte(u8Ch[2])) {
				return false;
			}
			if ((uint8_t(u8Ch[0]) & 0x0F) == 0 && (uint8_t(u8Ch[1]) & 0x20) == 0) {
				return false;
			}

			u32Ch = char32_t(u8Ch[0] & 0x0F) << 12;
			u32Ch |= char32_t(u8Ch[1] & 0x3F) << 6;
			u32Ch |= char32_t(u8Ch[2] & 0x3F);
			break;
		case 4:
			if (!IsU8LaterByte(u8Ch[1]) || !IsU8LaterByte(u8Ch[2]) || !IsU8LaterByte(u8Ch[3])) {
				return false;
			}
			if ((uint8_t(u8Ch[0]) & 0x07) == 0 && (uint8_t(u8Ch[1]) & 0x30) == 0) {
				return false;
			}

			u32Ch = char32_t(u8Ch[0] & 0x07) << 18;
			u32Ch |= char32_t(u8Ch[1] & 0x3F) << 12;
			u32Ch |= char32_t(u8Ch[2] & 0x3F) << 6;
			u32Ch |= char32_t(u8Ch[3] & 0x3F);
			break;
		default:
			return false;
		}

		return true;
	}
	//
	// UTF-16
	// UTF-32 から UTF-16
	//
	static bool ConvChU32ToU16(const char32_t u32Ch, std::array<char16_t, 2> &u16Ch) {
		if (u32Ch < 0 || u32Ch > 0x10FFFF) {
			return false;
		}

		if (u32Ch < 0x10000) {
			u16Ch[0] = char16_t(u32Ch);
			u16Ch[1] = 0;
		} else {
			u16Ch[0] = char16_t((u32Ch - 0x10000) / 0x400 + 0xD800);
			u16Ch[1] = char16_t((u32Ch - 0x10000) % 0x400 + 0xDC00);
		}

		return true;
	}
	//
	// UTF-16 から UTF-32
	//
	static bool IsU16HighSurrogate(char16_t ch) { return 0xD800 <= ch && ch < 0xDC00; }

	static bool IsU16LowSurrogate(char16_t ch) { return 0xDC00 <= ch && ch < 0xE000; }

	static bool ConvChU16ToU32(const std::array<char16_t, 2> &u16Ch, char32_t &u32Ch) {
		if (IsU16HighSurrogate(u16Ch[0])) {
			if (IsU16LowSurrogate(u16Ch[1])) {
				u32Ch = 0x10000 + (char32_t(u16Ch[0]) - 0xD800) * 0x400 + (char32_t(u16Ch[1]) - 0xDC00);
			} else if (u16Ch[1] == 0) {
				u32Ch = u16Ch[0];
			} else {
				return false;
			}
		} else if (IsU16LowSurrogate(u16Ch[0])) {
			if (u16Ch[1] == 0) {
				u32Ch = u16Ch[0];
			} else {
				return false;
			}
		} else {
			u32Ch = u16Ch[0];
		}

		return true;
	}
	//
	// UTF-8 から UTF-16 または UTF-16 から UTF-8
	//
	//一度 UTF-32 に変換し、UTF-8、UTF-16 へ変換します。
	// UTF-8 から UTF-16
	//
	static bool ConvChU8ToU16(const std::array<char, 4> &u8Ch, std::array<char16_t, 2> &u16Ch) {
		char32_t u32Ch;
		if (!ConvChU8ToU32(u8Ch, u32Ch)) {
			return false;
		}
		if (!ConvChU32ToU16(u32Ch, u16Ch)) {
			return false;
		}
		return true;
	}
	//
	// UTF-16 から UTF-8
	//
	static bool ConvChU16ToU8(const std::array<char16_t, 2> &u16Ch, std::array<char, 4> &u8Ch) {
		char32_t u32Ch;
		if (!ConvChU16ToU32(u16Ch, u32Ch)) {
			return false;
		}
		if (!ConvChU32ToU8(u32Ch, u8Ch)) {
			return false;
		}
		return true;
	}
	//
	//文字列
	//
	//後は文字列の各文字を変換していきます。
	//
	static bool ConvU8ToU16(const std::string &u8Str, std::u16string &u16Str) {
		for (auto u8It = u8Str.begin(); u8It != u8Str.end(); ++u8It) {
			auto numBytes = GetU8ByteCount((*u8It));
			if (numBytes == 0) {
				return false;
			}

			std::array<char, 4> u8Ch;
			u8Ch[0] = (*u8It);
			for (int i = 1; i < numBytes; i++) {
				++u8It;
				if (u8It == u8Str.end()) {
					return false;
				}
				u8Ch[i] = (*u8It);
			}

			std::array<char16_t, 2> u16Ch;
			if (!ConvChU8ToU16(u8Ch, u16Ch)) {
				return false;
			}

			u16Str.push_back(u16Ch[0]);
			if (u16Ch[1] != 0) {
				u16Str.push_back(u16Ch[1]);
			}
		}
		return true;
	}

	static bool ConvU8ToU32(const std::string &u8Str, std::u32string &u32Str) {
		for (auto u8It = u8Str.begin(); u8It != u8Str.end(); ++u8It) {
			auto numBytes = GetU8ByteCount((*u8It));
			if (numBytes == 0) {
				return false;
			}

			std::array<char, 4> u8Ch;
			u8Ch[0] = (*u8It);
			for (int i = 1; i < numBytes; i++) {
				++u8It;
				if (u8It == u8Str.end()) {
					return false;
				}
				u8Ch[i] = (*u8It);
			}

			char32_t u32Ch;
			if (!ConvChU8ToU32(u8Ch, u32Ch)) {
				return false;
			}

			u32Str.push_back(u32Ch);
		}
		return true;
	}

	static bool ConvU16ToU8(const std::u16string &u16Str, std::string &u8Str) {
		for (auto u16It = u16Str.begin(); u16It != u16Str.end(); ++u16It) {
			std::array<char16_t, 2> u16Ch;
			if (IsU16HighSurrogate((*u16It))) {
				u16Ch[0] = (*u16It);
				++u16It;
				if (u16It == u16Str.end()) {
					return false;
				}
				u16Ch[1] = (*u16It);
			} else {
				u16Ch[0] = (*u16It);
				u16Ch[1] = 0;
			}

			std::array<char, 4> u8Ch;
			if (!ConvChU16ToU8(u16Ch, u8Ch)) {
				return false;
			}
			if (u8Ch[0] != 0) {
				u8Str.push_back(u8Ch[0]);
			}
			if (u8Ch[1] != 0) {
				u8Str.push_back(u8Ch[1]);
			}
			if (u8Ch[2] != 0) {
				u8Str.push_back(u8Ch[2]);
			}
			if (u8Ch[3] != 0) {
				u8Str.push_back(u8Ch[3]);
			}
		}
		return true;
	}

	static bool ConvU16ToU32(const std::u16string &u16Str, std::u32string &u32Str) {
		for (auto u16It = u16Str.begin(); u16It != u16Str.end(); ++u16It) {
			std::array<char16_t, 2> u16Ch;
			if (IsU16HighSurrogate((*u16It))) {
				u16Ch[0] = (*u16It);
				++u16It;
				if (u16It == u16Str.end()) {
					return false;
				}
				u16Ch[1] = (*u16It);
			} else {
				u16Ch[0] = (*u16It);
				u16Ch[1] = 0;
			}

			char32_t u32Ch;
			if (!ConvChU16ToU32(u16Ch, u32Ch)) {
				return false;
			}
			u32Str.push_back(u32Ch);
		}
		return true;
	}

	static bool ConvU32ToU8(const std::u32string &u32Str, std::string &u8Str) {
		for (auto u32It = u32Str.begin(); u32It != u32Str.end(); ++u32It) {
			std::array<char, 4> u8Ch;
			if (!ConvChU32ToU8((*u32It), u8Ch)) {
				return false;
			}

			if (u8Ch[0] != 0) {
				u8Str.push_back(u8Ch[0]);
			}
			if (u8Ch[1] != 0) {
				u8Str.push_back(u8Ch[1]);
			}

			if (u8Ch[2] != 0) {
				u8Str.push_back(u8Ch[2]);
			}
			if (u8Ch[3] != 0) {
				u8Str.push_back(u8Ch[3]);
			}
		}
		return true;
	}

	static bool ConvU32ToU16(const std::u32string &u32Str, std::u16string &u16Str) {
		for (auto u32It = u32Str.begin(); u32It != u32Str.end(); ++u32It) {
			std::array<char16_t, 2> u16Ch;
			if (!ConvChU32ToU16((*u32It), u16Ch)) {
				return false;
			}

			if (u16Ch[0] != 0) {
				u16Str.push_back(u16Ch[0]);
			}
			if (u16Ch[1] != 0) {
				u16Str.push_back(u16Ch[1]);
			}
		}
		return true;
	}

	//
	// utf16 --> utf8
	//
	static bool UtfConv(char *pout, char16_t *pin) {
		bool ret = false;
		mbstate_t st = {0};
		size_t siz;
		char16_t *ptr_string = pin;
		if (setlocale(LC_CTYPE, "") == NULL) { //"ja_JP") == NULL) {
			// fputs( "ロケールの設定に失敗しました。\n", stderr );
			return ret;
		}
		while (*ptr_string) {
			char16_t character = *ptr_string;
			siz = c16rtomb(pout, character, &st);
			if (siz == (size_t)-1)
				break;
			else
				ret = true;
			pout += siz;
			ptr_string++;
		}
		return ret;
	}
};

class COdbcDateTime {
public:
	COdbcDateTime() { Initialize(); }
	COdbcDateTime(TIMESTAMP_STRUCT *ptr) { data = *ptr; }
	virtual ~COdbcDateTime() {}
	static void Initialize(TIMESTAMP_STRUCT *ptr) {
		if (ptr) {
			ptr->year = 0;
			ptr->month = 0;
			ptr->day = 0;
			ptr->hour = 0;
			ptr->minute = 0;
			ptr->second = 0;
			ptr->fraction = 0;
		}
	}
	void Initialize() { this->Initialize(&data); }
	static std::string to_string(SQL_TIMESTAMP_STRUCT *ptr, char separator, bool time) {
		std::stringstream ss;
		ss << ptr->year << separator << ptr->month << separator << ptr->day;
		if (time) {
			ss << " " << ptr->hour << ":" << ptr->minute << ":" << ptr->second << "." << ptr->fraction;
		}
		std::string ret = ss.str();
		return ret;
	}
	std::string to_string(char separator, bool time) { return to_string(&data, separator, time); }
	std::string to_string() { return to_string(&data, '-', false); }
	static void stringtodate(TIMESTAMP_STRUCT *ptr, std::string &strtim, std::string strsep = "-") {
		Initialize(ptr);
		size_t s1 = strtim.find(strsep);
		std::string yy = strtim.substr(0, s1);
		ptr->year = atoi(yy.c_str());
		size_t s2 = strtim.find(strsep, s1 + 1);
		std::string mm = strtim.substr(s1 + 1, s2 - (s1 + 1));
		ptr->month = atoi(mm.c_str());
		size_t s3 = strtim.find(" ", s2 + 1);
		if (s3 == std::string::npos) s3 = strtim.length();
		std::string dd = strtim.substr(s2 + 1, s3 - (s2 + 1));
		ptr->day = atoi(dd.c_str());
	}
	void stringtodate(std::string &strtim, std::string strsep = "-") { stringtodate(&data, strtim, strsep); }
	SQLSMALLINT GetYear() { return data.year; }
	void SetYear(SQLSMALLINT year) { data.year = year; }
	SQLUSMALLINT GetMonth() { return data.month; }
	void SetMonth(SQLUSMALLINT month) { data.month = month; }
	SQLUSMALLINT GetDay() { return data.day; }
	void SetDay(SQLUSMALLINT day) { data.day = day; }
	SQLUSMALLINT GetHour() { return data.hour; }
	void SetHour(SQLUSMALLINT hour) { data.hour = hour; }
	SQLUSMALLINT GetMinute() { return data.minute; }
	void SetMinute(SQLUSMALLINT minute) { data.minute = minute; }
	SQLUSMALLINT GetSecond() { return data.second; }
	void SetSecond(SQLUSMALLINT second) { data.second = second; }
	SQLUINTEGER GetFraction() { return data.fraction; }
	void SetFraction(SQLUINTEGER fraction) { data.fraction = fraction; }
	void SetDate(SQLSMALLINT year, SQLUSMALLINT month, SQLUSMALLINT day) {
		SetYear(year);
		SetMonth(month);
		SetDay(day);
	}
	operator TIMESTAMP_STRUCT() const { return data; }
	COdbcDateTime &operator=(const TIMESTAMP_STRUCT &r) {
		data = r;
		return *this;
	}

protected:
	TIMESTAMP_STRUCT data;
};

class COdbcParameter {
public:
	COdbcParameter() {
		position = -1;
		name = "";
		value = "";
	}
	virtual ~COdbcParameter() {}
	int position;
	std::string name;
	std::string value;
};

class COdbcConnection {
public:
	COdbcConnection() { Initialize(); }
	COdbcConnection(std::string Driver, std::string Server, std::string User, std::string Password,
					std::string Database) {
		Initialize();
		m_driver = Driver;
		m_server = Server;
		m_database = Database;
		m_user = User;
		m_password = Password;
	}
	COdbcConnection &operator=(COdbcConnection &org) {
		Initialize();
		m_driver = org.m_driver;
		m_server = org.m_server;
		m_database = org.m_database;
		m_user = org.m_user;
		m_password = org.m_password;
		m_ConnectionString = org.m_ConnectionString;
		if ((org.m_Connect == SQL_SUCCESS) || (org.m_Connect == SQL_SUCCESS_WITH_INFO)) {
			this->DriverConnect();
		}
	}
	virtual ~COdbcConnection() {
		if (m_Connect > -1) this->Disconnect();
		if (m_hstmt) SQLFreeHandle(SQL_HANDLE_STMT, m_hstmt);
		if (m_hdbc) SQLFreeHandle(SQL_HANDLE_DBC, m_hdbc);
		if (m_henv) SQLFreeHandle(SQL_HANDLE_ENV, m_henv);
	}

protected:
	void Initialize() {
		m_driver = "";
		m_server = "";
		m_user = "";
		m_password = "";
		m_database = "";
		m_ConnectionString = "";
		m_Connect = -1;
	}

protected:
	SQLHENV m_henv = SQL_NULL_HENV;	   // Environment
	SQLHDBC m_hdbc = SQL_NULL_HDBC;	   // Connection handle
	SQLHSTMT m_hstmt = SQL_NULL_HSTMT; // Statement handle
	std::string m_driver;
	std::string m_server;
	std::string m_user;
	std::string m_password;
	std::string m_database;
	std::string m_ConnectionString;
	char m_ConnectAttr[256];
	int m_Connect;

public:
	std::string Get_Driver() { return m_driver; }
	void Set_Driver(std::string driver) {
		m_driver = driver;
		Get_ConnectionString();
	}
	std::string Get_Server() { return m_server; }
	void Set_Server(std::string server) {
		m_server = server;
		Get_ConnectionString();
	}
	std::string Get_Database() { return m_database; }
	void Set_Database(std::string database) {
		m_database = database;
		Get_ConnectionString();
	}
	std::string Get_UserID() { return m_user; }
	void Set_UserID(std::string UserID) { m_user = UserID; }
	std::string Get_Password() { return m_password; }
	void Set_Password(std::string Password) { m_password = Password; }
	std::string Get_ConnectionString() {
		m_ConnectionString = "DRIVER={" + m_driver + "};SERVER=" + m_server + ";DATABASE=" + m_database +
							 ";UID=" + m_user + ";PWD=" + m_password + ";";
		return m_ConnectionString;
	}
	SQLRETURN DriverConnect() {
		SQLCHAR outstr[2048];
		SQLSMALLINT outstrlen = 2048;
		std::string connctionstring = Get_ConnectionString();
		SQLRETURN ret;
		ret = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &m_henv);
		ret = SQLSetEnvAttr(m_henv, SQL_ATTR_ODBC_VERSION, (SQLPOINTER *)SQL_OV_ODBC3, 0);
		ret = SQLAllocHandle(SQL_HANDLE_DBC, m_henv, &m_hdbc);
		// Set login timeout to 10 seconds
		ret = SQLSetConnectAttr(m_hdbc, SQL_LOGIN_TIMEOUT, (SQLPOINTER)10, 0);
		ret = SQLDriverConnect(m_hdbc, NULL, (SQLCHAR *)connctionstring.c_str(), SQL_NTS, outstr, sizeof(outstr),
							   &outstrlen, SQL_DRIVER_NOPROMPT);
		if ((ret == SQL_SUCCESS) || (ret == SQL_SUCCESS_WITH_INFO)) {
			m_Connect = ret;
		} else {
			m_Connect = ret;
		}
		return ret;
	}
	SQLRETURN Disconnect() { return SQLDisconnect(m_hdbc); }
	SQLRETURN Get_ConnectAttr(SQLINTEGER Attribute, SQLPOINTER ValuePtr, SQLINTEGER BufferLength,
							  SQLINTEGER *StringLengthPtr) {
		return SQLGetConnectAttr(m_hdbc, Attribute, ValuePtr, BufferLength, StringLengthPtr);
	}
	SQLHENV Get_EnvironmentHandle() { return m_henv; }
	SQLHDBC Get_ConnectionHandle() { return m_hdbc; }
	SQLRETURN SetCommitMode(unsigned long *val) {
		if (*val == SQL_AUTOCOMMIT_OFF || *val == SQL_AUTOCOMMIT_ON) {
			return SQLSetConnectAttr(m_hdbc, SQL_ATTR_AUTOCOMMIT, (SQLPOINTER)val, 0);
		}
		return SQL_ERROR;
	}
	SQLRETURN SetAutoCommitModeOn() {
		return SQLSetConnectAttr(m_hdbc, SQL_ATTR_AUTOCOMMIT, (SQLPOINTER)SQL_AUTOCOMMIT_ON, 0);
	}
	SQLRETURN SetAutoCommitModeOff() {
		return SQLSetConnectAttr(m_hdbc, SQL_ATTR_AUTOCOMMIT, (SQLPOINTER)SQL_AUTOCOMMIT_OFF, 0);
	}
	// SQL_HANDLE_DBC
	/*
	SQLRETURN SQLGetConnectAttr(
	 SQLHDBC        ConnectionHandle,
	 SQLINTEGER     Attribute,
	 SQLPOINTER     ValuePtr,
	 SQLINTEGER     BufferLength,
	 SQLINTEGER *   StringLengthPtr);
	*/
	SQLRETURN GetConnectAttr(SQLINTEGER Attribute, SQLPOINTER ValuePtr, SQLINTEGER BufferLength,
							 SQLINTEGER *StringLengthPtr) {
		return SQLGetConnectAttr(m_hdbc, Attribute, ValuePtr, BufferLength, StringLengthPtr);
	}
	SQLRETURN EndTran(SQLSMALLINT CompletionType) {
		if (CompletionType == SQL_COMMIT || CompletionType == SQL_ROLLBACK) {
			return SQLEndTran(SQL_HANDLE_DBC, m_hdbc, CompletionType);
		}
		return SQL_ERROR;
	}
	SQLRETURN EndTranCommit() { return SQLEndTran(SQL_HANDLE_DBC, m_hdbc, SQL_COMMIT); }
	SQLRETURN EndTranRollback() { return SQLEndTran(SQL_HANDLE_DBC, m_hdbc, SQL_ROLLBACK); }
};

class COdbcCommand {
public:
	COdbcCommand(COdbcConnection *pcon) {
		_con = pcon;
		m_CommandString = "";
		m_henv = _con->Get_EnvironmentHandle();
		m_hdbc = _con->Get_ConnectionHandle();
		SQLAllocHandle(SQL_HANDLE_STMT, m_hdbc, &m_hstmt);
	}
	virtual ~COdbcCommand() {
		if (m_hstmt != SQL_NULL_HSTMT) {
			SQLFreeStmt(m_hstmt, 0);
			m_hstmt = SQL_NULL_HSTMT;
		}
	}
	SQLRETURN Set_CursorName(std::string CursorName) {
		return SQLSetCursorName(m_hstmt, (SQLCHAR *)CursorName.c_str(), SQL_NTS);
	}
	SQLRETURN BindCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType,
					  SQLPOINTER TargetValue, SQLLEN BufferLength, SQLLEN *StrLen_or_Ind) {
		return SQLBindCol(StatementHandle, ColumnNumber, TargetType, TargetValue, BufferLength, StrLen_or_Ind);
	}
	SQLRETURN mSQLBindParameter(SQLUSMALLINT ipar, SQLSMALLINT fParamType, SQLSMALLINT fCType, SQLSMALLINT fSqlType,
								SQLULEN cbColDef, SQLSMALLINT ibScale, SQLPOINTER rgbValue, SQLLEN cbValueMax,
								SQLLEN *pcbValue) {
		return SQLBindParameter(m_hstmt, ipar, fParamType, fCType, fSqlType, cbColDef, ibScale, rgbValue, cbValueMax,
								pcbValue);
	}

	SQLRETURN mSQLExecDirect() {
		SQLRETURN ret;
		ret = SQLExecDirect(m_hstmt, (SQLCHAR *)m_CommandString.c_str(), SQL_NTS);
		return ret;
	}
	SQLRETURN mSQLExecDirect(std::string command) {
		m_CommandString = command;
		return mSQLExecDirect();
	}
	SQLRETURN mSQLPrepare() {
		SQLINTEGER length = (SQLINTEGER)m_CommandString.length();
		SQLRETURN ret = SQLPrepare(m_hstmt, (SQLCHAR *)m_CommandString.c_str(), length);
		return ret;
	}
	SQLRETURN mFetch() { return SQLFetch(m_hstmt); }
	SQLRETURN mFetch(SQLHSTMT hstmt) {
		m_hstmt = hstmt;
		return mFetch();
	}
	SQLRETURN SQL_API BindCol(SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType, SQLPOINTER TargetValue,
							  SQLLEN BufferLength, SQLLEN *StrLen_or_Ind) {
		return SQLBindCol(m_hstmt, ColumnNumber, TargetType, TargetValue, BufferLength, StrLen_or_Ind);
	}
	SQLRETURN GetData(SQLUSMALLINT Col_or_Param_Num, SQLSMALLINT TargetType, SQLPOINTER TargetValuePtr,
					  SQLLEN BufferLength, SQLLEN *StrLen_or_IndPtr) {
		return SQLGetData(m_hstmt, Col_or_Param_Num, TargetType, TargetValuePtr, BufferLength, StrLen_or_IndPtr);
	}
	SQLRETURN GetData(SQLHSTMT StatementHandle, SQLUSMALLINT Col_or_Param_Num, SQLSMALLINT TargetType,
					  SQLPOINTER TargetValuePtr, SQLLEN BufferLength, SQLLEN *StrLen_or_IndPtr) {
		m_hstmt = StatementHandle;
		return this->GetData(Col_or_Param_Num, TargetType, TargetValuePtr, BufferLength, StrLen_or_IndPtr);
	}
	SQLHSTMT GetStatementHandle() { return m_hstmt; }
	std::string GetCommandString() { return m_CommandString; }
	void SetCommandString(std::string CommandString) { m_CommandString = CommandString; }
	SQLRETURN BindParameterBinary(SQLUSMALLINT ipar, SQLSMALLINT fParamType, SQLULEN cbColDef, SQLSMALLINT ibScale,
								  SQLPOINTER rgbValue, SQLLEN *pcbValue) {
		std::stringstream ss;
		SQLCHAR *val = (SQLCHAR *)rgbValue;
		for (SQLULEN i = 0; i < cbColDef; i++) {
			ss << std::hex << val[i];
		}
		std::string valstring = "0x" + ss.str();
		SQLLEN cbValueMax = valstring.length() + 1;
		char *valchar = new char[cbValueMax];
		memset(valchar, 0, cbValueMax);
		sprintf(valchar, "%s", valstring.c_str());
		SQLRETURN ret = mSQLBindParameter(ipar, fParamType, SQL_C_CHAR, SQL_CHAR, cbColDef, ibScale, rgbValue,
										  cbValueMax, pcbValue);
		delete[] valchar;
		return ret;
	}
	SQLRETURN BindParameterDateTime(SQLUSMALLINT ipar, SQLSMALLINT fParamType, SQLPOINTER rgbValue, SQLLEN *pcbValue) {
		SQLRETURN ret;
		SQL_TIMESTAMP_STRUCT *date = (SQL_TIMESTAMP_STRUCT *)rgbValue;
		std::string datestring = COdbcDateTime::to_string(date, '-', true);
		SQLLEN cbValueMax = datestring.length() + 1;
		char *datechar = new char[cbValueMax];
		memset(datechar, 0, cbValueMax);
		sprintf(datechar, "%s", datestring.c_str());
		ret = this->mSQLBindParameter(ipar, SQL_PARAM_INPUT, SQL_C_CHAR, SQL_CHAR, cbValueMax, 0, datechar, cbValueMax,
									  pcbValue);
		delete[] datechar;
		return ret;
	}

protected:
	// member
	std::string m_CommandString;

protected:
	SQLHENV m_henv = SQL_NULL_HENV;	   // Environment
	SQLHDBC m_hdbc = SQL_NULL_HDBC;	   // Connection handle
	SQLHSTMT m_hstmt = SQL_NULL_HSTMT; // Statement handle
private:
	COdbcConnection *_con;
};
class COdbcColumn {
public:
	COdbcColumn() {
		isIdentity = 0;
		mType = eSqlType::_unknown;
		m_KeyF = -1;
	}
	COdbcColumn(std::string table_catalog, std::string table_schema, std::string table_name, std::string column_name,
				std::string ordinal_position, std::string column_default, std::string is_nullable,
				std::string data_type, std::string character_maximum_length, std::string character_octet_length,
				std::string numeric_precision, std::string numeric_scale, std::string datetime_precision,
				std::string character_set_name, std::string collation_name, int isIdentity, eSqlType type = _unknown,
				int keyflg = -1) {
		SetValue(table_catalog, table_schema, table_name, column_name, ordinal_position, column_default, is_nullable,
				 data_type, character_maximum_length, character_octet_length, numeric_precision, numeric_scale,
				 datetime_precision, character_set_name, collation_name, isIdentity, type, keyflg);
	}

	~COdbcColumn() {}

public:
	void SetValue(std::string table_catalog, std::string table_schema, std::string table_name, std::string column_name,
				  std::string ordinal_position, std::string column_default, std::string is_nullable,
				  std::string data_type, std::string character_maximum_length, std::string character_octet_length,
				  std::string numeric_precision, std::string numeric_scale, std::string datetime_precision,
				  std::string character_set_name, std::string collation_name, int isIdentity, eSqlType type = _unknown,
				  int keyflg = -1) {
		this->table_catalog = table_catalog;
		this->table_schema = table_schema;
		this->table_name = table_name;
		this->column_name = column_name;
		this->ordinal_position = ordinal_position;
		this->column_default = column_default;
		this->is_nullable = is_nullable;
		this->data_type = data_type;
		this->character_maximum_length = character_maximum_length;
		this->character_octet_length = character_octet_length;
		this->numeric_precision = numeric_precision;
		this->numeric_scale = numeric_scale;
		this->datetime_precision = datetime_precision;
		this->character_set_name = character_set_name;
		this->collation_name = collation_name;
		this->isIdentity = isIdentity;
		this->mType = type;
		this->m_KeyF = keyflg;
	}
	static void SQLNumericConv(SQL_NUMERIC_STRUCT *pv, double val) {
		double dwk0 = val;
		if (dwk0 < 0) {
			dwk0 *= -1;
			pv->sign = 0;
		}
		unsigned long long l0 = (unsigned long long)dwk0; //整数部
		double dwk1 = dwk0 - (double)l0;
		SQLCHAR cnt = 0;
		if (dwk1 != 0) {
			unsigned long long l1 = 0;
			double dwk2 = dwk1;
			unsigned long long l2 = 0;
			while (dwk2 != 0) {
				l2 = std::pow(10, cnt);
				dwk2 = dwk1 * (double)l2;
				l1 = (unsigned long long)dwk2;
				dwk2 = dwk2 - (double)l1;
				if (cnt == pv->scale) break;
				cnt++;
			}
			if (cnt < pv->scale) pv->scale = cnt;
			dwk1 = dwk0 * (double)std::pow(10.0, cnt);
			union my__128 mok;
			for (int i = 0; i < 16; i++)
				mok.y[i] = 0;
			mok.x[0] = (unsigned long long)dwk1;
			mok.x[1] = 0;
			for (int i = 0; i < 16; i++)
				pv->val[i] = mok.y[i];
		}
	}

	static void SQLNumericConv2(SQL_NUMERIC_STRUCT *pv, double val) {
		pv->precision = 38;
		pv->scale = 5;
		double dwk0 = val;
		if (dwk0 < 0) {
			dwk0 *= -1;
			pv->sign = 0;
		} else {
			pv->sign = 1;
		}

		unsigned long long l0 = (unsigned long long)dwk0; //整数部
		double dwk1 = dwk0 - (double)l0;
		SQLCHAR cnt = 0;
		unsigned long long l1 = 0;
		double dwk2 = dwk1;
		unsigned long long l2 = 0;
		while (dwk2 != 0) {
			l2 = std::pow(10, cnt);
			dwk2 = dwk1 * (double)l2;
			l1 = (unsigned long long)dwk2;
			dwk2 = dwk2 - (double)l1;
			if (cnt == pv->scale) break;
			cnt++;
		}
		if (cnt < pv->scale) pv->scale = cnt;
		dwk1 = dwk0 * (double)std::pow(10.0, cnt);
		union my__128 mok;
		for (int i = 0; i < 16; i++)
			mok.y[i] = 0;
#ifdef _WIN32
		mok.x[0] = (unsigned long long)dwk1;
		mok.x[1] = 0;
#else
		mok.z = dwk1;
#endif
		for (int i = 0; i < 16; i++)
			pv->val[i] = mok.y[i];
	}

	static double StrtoHextoVal(SQL_NUMERIC_STRUCT NumStr) {
		unsigned long long myvalue, divisor;
		double final_val;
		unsigned long long value = 0;
		int i = 1, last = 1, current;
		int a = 0, b = 0;

		for (i = 0; i <= 15; i++) {
			current = (int)NumStr.val[i];
			a = current % 16; // Obtain LSD
			b = current / 16; // Obtain MSD

			value += last * a;
			last = last * 16;
			value += last * b;
			last = last * 16;
		}
		myvalue = value;
		divisor = 1;
		if (NumStr.scale > 0) {
			for (int j = 0; j < NumStr.scale; j++)
				divisor = divisor * 10;
		}
		final_val = (double)myvalue / (double)divisor;
		if (NumStr.sign != 1) final_val *= -1;
		return final_val;
	}
	static void SetNumericValue(SQL_NUMERIC_STRUCT *Num, double value) {
		memset(Num->val, 0, 16);
		double wok = value;
		for (int i = 0; i < Num->scale; i++) {
			wok = wok * 10.0;
		}
	}
	static double StrToVal(SQL_NUMERIC_STRUCT &Num) {
		double final_val = 0.0;
		unsigned long long wok = 0;
		for (int i = 0; i < SQL_MAX_NUMERIC_LEN; i++) {
			unsigned long long tyu = (unsigned long long)Num.val[i];
			if (i == 0) {
				wok += tyu;
			} else {
				unsigned long long kake = 1;
				for (int j = 1; j <= i; j++) {
					kake = kake * 256;
				}
				tyu = tyu * kake;
				wok += tyu;
			}
		}
		unsigned long long divisor = 1;
		if (Num.scale > 0) {
			for (int j = 0; j < Num.scale; j++)
				divisor = divisor * 10;
		}
		final_val = (double)wok / (double)divisor;
		if (Num.sign != 1) final_val *= -1;
		return final_val;
	}

	static std::string NumericToString(SQL_NUMERIC_STRUCT *num) {
		std::string ret = "";
		union my__128 uni;
		memcpy(uni.y, num->val, 16);
		long double wk;
#ifdef _WIN32
		wk = uni.x[0];
#else
		wk = uni.z;
#endif
		if (num->sign == 0) wk *= -1;
		for (int i = 0; i < num->scale; i++) {
			wk = wk / 10;
		}
		char *buf = new char[64];
		sprintf(buf, "%Lf", wk);
		ret = buf;
		delete[] buf;
		return ret;
	}
	static char *NumericToString(SQL_NUMERIC_STRUCT *num, char *buf) {
		union my__128 uni;
		memcpy(uni.y, num->val, 16);
		long double wk;
#ifdef _WIN32
		wk = uni.x[0];
#else
		wk = uni.z;
#endif
		if (num->sign == 0) wk *= -1;
		for (int i = 0; i < num->scale; i++) {
			wk = wk / 10;
		}
		if (buf == nullptr) buf = new char[64];
		sprintf(buf, "%Lf", wk);
		return buf;
	}
	int IsKey() { return m_KeyF; }
	void SetIsKey(int value) { m_KeyF = value; }

public:
	std::string table_catalog;
	std::string table_schema;
	std::string table_name;
	std::string column_name;
	std::string ordinal_position;
	std::string column_default;
	std::string is_nullable;
	std::string data_type;
	std::string character_maximum_length;
	std::string character_octet_length;
	std::string numeric_precision;
	std::string numeric_scale;
	std::string datetime_precision;
	std::string character_set_name;
	std::string collation_name;
	int isIdentity;
	eSqlType mType;

private:
	int m_KeyF;
};
class COdbcKeyColumn {
public:
	COdbcKeyColumn() {
		KEY_CONSTRAINT_NAME = "";
		KEY_COLUMN_NAME = "";
		KEY_ORDINAL_POSITION = -1;
	}
	virtual ~COdbcKeyColumn() {}
	void Set_Value(std::string keyname, std::string columnname, int position) {
		KEY_CONSTRAINT_NAME = keyname;
		KEY_COLUMN_NAME = columnname;
		KEY_ORDINAL_POSITION = position;
	}

public:
	std::string KEY_CONSTRAINT_NAME;
	std::string KEY_COLUMN_NAME;
	int KEY_ORDINAL_POSITION;
};
class COdbcRecord {
public:
	COdbcRecord() { m_Modify = _NoModify; }
	virtual ~COdbcRecord() {}
	eRecordModify get_Modify() { return m_Modify; }
	void set_Modify(eRecordModify value) { m_Modify = value; }

public:
	virtual std::string operator[](int i) {
		std::string ret = "";
		return ret;
	}

	eRecordModify m_Modify;
};

class COdbcTable {
public:
	COdbcTable() {
		m_Count = 0;
		m_TableName = "";
	}
	virtual ~COdbcTable() { m_Column.clear(); }

protected:
	int m_Count;
	std::string m_SqlSELECT;
	std::string m_SqlINSERT;
	std::string m_SqlUPDATE;
	std::string m_SqlDELETE;
	std::vector<COdbcColumn> m_Column;
	std::vector<COdbcKeyColumn> m_Key;
	std::string m_TableName;

public:
	std::string Get_SELECT() { return m_SqlSELECT; }
	std::string Get_INSERT() { return m_SqlINSERT; }
	std::string Get_UPDATE() { return m_SqlUPDATE; }
	std::string Get_DELETE() { return m_SqlDELETE; }
	std::string Get_Name() { return m_TableName; }
	COdbcColumn Column(int i) { return m_Column.at(i); }
	int ColumnCount() { return m_Column.size(); }
	COdbcKeyColumn Key(int i) { return m_Key.at(i); }
	size_t KeyCount() { return m_Key.size(); }
	std::string UpdateSet(SQLPOINTER pval, COdbcColumn *col) {
		string ret = col->column_name + "=";
		std::stringstream ss;
		ss << ret;
		switch (col->mType) {
		case _unknown:
			break;
		case _bit: {
			bool *pbit = (bool *)pval;
			if (*pbit) {
				ss << 1;
			} else {
				ss << 0;
			}
		} break;
		case _tinyint:
		case _smallint: {
			SQLSMALLINT *psint = (SQLSMALLINT *)pval;
			ss << *psint;
		} break;
		case _int: {
			SQLINTEGER *pint = (SQLINTEGER *)pval;
			ss << *pint;
		} break;
		case _bigint: {
			SQLLEN *plen = (SQLLEN *)pval;
			ss << *plen;
		} break;
		case _decimal:
		case _numeric:
		case _smallmoney:
		case _money: {
			SQL_NUMERIC_STRUCT *pv = (SQL_NUMERIC_STRUCT *)pval;
			ss << COdbcColumn::StrtoHextoVal(*pv);
		} break;
		case _real:
		case _float: {
			SQLDOUBLE *pv = (SQLDOUBLE *)pval;
			ss << *pv;
		} break;
		case _date:
		case _time:
		case _datetime:
		case _datetime2:
		case _smalldatetime:
		case _datetimeoffset: {
			TIMESTAMP_STRUCT *pv = (TIMESTAMP_STRUCT *)pval;
			ss << "'" << COdbcDateTime::to_string(pv, '-', true) << "'";
		} break;
		case _char:
		case _varchar:
		case _text:
		case _nchar:
		case _nvarchar:
		case _ntext: {
			SQLCHAR *pv = (SQLCHAR *)pval;
			std::string str = (char *)pv;
			ss << "'" << str << "'";
		} break;
		case _binary: {
			size_t size = atoi(col->character_octet_length.c_str());
			SQLCHAR *pv = (SQLCHAR *)pval;
			stringstream s2;
			for (int j = 0; j < size; j++) {
				s2 << std::hex << *pv;
				pv++;
			}
			ss << "0x" << s2.str();
		} break;
		default:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
} // namespace OdbcCommon
#endif // ODBCCOMMON_HPP_INCLUDED

using namespace OdbcCommon;
class CR_v_jv01 : public COdbcRecord {
public:
	CR_v_jv01() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_jv01() {}

	void Initialize() {
		Kdtid = 0;
		KdtKaiid = 0;
		Kdtksdid = 0;
		Kdtflg = 0;
		Kdtritsu = 0.0;
		Ksdid = 0;
		Ksd00 = 0;
		Ksd01 = "";
		Ksd02 = "";
		Ksd03 = "";
		Ksd04 = "";
		Ksd05 = "";
		Ksd06 = "";
		Ksd07 = "";
		Ksd08 = "";
		ksd09 = 0;
	}

public:
	SQLINTEGER Kdtid;
	SQLINTEGER KdtKaiid;
	SQLINTEGER Kdtksdid;
	SQLCHAR Kdtflg;
	SQLFLOAT Kdtritsu;
	SQLINTEGER Ksdid;
	SQLINTEGER Ksd00;
	std::string Ksd01;
	std::string Ksd02;
	std::string Ksd03;
	std::string Ksd04;
	std::string Ksd05;
	std::string Ksd06;
	std::string Ksd07;
	std::string Ksd08;
	SQLCHAR ksd09;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->Kdtid;
		} break;
		case 1: {
			ss << this->KdtKaiid;
		} break;
		case 2: {
			ss << this->Kdtksdid;
		} break;
		case 3: {
			ss << this->Kdtflg;
		} break;
		case 4: {
			ss << this->Kdtritsu;
		} break;
		case 5: {
			ss << this->Ksdid;
		} break;
		case 6: {
			ss << this->Ksd00;
		} break;
		case 7: {
			ss << this->Ksd01;
		} break;
		case 8: {
			ss << this->Ksd02;
		} break;
		case 9: {
			ss << this->Ksd03;
		} break;
		case 10: {
			ss << this->Ksd04;
		} break;
		case 11: {
			ss << this->Ksd05;
		} break;
		case 12: {
			ss << this->Ksd06;
		} break;
		case 13: {
			ss << this->Ksd07;
		} break;
		case 14: {
			ss << this->Ksd08;
		} break;
		case 15: {
			ss << this->ksd09;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_jv01 : public COdbcTable {
public:
	CT_v_jv01() : COdbcTable() {
		m_TableName = "v_jv01";
		m_SqlSELECT = "SELECT "
					  "Kdtid,"
					  "KdtKaiid,"
					  "Kdtksdid,"
					  "Kdtflg,"
					  "Kdtritsu,"
					  "Ksdid,"
					  "Ksd00,"
					  "Ksd01,"
					  "Ksd02,"
					  "Ksd03,"
					  "Ksd04,"
					  "Ksd05,"
					  "Ksd06,"
					  "Ksd07,"
					  "Ksd08,"
					  "ksd09"
					  " FROM v_jv01";
		m_SqlINSERT = "INSERT INTO v_jv01 ("
					  "Kdtid,"
					  "KdtKaiid,"
					  "Kdtksdid,"
					  "Kdtflg,"
					  "Kdtritsu,"
					  "Ksdid,"
					  "Ksd00,"
					  "Ksd01,"
					  "Ksd02,"
					  "Ksd03,"
					  "Ksd04,"
					  "Ksd05,"
					  "Ksd06,"
					  "Ksd07,"
					  "Ksd08,"
					  "ksd09)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_jv01 SET "
					  "Kdtid = ?,"
					  "KdtKaiid = ?,"
					  "Kdtksdid = ?,"
					  "Kdtflg = ?,"
					  "Kdtritsu = ?,"
					  "Ksdid = ?,"
					  "Ksd00 = ?,"
					  "Ksd01 = ?,"
					  "Ksd02 = ?,"
					  "Ksd03 = ?,"
					  "Ksd04 = ?,"
					  "Ksd05 = ?,"
					  "Ksd06 = ?,"
					  "Ksd07 = ?,"
					  "Ksd08 = ?,"
					  "ksd09 = ?";

		m_SqlDELETE = "DELETE v_jv01 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_jv01", "Kdtid", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "KdtKaiid", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Kdtksdid", "3", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Kdtflg", "4", "", "NO", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Kdtritsu", "5", "", "NO", "float", "0", "0", "53", "0", "0", "", "", 0,
					 _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksdid", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksd00", "7", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksd01", "8", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksd02", "9", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksd03", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksd04", "11", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksd05", "12", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksd06", "13", "", "YES", "nvarchar", "30", "60", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksd07", "14", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "Ksd08", "15", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv01", "ksd09", "16", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_jv01() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *Ksd01 = new char[101];
		char *Ksd02 = new char[101];
		char *Ksd03 = new char[101];
		char *Ksd04 = new char[41];
		char *Ksd05 = new char[101];
		char *Ksd06 = new char[61];
		char *Ksd07 = new char[41];
		char *Ksd08 = new char[41];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_jv01 rec;
				com->GetData(1, SQL_C_LONG, &rec.Kdtid, sizeof(rec.Kdtid), 0);
				com->GetData(2, SQL_C_LONG, &rec.KdtKaiid, sizeof(rec.KdtKaiid), 0);
				com->GetData(3, SQL_C_LONG, &rec.Kdtksdid, sizeof(rec.Kdtksdid), 0);
				com->GetData(4, SQL_C_CHAR, &rec.Kdtflg, sizeof(rec.Kdtflg), 0);
				com->GetData(5, SQL_C_DOUBLE, &rec.Kdtritsu, sizeof(rec.Kdtritsu), 0);
				com->GetData(6, SQL_C_LONG, &rec.Ksdid, sizeof(rec.Ksdid), 0);
				com->GetData(7, SQL_C_LONG, &rec.Ksd00, sizeof(rec.Ksd00), 0);
				memset(Ksd01, 0, 101);
				com->GetData(8, SQL_C_CHAR, Ksd01, 101, 0);
				rec.Ksd01 = (char *)Ksd01;
				memset(Ksd02, 0, 101);
				com->GetData(9, SQL_C_CHAR, Ksd02, 101, 0);
				rec.Ksd02 = (char *)Ksd02;
				memset(Ksd03, 0, 101);
				com->GetData(10, SQL_C_CHAR, Ksd03, 101, 0);
				rec.Ksd03 = (char *)Ksd03;
				memset(Ksd04, 0, 41);
				com->GetData(11, SQL_C_CHAR, Ksd04, 41, 0);
				rec.Ksd04 = (char *)Ksd04;
				memset(Ksd05, 0, 101);
				com->GetData(12, SQL_C_CHAR, Ksd05, 101, 0);
				rec.Ksd05 = (char *)Ksd05;
				memset(Ksd06, 0, 61);
				com->GetData(13, SQL_C_CHAR, Ksd06, 61, 0);
				rec.Ksd06 = (char *)Ksd06;
				memset(Ksd07, 0, 41);
				com->GetData(14, SQL_C_CHAR, Ksd07, 41, 0);
				rec.Ksd07 = (char *)Ksd07;
				memset(Ksd08, 0, 41);
				com->GetData(15, SQL_C_CHAR, Ksd08, 41, 0);
				rec.Ksd08 = (char *)Ksd08;
				com->GetData(16, SQL_C_CHAR, &rec.ksd09, sizeof(rec.ksd09), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] Ksd01;
		delete[] Ksd02;
		delete[] Ksd03;
		delete[] Ksd04;
		delete[] Ksd05;
		delete[] Ksd06;
		delete[] Ksd07;
		delete[] Ksd08;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_jv01 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_jv01 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_jv01 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_jv01> m_Data;
};
class CR_t_doc : public COdbcRecord {
public:
	CR_t_doc() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_doc() {}

	void Initialize() {
		doc_index = 0;
		doc_hat = 0;
		doc_no = 0;
		doc_line = 0;
		doc_ind = 0;
		doc_text = "";
	}

public:
	SQLINTEGER doc_index;
	SQLINTEGER doc_hat;
	SQLINTEGER doc_no;
	SQLINTEGER doc_line;
	SQLINTEGER doc_ind;
	std::string doc_text;
	TIMESTAMP_STRUCT doc_date;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->doc_index;
		} break;
		case 1: {
			ss << this->doc_hat;
		} break;
		case 2: {
			ss << this->doc_no;
		} break;
		case 3: {
			ss << this->doc_line;
		} break;
		case 4: {
			ss << this->doc_ind;
		} break;
		case 5: {
			ss << this->doc_text;
		} break;
		case 6: {
			COdbcDateTime date(&this->doc_date);
			ss << date.to_string();
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_doc : public COdbcTable {
public:
	CT_t_doc() : COdbcTable() {
		m_TableName = "t_doc";
		m_SqlSELECT = "SELECT "
					  "doc_index,"
					  "doc_hat,"
					  "doc_no,"
					  "doc_line,"
					  "doc_ind,"
					  "doc_text,"
					  "doc_date"
					  " FROM t_doc";
		m_SqlINSERT = "INSERT INTO t_doc ("
					  "doc_hat,"
					  "doc_no,"
					  "doc_line,"
					  "doc_ind,"
					  "doc_text,"
					  "doc_date)"
					  " VALUES ( ?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_doc SET "
					  "doc_hat = ?,"
					  "doc_no = ?,"
					  "doc_line = ?,"
					  "doc_ind = ?,"
					  "doc_text = ?,"
					  "doc_date = ?";

		m_SqlDELETE = "DELETE t_doc ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_doc", "doc_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_doc", "doc_hat", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_doc", "doc_no", "3", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_doc", "doc_line", "4", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_doc", "doc_ind", "5", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_doc", "doc_text", "6", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_doc", "doc_date", "7", "", "YES", "smalldatetime", "0", "0", "0", "0", "0", "",
					 "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_doc", "doc_index", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_doc() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *doc_text = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_doc rec;
				com->GetData(1, SQL_C_LONG, &rec.doc_index, sizeof(rec.doc_index), 0);
				com->GetData(2, SQL_C_LONG, &rec.doc_hat, sizeof(rec.doc_hat), 0);
				com->GetData(3, SQL_C_LONG, &rec.doc_no, sizeof(rec.doc_no), 0);
				com->GetData(4, SQL_C_LONG, &rec.doc_line, sizeof(rec.doc_line), 0);
				com->GetData(5, SQL_C_LONG, &rec.doc_ind, sizeof(rec.doc_ind), 0);
				memset(doc_text, 0, 511);
				com->GetData(6, SQL_C_CHAR, doc_text, 511, 0);
				rec.doc_text = (char *)doc_text;
				com->GetData(7, SQL_C_TYPE_TIMESTAMP, &rec.doc_date, sizeof(rec.doc_date), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] doc_text;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_doc operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_doc &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_doc rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_doc> m_Data;
};
class CR_v_jv99 : public COdbcRecord {
public:
	CR_v_jv99() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_jv99() {}

	void Initialize() {
		Kdtid = 0;
		KdtKaiid = 0;
		Kdtksdid = 0;
		Kdtflg = 0;
		Ksd01 = "";
		Kai01 = "";
	}

public:
	SQLINTEGER Kdtid;
	SQLINTEGER KdtKaiid;
	SQLINTEGER Kdtksdid;
	SQLCHAR Kdtflg;
	std::string Ksd01;
	std::string Kai01;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->Kdtid;
		} break;
		case 1: {
			ss << this->KdtKaiid;
		} break;
		case 2: {
			ss << this->Kdtksdid;
		} break;
		case 3: {
			ss << this->Kdtflg;
		} break;
		case 4: {
			ss << this->Ksd01;
		} break;
		case 5: {
			ss << this->Kai01;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_jv99 : public COdbcTable {
public:
	CT_v_jv99() : COdbcTable() {
		m_TableName = "v_jv99";
		m_SqlSELECT = "SELECT "
					  "Kdtid,"
					  "KdtKaiid,"
					  "Kdtksdid,"
					  "Kdtflg,"
					  "Ksd01,"
					  "Kai01"
					  " FROM v_jv99";
		m_SqlINSERT = "INSERT INTO v_jv99 ("
					  "Kdtid,"
					  "KdtKaiid,"
					  "Kdtksdid,"
					  "Kdtflg,"
					  "Ksd01,"
					  "Kai01)"
					  " VALUES ( ?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_jv99 SET "
					  "Kdtid = ?,"
					  "KdtKaiid = ?,"
					  "Kdtksdid = ?,"
					  "Kdtflg = ?,"
					  "Ksd01 = ?,"
					  "Kai01 = ?";

		m_SqlDELETE = "DELETE v_jv99 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_jv99", "Kdtid", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv99", "KdtKaiid", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv99", "Kdtksdid", "3", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv99", "Kdtflg", "4", "", "NO", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv99", "Ksd01", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv99", "Kai01", "6", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_jv99() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *Ksd01 = new char[101];
		char *Kai01 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_jv99 rec;
				com->GetData(1, SQL_C_LONG, &rec.Kdtid, sizeof(rec.Kdtid), 0);
				com->GetData(2, SQL_C_LONG, &rec.KdtKaiid, sizeof(rec.KdtKaiid), 0);
				com->GetData(3, SQL_C_LONG, &rec.Kdtksdid, sizeof(rec.Kdtksdid), 0);
				com->GetData(4, SQL_C_CHAR, &rec.Kdtflg, sizeof(rec.Kdtflg), 0);
				memset(Ksd01, 0, 101);
				com->GetData(5, SQL_C_CHAR, Ksd01, 101, 0);
				rec.Ksd01 = (char *)Ksd01;
				memset(Kai01, 0, 101);
				com->GetData(6, SQL_C_CHAR, Kai01, 101, 0);
				rec.Kai01 = (char *)Kai01;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] Ksd01;
		delete[] Kai01;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_jv99 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_jv99 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_jv99 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_jv99> m_Data;
};
class CR_v_kouji00 : public COdbcRecord {
public:
	CR_v_kouji00() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_kouji00() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_sw = 0;
		km_bikou1 = "";
		km_bikou2 = "";
		km_nyuno = "";
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_bikou1;
	std::string km_bikou2;
	std::string km_nyuno;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_hat030;
		} break;
		case 8: {
			ss << this->km_hat040;
		} break;
		case 9: {
			ss << this->km_hat050;
		} break;
		case 10: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 11: {
			ss << this->km_sw;
		} break;
		case 12: {
			ss << this->km_bikou1;
		} break;
		case 13: {
			ss << this->km_bikou2;
		} break;
		case 14: {
			ss << this->km_nyuno;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_kouji00 : public COdbcTable {
public:
	CT_v_kouji00() : COdbcTable() {
		m_TableName = "v_kouji00";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno"
					  " FROM v_kouji00";
		m_SqlINSERT = "INSERT INTO v_kouji00 ("
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_kouji00 SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuno = ?";

		m_SqlDELETE = "DELETE v_kouji00 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_hat030", "8", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_hat040", "9", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_hat050", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_nyuudat", "11", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_sw", "12", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_bikou1", "13", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_bikou2", "14", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji00", "km_nyuno", "15", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_kouji00() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_kouji00 rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				memset(km_hat030, 0, 101);
				com->GetData(8, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(9, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(10, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				com->GetData(11, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(12, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_bikou1, 0, 511);
				com->GetData(13, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(14, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				memset(km_nyuno, 0, 101);
				com->GetData(15, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_kouji00 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_kouji00 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_kouji00 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_kouji00> m_Data;
};
class CR_t_filepath : public COdbcRecord {
public:
	CR_t_filepath() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_filepath() {}

	void Initialize() {
		Id = 0;
		kouji = 0;
		naame = "";
		path = "";
	}

public:
	SQLINTEGER Id;
	SQLINTEGER kouji;
	std::string naame;
	std::string path;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->Id;
		} break;
		case 1: {
			ss << this->kouji;
		} break;
		case 2: {
			ss << this->naame;
		} break;
		case 3: {
			ss << this->path;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_filepath : public COdbcTable {
public:
	CT_t_filepath() : COdbcTable() {
		m_TableName = "t_filepath";
		m_SqlSELECT = "SELECT "
					  "Id,"
					  "kouji,"
					  "naame,"
					  "path"
					  " FROM t_filepath";
		m_SqlINSERT = "INSERT INTO t_filepath ("
					  "kouji,"
					  "naame,"
					  "path)"
					  " VALUES ( ?,?,?)";
		m_SqlUPDATE = "UPDATE t_filepath SET "
					  "kouji = ?,"
					  "naame = ?,"
					  "path = ?";

		m_SqlDELETE = "DELETE t_filepath ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_filepath", "Id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_filepath", "kouji", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_filepath", "naame", "3", "", "NO", "nvarchar", "-1", "-1", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_filepath", "path", "4", "", "NO", "nvarchar", "-1", "-1", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_filepath", "Id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_filepath() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *naame = new char[0];
		char *path = new char[0];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_filepath rec;
				com->GetData(1, SQL_C_LONG, &rec.Id, sizeof(rec.Id), 0);
				com->GetData(2, SQL_C_LONG, &rec.kouji, sizeof(rec.kouji), 0);
				memset(naame, 0, 0);
				com->GetData(3, SQL_C_CHAR, naame, 0, 0);
				rec.naame = (char *)naame;
				memset(path, 0, 0);
				com->GetData(4, SQL_C_CHAR, path, 0, 0);
				rec.path = (char *)path;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] naame;
		delete[] path;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_filepath operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_filepath &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_filepath rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_filepath> m_Data;
};
class CR_v_koutei : public COdbcRecord {
public:
	CR_v_koutei() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_koutei() {}

	void Initialize() {
		kou_id = 0;
		kou_kouji = 0;
	}

public:
	SQLINTEGER kou_id;
	SQLINTEGER kou_kouji;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kou_id;
		} break;
		case 1: {
			ss << this->kou_kouji;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_koutei : public COdbcTable {
public:
	CT_v_koutei() : COdbcTable() {
		m_TableName = "v_koutei";
		m_SqlSELECT = "SELECT "
					  "kou_id,"
					  "kou_kouji"
					  " FROM v_koutei";
		m_SqlINSERT = "INSERT INTO v_koutei ("
					  "kou_id,"
					  "kou_kouji)"
					  " VALUES ( ?,?)";
		m_SqlUPDATE = "UPDATE v_koutei SET "
					  "kou_id = ?,"
					  "kou_kouji = ?";

		m_SqlDELETE = "DELETE v_koutei ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_koutei", "kou_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koutei", "kou_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_koutei() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_koutei rec;
				com->GetData(1, SQL_C_LONG, &rec.kou_id, sizeof(rec.kou_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.kou_kouji, sizeof(rec.kou_kouji), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_koutei operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_koutei &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_koutei rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_koutei> m_Data;
};
class CR_v_meisai : public COdbcRecord {
public:
	CR_v_meisai() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_meisai() {}

	void Initialize() {
		yo_code = 0;
		yo_name = "";
		yo_ban = "";
		yo_kcd = 0;
		yo_kmn = "";
		yo_hcd = 0;
		yo_hmn = "";
		yo_HAT030 = "";
		yo_HAT040 = "";
		yo_HAT050 = "";
		yo_bikou2 = "";
		yo_bikou1 = "";
		yo_nyuno = "";
		mes_id = 0;
		mes_kouji = 0;
		mes_gyo = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		mes_syukei = 0;
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER yo_code;
	std::string yo_name;
	std::string yo_ban;
	SQLINTEGER yo_kcd;
	std::string yo_kmn;
	SQLINTEGER yo_hcd;
	std::string yo_hmn;
	std::string yo_HAT030;
	std::string yo_HAT040;
	std::string yo_HAT050;
	TIMESTAMP_STRUCT yo_nyuudat;
	std::string yo_bikou2;
	std::string yo_bikou1;
	std::string yo_nyuno;
	TIMESTAMP_STRUCT yo_sinsadat;
	TIMESTAMP_STRUCT yo_mitsumori;
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	SQLINTEGER mes_gyo;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQLINTEGER mes_syukei;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->yo_code;
		} break;
		case 1: {
			ss << this->yo_name;
		} break;
		case 2: {
			ss << this->yo_ban;
		} break;
		case 3: {
			ss << this->yo_kcd;
		} break;
		case 4: {
			ss << this->yo_kmn;
		} break;
		case 5: {
			ss << this->yo_hcd;
		} break;
		case 6: {
			ss << this->yo_hmn;
		} break;
		case 7: {
			ss << this->yo_HAT030;
		} break;
		case 8: {
			ss << this->yo_HAT040;
		} break;
		case 9: {
			ss << this->yo_HAT050;
		} break;
		case 10: {
			COdbcDateTime date(&this->yo_nyuudat);
			ss << date.to_string();
		} break;
		case 11: {
			ss << this->yo_bikou2;
		} break;
		case 12: {
			ss << this->yo_bikou1;
		} break;
		case 13: {
			ss << this->yo_nyuno;
		} break;
		case 14: {
			COdbcDateTime date(&this->yo_sinsadat);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->yo_mitsumori);
			ss << date.to_string();
		} break;
		case 16: {
			ss << this->mes_id;
		} break;
		case 17: {
			ss << this->mes_kouji;
		} break;
		case 18: {
			ss << this->mes_gyo;
		} break;
		case 19: {
			ss << this->mes_name;
		} break;
		case 20: {
			ss << this->mes_kikaku;
		} break;
		case 21: {
			ss << this->mes_suu;
		} break;
		case 22: {
			ss << this->mes_tani;
		} break;
		case 23: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 24: {
			ss << this->mes_syukei;
		} break;
		case 25: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 26: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_meisai : public COdbcTable {
public:
	CT_v_meisai() : COdbcTable() {
		m_TableName = "v_meisai";
		m_SqlSELECT = "SELECT "
					  "yo_code,"
					  "yo_name,"
					  "yo_ban,"
					  "yo_kcd,"
					  "yo_kmn,"
					  "yo_hcd,"
					  "yo_hmn,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_bikou2,"
					  "yo_bikou1,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM v_meisai";
		m_SqlINSERT = "INSERT INTO v_meisai ("
					  "yo_code,"
					  "yo_name,"
					  "yo_ban,"
					  "yo_kcd,"
					  "yo_kmn,"
					  "yo_hcd,"
					  "yo_hmn,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_bikou2,"
					  "yo_bikou1,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_meisai SET "
					  "yo_code = ?,"
					  "yo_name = ?,"
					  "yo_ban = ?,"
					  "yo_kcd = ?,"
					  "yo_kmn = ?,"
					  "yo_hcd = ?,"
					  "yo_hmn = ?,"
					  "yo_HAT030 = ?,"
					  "yo_HAT040 = ?,"
					  "yo_HAT050 = ?,"
					  "yo_nyuudat = ?,"
					  "yo_bikou2 = ?,"
					  "yo_bikou1 = ?,"
					  "yo_nyuno = ?,"
					  "yo_sinsadat = ?,"
					  "yo_mitsumori = ?,"
					  "mes_id = ?,"
					  "mes_kouji = ?,"
					  "mes_gyo = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_syukei = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE v_meisai ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_code", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_name", "2", "", "NO", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_ban", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_kcd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_kmn", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_hcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_hmn", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_HAT030", "8", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_HAT040", "9", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_HAT050", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_nyuudat", "11", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_bikou2", "12", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_bikou1", "13", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_nyuno", "14", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_sinsadat", "15", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "yo_mitsumori", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_id", "17", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_kouji", "18", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_gyo", "19", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_name", "20", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_kikaku", "21", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_suu", "22", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_tani", "23", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_tanka", "24", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_syukei", "25", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_kingaku", "26", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai", "mes_tekiyou", "27", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_meisai() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *yo_name = new char[511];
		char *yo_ban = new char[511];
		char *yo_kmn = new char[101];
		char *yo_hmn = new char[511];
		char *yo_HAT030 = new char[101];
		char *yo_HAT040 = new char[101];
		char *yo_HAT050 = new char[101];
		char *yo_bikou2 = new char[511];
		char *yo_bikou1 = new char[511];
		char *yo_nyuno = new char[101];
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_meisai rec;
				com->GetData(1, SQL_C_LONG, &rec.yo_code, sizeof(rec.yo_code), 0);
				memset(yo_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, yo_name, 511, 0);
				rec.yo_name = (char *)yo_name;
				memset(yo_ban, 0, 511);
				com->GetData(3, SQL_C_CHAR, yo_ban, 511, 0);
				rec.yo_ban = (char *)yo_ban;
				com->GetData(4, SQL_C_LONG, &rec.yo_kcd, sizeof(rec.yo_kcd), 0);
				memset(yo_kmn, 0, 101);
				com->GetData(5, SQL_C_CHAR, yo_kmn, 101, 0);
				rec.yo_kmn = (char *)yo_kmn;
				com->GetData(6, SQL_C_LONG, &rec.yo_hcd, sizeof(rec.yo_hcd), 0);
				memset(yo_hmn, 0, 511);
				com->GetData(7, SQL_C_CHAR, yo_hmn, 511, 0);
				rec.yo_hmn = (char *)yo_hmn;
				memset(yo_HAT030, 0, 101);
				com->GetData(8, SQL_C_CHAR, yo_HAT030, 101, 0);
				rec.yo_HAT030 = (char *)yo_HAT030;
				memset(yo_HAT040, 0, 101);
				com->GetData(9, SQL_C_CHAR, yo_HAT040, 101, 0);
				rec.yo_HAT040 = (char *)yo_HAT040;
				memset(yo_HAT050, 0, 101);
				com->GetData(10, SQL_C_CHAR, yo_HAT050, 101, 0);
				rec.yo_HAT050 = (char *)yo_HAT050;
				com->GetData(11, SQL_C_TYPE_TIMESTAMP, &rec.yo_nyuudat, sizeof(rec.yo_nyuudat), 0);
				memset(yo_bikou2, 0, 511);
				com->GetData(12, SQL_C_CHAR, yo_bikou2, 511, 0);
				rec.yo_bikou2 = (char *)yo_bikou2;
				memset(yo_bikou1, 0, 511);
				com->GetData(13, SQL_C_CHAR, yo_bikou1, 511, 0);
				rec.yo_bikou1 = (char *)yo_bikou1;
				memset(yo_nyuno, 0, 101);
				com->GetData(14, SQL_C_CHAR, yo_nyuno, 101, 0);
				rec.yo_nyuno = (char *)yo_nyuno;
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.yo_sinsadat, sizeof(rec.yo_sinsadat), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.yo_mitsumori, sizeof(rec.yo_mitsumori), 0);
				com->GetData(17, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(18, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				com->GetData(19, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				memset(mes_name, 0, 511);
				com->GetData(20, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(21, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(22, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(23, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(24, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(25, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				com->GetData(26, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(27, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] yo_name;
		delete[] yo_ban;
		delete[] yo_kmn;
		delete[] yo_hmn;
		delete[] yo_HAT030;
		delete[] yo_HAT040;
		delete[] yo_HAT050;
		delete[] yo_bikou2;
		delete[] yo_bikou1;
		delete[] yo_nyuno;
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_meisai operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_meisai &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_meisai rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_meisai> m_Data;
};
class CR_v_meisai_koujigyo : public COdbcRecord {
public:
	CR_v_meisai_koujigyo() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_meisai_koujigyo() {}

	void Initialize() {
		mes_id = 0;
		mes_kouji = 0;
		mes_gyo = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		mes_syukei = 0;
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	SQLINTEGER mes_gyo;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQLINTEGER mes_syukei;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_id;
		} break;
		case 1: {
			ss << this->mes_kouji;
		} break;
		case 2: {
			ss << this->mes_gyo;
		} break;
		case 3: {
			ss << this->mes_name;
		} break;
		case 4: {
			ss << this->mes_kikaku;
		} break;
		case 5: {
			ss << this->mes_suu;
		} break;
		case 6: {
			ss << this->mes_tani;
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 8: {
			ss << this->mes_syukei;
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 10: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_meisai_koujigyo : public COdbcTable {
public:
	CT_v_meisai_koujigyo() : COdbcTable() {
		m_TableName = "v_meisai_koujigyo";
		m_SqlSELECT = "SELECT "
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM v_meisai_koujigyo";
		m_SqlINSERT = "INSERT INTO v_meisai_koujigyo ("
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_meisai_koujigyo SET "
					  "mes_id = ?,"
					  "mes_kouji = ?,"
					  "mes_gyo = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_syukei = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE v_meisai_koujigyo ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_name", "4", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_kikaku", "5", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_suu", "6", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_tani", "7", "", "YES", "nvarchar", "50", "100", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_tanka", "8", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_syukei", "9", "", "YES", "int", "0", "0", "10", "0",
					 "0", "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_kingaku", "10", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_meisai_koujigyo", "mes_tekiyou", "11", "", "YES", "nvarchar", "255", "510",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_meisai_koujigyo() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_meisai_koujigyo rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				memset(mes_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(5, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(6, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(7, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(8, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(9, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_meisai_koujigyo operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_meisai_koujigyo &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_meisai_koujigyo rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_meisai_koujigyo> m_Data;
};
class CR_V_meisaityofuku : public COdbcRecord {
public:
	CR_V_meisaityofuku() : COdbcRecord() { Initialize(); }
	virtual ~CR_V_meisaityofuku() {}

	void Initialize() {
		mes_syukei = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_tani = "";
		NumberOfDups = 0;
		memset(&min_tanka, 0, sizeof(min_tanka));
		memset(&max_tanka, 0, sizeof(max_tanka));
		memset(&avg_tanka, 0, sizeof(avg_tanka));
	}

public:
	SQLINTEGER mes_syukei;
	std::string mes_name;
	std::string mes_kikaku;
	std::string mes_tani;
	SQLINTEGER NumberOfDups;
	SQL_NUMERIC_STRUCT min_tanka;
	SQL_NUMERIC_STRUCT max_tanka;
	SQL_NUMERIC_STRUCT avg_tanka;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_syukei;
		} break;
		case 1: {
			ss << this->mes_name;
		} break;
		case 2: {
			ss << this->mes_kikaku;
		} break;
		case 3: {
			ss << this->mes_tani;
		} break;
		case 4: {
			ss << this->NumberOfDups;
		} break;
		case 5: {
			ss << COdbcColumn::NumericToString(&this->min_tanka);
		} break;
		case 6: {
			ss << COdbcColumn::NumericToString(&this->max_tanka);
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->avg_tanka);
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_V_meisaityofuku : public COdbcTable {
public:
	CT_V_meisaityofuku() : COdbcTable() {
		m_TableName = "V_meisaityofuku";
		m_SqlSELECT = "SELECT "
					  "mes_syukei,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_tani,"
					  "NumberOfDups,"
					  "min_tanka,"
					  "max_tanka,"
					  "avg_tanka"
					  " FROM V_meisaityofuku";
		m_SqlINSERT = "INSERT INTO V_meisaityofuku ("
					  "mes_syukei,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_tani,"
					  "NumberOfDups,"
					  "min_tanka,"
					  "max_tanka,"
					  "avg_tanka)"
					  " VALUES ( ?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE V_meisaityofuku SET "
					  "mes_syukei = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_tani = ?,"
					  "NumberOfDups = ?,"
					  "min_tanka = ?,"
					  "max_tanka = ?,"
					  "avg_tanka = ?";

		m_SqlDELETE = "DELETE V_meisaityofuku ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "V_meisaityofuku", "mes_syukei", "1", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "V_meisaityofuku", "mes_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "V_meisaityofuku", "mes_kikaku", "3", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "V_meisaityofuku", "mes_tani", "4", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "V_meisaityofuku", "NumberOfDups", "5", "", "YES", "int", "0", "0", "10", "0",
					 "0", "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "V_meisaityofuku", "min_tanka", "6", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "V_meisaityofuku", "max_tanka", "7", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "V_meisaityofuku", "avg_tanka", "8", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_V_meisaityofuku() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_V_meisaityofuku rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				memset(mes_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(3, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				memset(mes_tani, 0, 101);
				com->GetData(4, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(5, SQL_C_LONG, &rec.NumberOfDups, sizeof(rec.NumberOfDups), 0);
				com->GetData(6, SQL_C_NUMERIC, &rec.min_tanka, sizeof(rec.min_tanka), 0);
				com->GetData(7, SQL_C_NUMERIC, &rec.max_tanka, sizeof(rec.max_tanka), 0);
				com->GetData(8, SQL_C_NUMERIC, &rec.avg_tanka, sizeof(rec.avg_tanka), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_V_meisaityofuku operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_V_meisaityofuku &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_V_meisaityofuku rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_V_meisaityofuku> m_Data;
};
class CR_t_seikyu : public COdbcRecord {
public:
	CR_t_seikyu() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_seikyu() {}

	void Initialize() {
		se_Id = 0;
		se_kouji = 0;
		se_name = "";
		memset(&se_nuki, 0, sizeof(se_nuki));
		memset(&se_zei, 0, sizeof(se_zei));
		memset(&se_komi, 0, sizeof(se_komi));
		se_kubun = 0;
	}

public:
	SQLINTEGER se_Id;
	SQLINTEGER se_kouji;
	TIMESTAMP_STRUCT se_date;
	std::string se_name;
	SQL_NUMERIC_STRUCT se_nuki;
	SQL_NUMERIC_STRUCT se_zei;
	SQL_NUMERIC_STRUCT se_komi;
	SQLINTEGER se_kubun;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->se_Id;
		} break;
		case 1: {
			ss << this->se_kouji;
		} break;
		case 2: {
			COdbcDateTime date(&this->se_date);
			ss << date.to_string();
		} break;
		case 3: {
			ss << this->se_name;
		} break;
		case 4: {
			ss << COdbcColumn::NumericToString(&this->se_nuki);
		} break;
		case 5: {
			ss << COdbcColumn::NumericToString(&this->se_zei);
		} break;
		case 6: {
			ss << COdbcColumn::NumericToString(&this->se_komi);
		} break;
		case 7: {
			ss << this->se_kubun;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_seikyu : public COdbcTable {
public:
	CT_t_seikyu() : COdbcTable() {
		m_TableName = "t_seikyu";
		m_SqlSELECT = "SELECT "
					  "se_Id,"
					  "se_kouji,"
					  "se_date,"
					  "se_name,"
					  "se_nuki,"
					  "se_zei,"
					  "se_komi,"
					  "se_kubun"
					  " FROM t_seikyu";
		m_SqlINSERT = "INSERT INTO t_seikyu ("
					  "se_kouji,"
					  "se_date,"
					  "se_name,"
					  "se_nuki,"
					  "se_zei,"
					  "se_komi,"
					  "se_kubun)"
					  " VALUES ( ?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_seikyu SET "
					  "se_kouji = ?,"
					  "se_date = ?,"
					  "se_name = ?,"
					  "se_nuki = ?,"
					  "se_zei = ?,"
					  "se_komi = ?,"
					  "se_kubun = ?";

		m_SqlDELETE = "DELETE t_seikyu ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_seikyu", "se_Id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_seikyu", "se_kouji", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_seikyu", "se_date", "3", "", "NO", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_seikyu", "se_name", "4", "", "YES", "nvarchar", "-1", "-1", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_seikyu", "se_nuki", "5", "", "YES", "decimal", "0", "0", "18", "0", "0", "",
					 "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_seikyu", "se_zei", "6", "", "YES", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_seikyu", "se_komi", "7", "", "YES", "decimal", "0", "0", "18", "0", "0", "",
					 "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_seikyu", "se_kubun", "8", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_seikyu", "se_Id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_seikyu() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *se_name = new char[0];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_seikyu rec;
				com->GetData(1, SQL_C_LONG, &rec.se_Id, sizeof(rec.se_Id), 0);
				com->GetData(2, SQL_C_LONG, &rec.se_kouji, sizeof(rec.se_kouji), 0);
				com->GetData(3, SQL_C_TYPE_TIMESTAMP, &rec.se_date, sizeof(rec.se_date), 0);
				memset(se_name, 0, 0);
				com->GetData(4, SQL_C_CHAR, se_name, 0, 0);
				rec.se_name = (char *)se_name;
				com->GetData(5, SQL_C_NUMERIC, &rec.se_nuki, sizeof(rec.se_nuki), 0);
				com->GetData(6, SQL_C_NUMERIC, &rec.se_zei, sizeof(rec.se_zei), 0);
				com->GetData(7, SQL_C_NUMERIC, &rec.se_komi, sizeof(rec.se_komi), 0);
				com->GetData(8, SQL_C_LONG, &rec.se_kubun, sizeof(rec.se_kubun), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] se_name;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_seikyu operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_seikyu &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_seikyu rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_seikyu> m_Data;
};
class CR_v_mes : public COdbcRecord {
public:
	CR_v_mes() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_mes() {}

	void Initialize() {
		行 = 0;
		レベル = 0;
		名称 = "";
		規格 = "";
		数量 = 0.0;
		単位 = "";
		memset(&単価, 0, sizeof(単価));
		memset(&金額, 0, sizeof(金額));
		摘要 = "";
		mes_id = 0;
		mes_kouji = 0;
	}

public:
	SQLINTEGER 行;
	SQLINTEGER レベル;
	std::string 名称;
	std::string 規格;
	SQLFLOAT 数量;
	std::string 単位;
	SQL_NUMERIC_STRUCT 単価;
	SQL_NUMERIC_STRUCT 金額;
	std::string 摘要;
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->行;
		} break;
		case 1: {
			ss << this->レベル;
		} break;
		case 2: {
			ss << this->名称;
		} break;
		case 3: {
			ss << this->規格;
		} break;
		case 4: {
			ss << this->数量;
		} break;
		case 5: {
			ss << this->単位;
		} break;
		case 6: {
			ss << COdbcColumn::NumericToString(&this->単価);
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->金額);
		} break;
		case 8: {
			ss << this->摘要;
		} break;
		case 9: {
			ss << this->mes_id;
		} break;
		case 10: {
			ss << this->mes_kouji;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_mes : public COdbcTable {
public:
	CT_v_mes() : COdbcTable() {
		m_TableName = "v_mes";
		m_SqlSELECT = "SELECT "
					  "行,"
					  "レベル,"
					  "名称,"
					  "規格,"
					  "数量,"
					  "単位,"
					  "単価,"
					  "金額,"
					  "摘要,"
					  "mes_id,"
					  "mes_kouji"
					  " FROM v_mes";
		m_SqlINSERT = "INSERT INTO v_mes ("
					  "行,"
					  "レベル,"
					  "名称,"
					  "規格,"
					  "数量,"
					  "単位,"
					  "単価,"
					  "金額,"
					  "摘要,"
					  "mes_id,"
					  "mes_kouji)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_mes SET "
					  "行 = ?,"
					  "レベル = ?,"
					  "名称 = ?,"
					  "規格 = ?,"
					  "数量 = ?,"
					  "単位 = ?,"
					  "単価 = ?,"
					  "金額 = ?,"
					  "摘要 = ?,"
					  "mes_id = ?,"
					  "mes_kouji = ?";

		m_SqlDELETE = "DELETE v_mes ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_mes", "行", "1", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0, _int,
					 -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "レベル", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "名称", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "規格", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "数量", "5", "", "YES", "float", "0", "0", "53", "0", "0", "", "", 0,
					 _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "単位", "6", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "単価", "7", "", "YES", "money", "0", "0", "19", "4", "0", "", "", 0,
					 _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "金額", "8", "", "YES", "money", "0", "0", "19", "4", "0", "", "", 0,
					 _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "摘要", "9", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "mes_id", "10", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes", "mes_kouji", "11", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_mes() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *名称 = new char[511];
		char *規格 = new char[511];
		char *単位 = new char[101];
		char *摘要 = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_mes rec;
				com->GetData(1, SQL_C_LONG, &rec.行, sizeof(rec.行), 0);
				com->GetData(2, SQL_C_LONG, &rec.レベル, sizeof(rec.レベル), 0);
				memset(名称, 0, 511);
				com->GetData(3, SQL_C_CHAR, 名称, 511, 0);
				rec.名称 = (char *)名称;
				memset(規格, 0, 511);
				com->GetData(4, SQL_C_CHAR, 規格, 511, 0);
				rec.規格 = (char *)規格;
				com->GetData(5, SQL_C_DOUBLE, &rec.数量, sizeof(rec.数量), 0);
				memset(単位, 0, 101);
				com->GetData(6, SQL_C_CHAR, 単位, 101, 0);
				rec.単位 = (char *)単位;
				com->GetData(7, SQL_C_NUMERIC, &rec.単価, sizeof(rec.単価), 0);
				com->GetData(8, SQL_C_NUMERIC, &rec.金額, sizeof(rec.金額), 0);
				memset(摘要, 0, 511);
				com->GetData(9, SQL_C_CHAR, 摘要, 511, 0);
				rec.摘要 = (char *)摘要;
				com->GetData(10, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(11, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] 名称;
		delete[] 規格;
		delete[] 単位;
		delete[] 摘要;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_mes operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_mes &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_mes rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_mes> m_Data;
};
class CR_v_mes_arf : public COdbcRecord {
public:
	CR_v_mes_arf() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_mes_arf() {}

	void Initialize() {
		mes_gyo = 0;
		mes_syukei = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER mes_gyo;
	SQLINTEGER mes_syukei;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_gyo;
		} break;
		case 1: {
			ss << this->mes_syukei;
		} break;
		case 2: {
			ss << this->mes_name;
		} break;
		case 3: {
			ss << this->mes_kikaku;
		} break;
		case 4: {
			ss << this->mes_suu;
		} break;
		case 5: {
			ss << this->mes_tani;
		} break;
		case 6: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 8: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_mes_arf : public COdbcTable {
public:
	CT_v_mes_arf() : COdbcTable() {
		m_TableName = "v_mes_arf";
		m_SqlSELECT = "SELECT "
					  "mes_gyo,"
					  "mes_syukei,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM v_mes_arf";
		m_SqlINSERT = "INSERT INTO v_mes_arf ("
					  "mes_gyo,"
					  "mes_syukei,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_mes_arf SET "
					  "mes_gyo = ?,"
					  "mes_syukei = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE v_mes_arf ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_mes_arf", "mes_gyo", "1", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes_arf", "mes_syukei", "2", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes_arf", "mes_name", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes_arf", "mes_kikaku", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes_arf", "mes_suu", "5", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes_arf", "mes_tani", "6", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes_arf", "mes_tanka", "7", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes_arf", "mes_kingaku", "8", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mes_arf", "mes_tekiyou", "9", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_mes_arf() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_mes_arf rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				com->GetData(2, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				memset(mes_name, 0, 511);
				com->GetData(3, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(4, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(5, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(6, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(7, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(8, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(9, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_mes_arf operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_mes_arf &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_mes_arf rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_mes_arf> m_Data;
};
class CR_v_mitsumori : public COdbcRecord {
public:
	CR_v_mitsumori() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_mitsumori() {}

	void Initialize() {
		mit_id = 0;
		mit_no = 0;
		mit_ait = "";
		memset(&mit_gak, 0, sizeof(mit_gak));
		mit_koj = "";
		mit_adr = "";
		mit_com = "";
		mit_ath = "";
		mit_tek = "";
		mit_HAT010 = 0;
		mit_HAT020 = "";
		mit_HAT030 = "";
		mit_HAT040 = "";
		mit_HAT050 = "";
		mms_id = 0;
		mms_kouji = 0;
		mms_gyo = 0;
		mms_syukei = 0;
		mms_name = "";
		mms_kikaku = "";
		mms_suu = 0.0;
		mms_tani = "";
		memset(&mms_tanka, 0, sizeof(mms_tanka));
		memset(&mms_kingaku, 0, sizeof(mms_kingaku));
		mms_tekiyou = "";
	}

public:
	SQLINTEGER mit_id;
	SQLINTEGER mit_no;
	std::string mit_ait;
	TIMESTAMP_STRUCT mit_dat;
	SQL_NUMERIC_STRUCT mit_gak;
	std::string mit_koj;
	std::string mit_adr;
	TIMESTAMP_STRUCT mit_str;
	TIMESTAMP_STRUCT mit_end;
	std::string mit_com;
	std::string mit_ath;
	std::string mit_tek;
	SQLINTEGER mit_HAT010;
	std::string mit_HAT020;
	std::string mit_HAT030;
	std::string mit_HAT040;
	std::string mit_HAT050;
	SQLINTEGER mms_id;
	SQLINTEGER mms_kouji;
	SQLINTEGER mms_gyo;
	SQLINTEGER mms_syukei;
	std::string mms_name;
	std::string mms_kikaku;
	SQLFLOAT mms_suu;
	std::string mms_tani;
	SQL_NUMERIC_STRUCT mms_tanka;
	SQL_NUMERIC_STRUCT mms_kingaku;
	std::string mms_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mit_id;
		} break;
		case 1: {
			ss << this->mit_no;
		} break;
		case 2: {
			ss << this->mit_ait;
		} break;
		case 3: {
			COdbcDateTime date(&this->mit_dat);
			ss << date.to_string();
		} break;
		case 4: {
			ss << COdbcColumn::NumericToString(&this->mit_gak);
		} break;
		case 5: {
			ss << this->mit_koj;
		} break;
		case 6: {
			ss << this->mit_adr;
		} break;
		case 7: {
			COdbcDateTime date(&this->mit_str);
			ss << date.to_string();
		} break;
		case 8: {
			COdbcDateTime date(&this->mit_end);
			ss << date.to_string();
		} break;
		case 9: {
			ss << this->mit_com;
		} break;
		case 10: {
			ss << this->mit_ath;
		} break;
		case 11: {
			ss << this->mit_tek;
		} break;
		case 12: {
			ss << this->mit_HAT010;
		} break;
		case 13: {
			ss << this->mit_HAT020;
		} break;
		case 14: {
			ss << this->mit_HAT030;
		} break;
		case 15: {
			ss << this->mit_HAT040;
		} break;
		case 16: {
			ss << this->mit_HAT050;
		} break;
		case 17: {
			ss << this->mms_id;
		} break;
		case 18: {
			ss << this->mms_kouji;
		} break;
		case 19: {
			ss << this->mms_gyo;
		} break;
		case 20: {
			ss << this->mms_syukei;
		} break;
		case 21: {
			ss << this->mms_name;
		} break;
		case 22: {
			ss << this->mms_kikaku;
		} break;
		case 23: {
			ss << this->mms_suu;
		} break;
		case 24: {
			ss << this->mms_tani;
		} break;
		case 25: {
			ss << COdbcColumn::NumericToString(&this->mms_tanka);
		} break;
		case 26: {
			ss << COdbcColumn::NumericToString(&this->mms_kingaku);
		} break;
		case 27: {
			ss << this->mms_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_mitsumori : public COdbcTable {
public:
	CT_v_mitsumori() : COdbcTable() {
		m_TableName = "v_mitsumori";
		m_SqlSELECT = "SELECT "
					  "mit_id,"
					  "mit_no,"
					  "mit_ait,"
					  "mit_dat,"
					  "mit_gak,"
					  "mit_koj,"
					  "mit_adr,"
					  "mit_str,"
					  "mit_end,"
					  "mit_com,"
					  "mit_ath,"
					  "mit_tek,"
					  "mit_HAT010,"
					  "mit_HAT020,"
					  "mit_HAT030,"
					  "mit_HAT040,"
					  "mit_HAT050,"
					  "mms_id,"
					  "mms_kouji,"
					  "mms_gyo,"
					  "mms_syukei,"
					  "mms_name,"
					  "mms_kikaku,"
					  "mms_suu,"
					  "mms_tani,"
					  "mms_tanka,"
					  "mms_kingaku,"
					  "mms_tekiyou"
					  " FROM v_mitsumori";
		m_SqlINSERT = "INSERT INTO v_mitsumori ("
					  "mit_id,"
					  "mit_no,"
					  "mit_ait,"
					  "mit_dat,"
					  "mit_gak,"
					  "mit_koj,"
					  "mit_adr,"
					  "mit_str,"
					  "mit_end,"
					  "mit_com,"
					  "mit_ath,"
					  "mit_tek,"
					  "mit_HAT010,"
					  "mit_HAT020,"
					  "mit_HAT030,"
					  "mit_HAT040,"
					  "mit_HAT050,"
					  "mms_id,"
					  "mms_kouji,"
					  "mms_gyo,"
					  "mms_syukei,"
					  "mms_name,"
					  "mms_kikaku,"
					  "mms_suu,"
					  "mms_tani,"
					  "mms_tanka,"
					  "mms_kingaku,"
					  "mms_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_mitsumori SET "
					  "mit_id = ?,"
					  "mit_no = ?,"
					  "mit_ait = ?,"
					  "mit_dat = ?,"
					  "mit_gak = ?,"
					  "mit_koj = ?,"
					  "mit_adr = ?,"
					  "mit_str = ?,"
					  "mit_end = ?,"
					  "mit_com = ?,"
					  "mit_ath = ?,"
					  "mit_tek = ?,"
					  "mit_HAT010 = ?,"
					  "mit_HAT020 = ?,"
					  "mit_HAT030 = ?,"
					  "mit_HAT040 = ?,"
					  "mit_HAT050 = ?,"
					  "mms_id = ?,"
					  "mms_kouji = ?,"
					  "mms_gyo = ?,"
					  "mms_syukei = ?,"
					  "mms_name = ?,"
					  "mms_kikaku = ?,"
					  "mms_suu = ?,"
					  "mms_tani = ?,"
					  "mms_tanka = ?,"
					  "mms_kingaku = ?,"
					  "mms_tekiyou = ?";

		m_SqlDELETE = "DELETE v_mitsumori ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_no", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_ait", "3", "", "YES", "nvarchar", "100", "200", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_dat", "4", "", "YES", "datetime", "0", "0", "0", "0", "3", "",
					 "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_gak", "5", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_koj", "6", "", "YES", "nvarchar", "100", "200", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_adr", "7", "", "YES", "nvarchar", "100", "200", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_str", "8", "", "YES", "datetime", "0", "0", "0", "0", "3", "",
					 "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_end", "9", "", "YES", "datetime", "0", "0", "0", "0", "3", "",
					 "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_com", "10", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_ath", "11", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_tek", "12", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_HAT010", "13", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_HAT020", "14", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_HAT030", "15", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_HAT040", "16", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mit_HAT050", "17", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_id", "18", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_kouji", "19", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_gyo", "20", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_syukei", "21", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_name", "22", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_kikaku", "23", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_suu", "24", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_tani", "25", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_tanka", "26", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_kingaku", "27", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_mitsumori", "mms_tekiyou", "28", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_mitsumori() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mit_ait = new char[201];
		char *mit_koj = new char[201];
		char *mit_adr = new char[201];
		char *mit_com = new char[MAXBUF];
		char *mit_ath = new char[MAXBUF];
		char *mit_tek = new char[MAXBUF];
		char *mit_HAT020 = new char[101];
		char *mit_HAT030 = new char[101];
		char *mit_HAT040 = new char[101];
		char *mit_HAT050 = new char[101];
		char *mms_name = new char[511];
		char *mms_kikaku = new char[511];
		char *mms_tani = new char[101];
		char *mms_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_mitsumori rec;
				com->GetData(1, SQL_C_LONG, &rec.mit_id, sizeof(rec.mit_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mit_no, sizeof(rec.mit_no), 0);
				memset(mit_ait, 0, 201);
				com->GetData(3, SQL_C_CHAR, mit_ait, 201, 0);
				rec.mit_ait = (char *)mit_ait;
				com->GetData(4, SQL_C_TYPE_TIMESTAMP, &rec.mit_dat, sizeof(rec.mit_dat), 0);
				com->GetData(5, SQL_C_NUMERIC, &rec.mit_gak, sizeof(rec.mit_gak), 0);
				memset(mit_koj, 0, 201);
				com->GetData(6, SQL_C_CHAR, mit_koj, 201, 0);
				rec.mit_koj = (char *)mit_koj;
				memset(mit_adr, 0, 201);
				com->GetData(7, SQL_C_CHAR, mit_adr, 201, 0);
				rec.mit_adr = (char *)mit_adr;
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.mit_str, sizeof(rec.mit_str), 0);
				com->GetData(9, SQL_C_TYPE_TIMESTAMP, &rec.mit_end, sizeof(rec.mit_end), 0);
				memset(mit_com, 0, 1048576);
				com->GetData(10, SQL_C_CHAR, mit_com, 1048576, 0);
				rec.mit_com = (char *)mit_com;
				memset(mit_ath, 0, 1048576);
				com->GetData(11, SQL_C_CHAR, mit_ath, 1048576, 0);
				rec.mit_ath = (char *)mit_ath;
				memset(mit_tek, 0, 1048576);
				com->GetData(12, SQL_C_CHAR, mit_tek, 1048576, 0);
				rec.mit_tek = (char *)mit_tek;
				com->GetData(13, SQL_C_LONG, &rec.mit_HAT010, sizeof(rec.mit_HAT010), 0);
				memset(mit_HAT020, 0, 101);
				com->GetData(14, SQL_C_CHAR, mit_HAT020, 101, 0);
				rec.mit_HAT020 = (char *)mit_HAT020;
				memset(mit_HAT030, 0, 101);
				com->GetData(15, SQL_C_CHAR, mit_HAT030, 101, 0);
				rec.mit_HAT030 = (char *)mit_HAT030;
				memset(mit_HAT040, 0, 101);
				com->GetData(16, SQL_C_CHAR, mit_HAT040, 101, 0);
				rec.mit_HAT040 = (char *)mit_HAT040;
				memset(mit_HAT050, 0, 101);
				com->GetData(17, SQL_C_CHAR, mit_HAT050, 101, 0);
				rec.mit_HAT050 = (char *)mit_HAT050;
				com->GetData(18, SQL_C_LONG, &rec.mms_id, sizeof(rec.mms_id), 0);
				com->GetData(19, SQL_C_LONG, &rec.mms_kouji, sizeof(rec.mms_kouji), 0);
				com->GetData(20, SQL_C_LONG, &rec.mms_gyo, sizeof(rec.mms_gyo), 0);
				com->GetData(21, SQL_C_LONG, &rec.mms_syukei, sizeof(rec.mms_syukei), 0);
				memset(mms_name, 0, 511);
				com->GetData(22, SQL_C_CHAR, mms_name, 511, 0);
				rec.mms_name = (char *)mms_name;
				memset(mms_kikaku, 0, 511);
				com->GetData(23, SQL_C_CHAR, mms_kikaku, 511, 0);
				rec.mms_kikaku = (char *)mms_kikaku;
				com->GetData(24, SQL_C_DOUBLE, &rec.mms_suu, sizeof(rec.mms_suu), 0);
				memset(mms_tani, 0, 101);
				com->GetData(25, SQL_C_CHAR, mms_tani, 101, 0);
				rec.mms_tani = (char *)mms_tani;
				com->GetData(26, SQL_C_NUMERIC, &rec.mms_tanka, sizeof(rec.mms_tanka), 0);
				com->GetData(27, SQL_C_NUMERIC, &rec.mms_kingaku, sizeof(rec.mms_kingaku), 0);
				memset(mms_tekiyou, 0, 511);
				com->GetData(28, SQL_C_CHAR, mms_tekiyou, 511, 0);
				rec.mms_tekiyou = (char *)mms_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mit_ait;
		delete[] mit_koj;
		delete[] mit_adr;
		delete[] mit_com;
		delete[] mit_ath;
		delete[] mit_tek;
		delete[] mit_HAT020;
		delete[] mit_HAT030;
		delete[] mit_HAT040;
		delete[] mit_HAT050;
		delete[] mms_name;
		delete[] mms_kikaku;
		delete[] mms_tani;
		delete[] mms_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_mitsumori operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_mitsumori &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_mitsumori rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_mitsumori> m_Data;
};
class CR_v_nyusatsu : public COdbcRecord {
public:
	CR_v_nyusatsu() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_nyusatsu() {}

	void Initialize() {
		Kai01 = "";
		Kai02 = "";
		Kai03 = "";
		Kai04 = "";
		Kai05 = "";
		Kai06 = "";
		Kai07 = "";
		Kai08 = "";
		yo_工事コード = 0;
		yo_工事名 = "";
		yo_工事番号 = "";
		yo_工種ｺｰﾄﾞ = 0;
		yo_工事種別 = "";
		yo_発注元ｺｰﾄﾞ = 0;
		yo_発注元 = "";
		yo_契約金額 = 0.0;
		yo_追加金額 = 0.0;
		yo_合計金額 = 0.0;
		yo_実行予算 = 0.0;
		yo_実際原価 = 0.0;
		yo_現場代理人所見 = "";
		yo_営業所見 = "";
		yo_HAT030 = "";
		yo_HAT040 = "";
		yo_HAT050 = "";
		yo_sw = 0;
		yo_bikou1 = "";
		yo_bikou2 = "";
		yo_nyuno = "";
		yo_type = 0;
		yo_sya011 = 0;
		yo_sya012 = "";
	}

public:
	std::string Kai01;
	std::string Kai02;
	std::string Kai03;
	std::string Kai04;
	std::string Kai05;
	std::string Kai06;
	std::string Kai07;
	std::string Kai08;
	SQLINTEGER yo_工事コード;
	std::string yo_工事名;
	std::string yo_工事番号;
	SQLINTEGER yo_工種ｺｰﾄﾞ;
	std::string yo_工事種別;
	SQLINTEGER yo_発注元ｺｰﾄﾞ;
	std::string yo_発注元;
	SQLFLOAT yo_契約金額;
	SQLFLOAT yo_追加金額;
	SQLFLOAT yo_合計金額;
	SQLFLOAT yo_実行予算;
	SQLFLOAT yo_実際原価;
	TIMESTAMP_STRUCT yo_契約日付;
	TIMESTAMP_STRUCT yo_工期;
	TIMESTAMP_STRUCT yo_工期終了;
	TIMESTAMP_STRUCT yo_着工日付;
	TIMESTAMP_STRUCT yo_完成日付;
	TIMESTAMP_STRUCT yo_検査引渡日;
	std::string yo_現場代理人所見;
	std::string yo_営業所見;
	std::string yo_HAT030;
	std::string yo_HAT040;
	std::string yo_HAT050;
	TIMESTAMP_STRUCT yo_nyuudat;
	SQLCHAR yo_sw;
	std::string yo_bikou1;
	std::string yo_bikou2;
	std::string yo_nyuno;
	TIMESTAMP_STRUCT yo_sinsadat;
	TIMESTAMP_STRUCT yo_mitsumori;
	SQLINTEGER yo_type;
	SQLINTEGER yo_sya011;
	std::string yo_sya012;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->Kai01;
		} break;
		case 1: {
			ss << this->Kai02;
		} break;
		case 2: {
			ss << this->Kai03;
		} break;
		case 3: {
			ss << this->Kai04;
		} break;
		case 4: {
			ss << this->Kai05;
		} break;
		case 5: {
			ss << this->Kai06;
		} break;
		case 6: {
			ss << this->Kai07;
		} break;
		case 7: {
			ss << this->Kai08;
		} break;
		case 8: {
			ss << this->yo_工事コード;
		} break;
		case 9: {
			ss << this->yo_工事名;
		} break;
		case 10: {
			ss << this->yo_工事番号;
		} break;
		case 11: {
			ss << this->yo_工種ｺｰﾄﾞ;
		} break;
		case 12: {
			ss << this->yo_工事種別;
		} break;
		case 13: {
			ss << this->yo_発注元ｺｰﾄﾞ;
		} break;
		case 14: {
			ss << this->yo_発注元;
		} break;
		case 15: {
			ss << this->yo_契約金額;
		} break;
		case 16: {
			ss << this->yo_追加金額;
		} break;
		case 17: {
			ss << this->yo_合計金額;
		} break;
		case 18: {
			ss << this->yo_実行予算;
		} break;
		case 19: {
			ss << this->yo_実際原価;
		} break;
		case 20: {
			COdbcDateTime date(&this->yo_契約日付);
			ss << date.to_string();
		} break;
		case 21: {
			COdbcDateTime date(&this->yo_工期);
			ss << date.to_string();
		} break;
		case 22: {
			COdbcDateTime date(&this->yo_工期終了);
			ss << date.to_string();
		} break;
		case 23: {
			COdbcDateTime date(&this->yo_着工日付);
			ss << date.to_string();
		} break;
		case 24: {
			COdbcDateTime date(&this->yo_完成日付);
			ss << date.to_string();
		} break;
		case 25: {
			COdbcDateTime date(&this->yo_検査引渡日);
			ss << date.to_string();
		} break;
		case 26: {
			ss << this->yo_現場代理人所見;
		} break;
		case 27: {
			ss << this->yo_営業所見;
		} break;
		case 28: {
			ss << this->yo_HAT030;
		} break;
		case 29: {
			ss << this->yo_HAT040;
		} break;
		case 30: {
			ss << this->yo_HAT050;
		} break;
		case 31: {
			COdbcDateTime date(&this->yo_nyuudat);
			ss << date.to_string();
		} break;
		case 32: {
			ss << this->yo_sw;
		} break;
		case 33: {
			ss << this->yo_bikou1;
		} break;
		case 34: {
			ss << this->yo_bikou2;
		} break;
		case 35: {
			ss << this->yo_nyuno;
		} break;
		case 36: {
			COdbcDateTime date(&this->yo_sinsadat);
			ss << date.to_string();
		} break;
		case 37: {
			COdbcDateTime date(&this->yo_mitsumori);
			ss << date.to_string();
		} break;
		case 38: {
			ss << this->yo_type;
		} break;
		case 39: {
			ss << this->yo_sya011;
		} break;
		case 40: {
			ss << this->yo_sya012;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_nyusatsu : public COdbcTable {
public:
	CT_v_nyusatsu() : COdbcTable() {
		m_TableName = "v_nyusatsu";
		m_SqlSELECT = "SELECT "
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08,"
					  "yo_工事コード,"
					  "yo_工事名,"
					  "yo_工事番号,"
					  "yo_工種ｺｰﾄﾞ,"
					  "yo_工事種別,"
					  "yo_発注元ｺｰﾄﾞ,"
					  "yo_発注元,"
					  "yo_契約金額,"
					  "yo_追加金額,"
					  "yo_合計金額,"
					  "yo_実行予算,"
					  "yo_実際原価,"
					  "yo_契約日付,"
					  "yo_工期,"
					  "yo_工期終了,"
					  "yo_着工日付,"
					  "yo_完成日付,"
					  "yo_検査引渡日,"
					  "yo_現場代理人所見,"
					  "yo_営業所見,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012"
					  " FROM v_nyusatsu";
		m_SqlINSERT = "INSERT INTO v_nyusatsu ("
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08,"
					  "yo_工事コード,"
					  "yo_工事名,"
					  "yo_工事番号,"
					  "yo_工種ｺｰﾄﾞ,"
					  "yo_工事種別,"
					  "yo_発注元ｺｰﾄﾞ,"
					  "yo_発注元,"
					  "yo_契約金額,"
					  "yo_追加金額,"
					  "yo_合計金額,"
					  "yo_実行予算,"
					  "yo_実際原価,"
					  "yo_契約日付,"
					  "yo_工期,"
					  "yo_工期終了,"
					  "yo_着工日付,"
					  "yo_完成日付,"
					  "yo_検査引渡日,"
					  "yo_現場代理人所見,"
					  "yo_営業所見,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_nyusatsu SET "
					  "Kai01 = ?,"
					  "Kai02 = ?,"
					  "Kai03 = ?,"
					  "Kai04 = ?,"
					  "Kai05 = ?,"
					  "Kai06 = ?,"
					  "Kai07 = ?,"
					  "Kai08 = ?,"
					  "yo_工事コード = ?,"
					  "yo_工事名 = ?,"
					  "yo_工事番号 = ?,"
					  "yo_工種ｺｰﾄﾞ = ?,"
					  "yo_工事種別 = ?,"
					  "yo_発注元ｺｰﾄﾞ = ?,"
					  "yo_発注元 = ?,"
					  "yo_契約金額 = ?,"
					  "yo_追加金額 = ?,"
					  "yo_合計金額 = ?,"
					  "yo_実行予算 = ?,"
					  "yo_実際原価 = ?,"
					  "yo_契約日付 = ?,"
					  "yo_工期 = ?,"
					  "yo_工期終了 = ?,"
					  "yo_着工日付 = ?,"
					  "yo_完成日付 = ?,"
					  "yo_検査引渡日 = ?,"
					  "yo_現場代理人所見 = ?,"
					  "yo_営業所見 = ?,"
					  "yo_HAT030 = ?,"
					  "yo_HAT040 = ?,"
					  "yo_HAT050 = ?,"
					  "yo_nyuudat = ?,"
					  "yo_sw = ?,"
					  "yo_bikou1 = ?,"
					  "yo_bikou2 = ?,"
					  "yo_nyuno = ?,"
					  "yo_sinsadat = ?,"
					  "yo_mitsumori = ?,"
					  "yo_type = ?,"
					  "yo_sya011 = ?,"
					  "yo_sya012 = ?";

		m_SqlDELETE = "DELETE v_nyusatsu ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "Kai01", "1", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "Kai02", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "Kai03", "3", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "Kai04", "4", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "Kai05", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "Kai06", "6", "", "YES", "nvarchar", "30", "60", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "Kai07", "7", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "Kai08", "8", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_工事コード", "9", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_工事名", "10", "", "NO", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_工事番号", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_工種ｺｰﾄﾞ", "12", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_工事種別", "13", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_発注元ｺｰﾄﾞ", "14", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_発注元", "15", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_契約金額", "16", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_追加金額", "17", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_合計金額", "18", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_実行予算", "19", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_実際原価", "20", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_契約日付", "21", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_工期", "22", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_工期終了", "23", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_着工日付", "24", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_完成日付", "25", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_検査引渡日", "26", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_現場代理人所見", "27", "", "YES", "ntext", "1073741823",
					 "2147483646", "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_営業所見", "28", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_HAT030", "29", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_HAT040", "30", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_HAT050", "31", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_nyuudat", "32", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_sw", "33", "", "NO", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_bikou1", "34", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_bikou2", "35", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_nyuno", "36", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_sinsadat", "37", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_mitsumori", "38", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_type", "39", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_sya011", "40", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_nyusatsu", "yo_sya012", "41", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_nyusatsu() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *Kai01 = new char[101];
		char *Kai02 = new char[101];
		char *Kai03 = new char[101];
		char *Kai04 = new char[41];
		char *Kai05 = new char[101];
		char *Kai06 = new char[61];
		char *Kai07 = new char[41];
		char *Kai08 = new char[41];
		char *yo_工事名 = new char[511];
		char *yo_工事番号 = new char[511];
		char *yo_工事種別 = new char[101];
		char *yo_発注元 = new char[511];
		char *yo_現場代理人所見 = new char[MAXBUF];
		char *yo_営業所見 = new char[MAXBUF];
		char *yo_HAT030 = new char[101];
		char *yo_HAT040 = new char[101];
		char *yo_HAT050 = new char[101];
		char *yo_bikou1 = new char[511];
		char *yo_bikou2 = new char[511];
		char *yo_nyuno = new char[101];
		char *yo_sya012 = new char[81];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_nyusatsu rec;
				memset(Kai01, 0, 101);
				com->GetData(1, SQL_C_CHAR, Kai01, 101, 0);
				rec.Kai01 = (char *)Kai01;
				memset(Kai02, 0, 101);
				com->GetData(2, SQL_C_CHAR, Kai02, 101, 0);
				rec.Kai02 = (char *)Kai02;
				memset(Kai03, 0, 101);
				com->GetData(3, SQL_C_CHAR, Kai03, 101, 0);
				rec.Kai03 = (char *)Kai03;
				memset(Kai04, 0, 41);
				com->GetData(4, SQL_C_CHAR, Kai04, 41, 0);
				rec.Kai04 = (char *)Kai04;
				memset(Kai05, 0, 101);
				com->GetData(5, SQL_C_CHAR, Kai05, 101, 0);
				rec.Kai05 = (char *)Kai05;
				memset(Kai06, 0, 61);
				com->GetData(6, SQL_C_CHAR, Kai06, 61, 0);
				rec.Kai06 = (char *)Kai06;
				memset(Kai07, 0, 41);
				com->GetData(7, SQL_C_CHAR, Kai07, 41, 0);
				rec.Kai07 = (char *)Kai07;
				memset(Kai08, 0, 41);
				com->GetData(8, SQL_C_CHAR, Kai08, 41, 0);
				rec.Kai08 = (char *)Kai08;
				com->GetData(9, SQL_C_LONG, &rec.yo_工事コード, sizeof(rec.yo_工事コード), 0);
				memset(yo_工事名, 0, 511);
				com->GetData(10, SQL_C_CHAR, yo_工事名, 511, 0);
				rec.yo_工事名 = (char *)yo_工事名;
				memset(yo_工事番号, 0, 511);
				com->GetData(11, SQL_C_CHAR, yo_工事番号, 511, 0);
				rec.yo_工事番号 = (char *)yo_工事番号;
				com->GetData(12, SQL_C_LONG, &rec.yo_工種ｺｰﾄﾞ, sizeof(rec.yo_工種ｺｰﾄﾞ), 0);
				memset(yo_工事種別, 0, 101);
				com->GetData(13, SQL_C_CHAR, yo_工事種別, 101, 0);
				rec.yo_工事種別 = (char *)yo_工事種別;
				com->GetData(14, SQL_C_LONG, &rec.yo_発注元ｺｰﾄﾞ, sizeof(rec.yo_発注元ｺｰﾄﾞ), 0);
				memset(yo_発注元, 0, 511);
				com->GetData(15, SQL_C_CHAR, yo_発注元, 511, 0);
				rec.yo_発注元 = (char *)yo_発注元;
				com->GetData(16, SQL_C_DOUBLE, &rec.yo_契約金額, sizeof(rec.yo_契約金額), 0);
				com->GetData(17, SQL_C_DOUBLE, &rec.yo_追加金額, sizeof(rec.yo_追加金額), 0);
				com->GetData(18, SQL_C_DOUBLE, &rec.yo_合計金額, sizeof(rec.yo_合計金額), 0);
				com->GetData(19, SQL_C_DOUBLE, &rec.yo_実行予算, sizeof(rec.yo_実行予算), 0);
				com->GetData(20, SQL_C_DOUBLE, &rec.yo_実際原価, sizeof(rec.yo_実際原価), 0);
				com->GetData(21, SQL_C_TYPE_TIMESTAMP, &rec.yo_契約日付, sizeof(rec.yo_契約日付), 0);
				com->GetData(22, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期, sizeof(rec.yo_工期), 0);
				com->GetData(23, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期終了, sizeof(rec.yo_工期終了), 0);
				com->GetData(24, SQL_C_TYPE_TIMESTAMP, &rec.yo_着工日付, sizeof(rec.yo_着工日付), 0);
				com->GetData(25, SQL_C_TYPE_TIMESTAMP, &rec.yo_完成日付, sizeof(rec.yo_完成日付), 0);
				com->GetData(26, SQL_C_TYPE_TIMESTAMP, &rec.yo_検査引渡日, sizeof(rec.yo_検査引渡日), 0);
				memset(yo_現場代理人所見, 0, 1048576);
				com->GetData(27, SQL_C_CHAR, yo_現場代理人所見, 1048576, 0);
				rec.yo_現場代理人所見 = (char *)yo_現場代理人所見;
				memset(yo_営業所見, 0, 1048576);
				com->GetData(28, SQL_C_CHAR, yo_営業所見, 1048576, 0);
				rec.yo_営業所見 = (char *)yo_営業所見;
				memset(yo_HAT030, 0, 101);
				com->GetData(29, SQL_C_CHAR, yo_HAT030, 101, 0);
				rec.yo_HAT030 = (char *)yo_HAT030;
				memset(yo_HAT040, 0, 101);
				com->GetData(30, SQL_C_CHAR, yo_HAT040, 101, 0);
				rec.yo_HAT040 = (char *)yo_HAT040;
				memset(yo_HAT050, 0, 101);
				com->GetData(31, SQL_C_CHAR, yo_HAT050, 101, 0);
				rec.yo_HAT050 = (char *)yo_HAT050;
				com->GetData(32, SQL_C_TYPE_TIMESTAMP, &rec.yo_nyuudat, sizeof(rec.yo_nyuudat), 0);
				com->GetData(33, SQL_C_CHAR, &rec.yo_sw, sizeof(rec.yo_sw), 0);
				memset(yo_bikou1, 0, 511);
				com->GetData(34, SQL_C_CHAR, yo_bikou1, 511, 0);
				rec.yo_bikou1 = (char *)yo_bikou1;
				memset(yo_bikou2, 0, 511);
				com->GetData(35, SQL_C_CHAR, yo_bikou2, 511, 0);
				rec.yo_bikou2 = (char *)yo_bikou2;
				memset(yo_nyuno, 0, 101);
				com->GetData(36, SQL_C_CHAR, yo_nyuno, 101, 0);
				rec.yo_nyuno = (char *)yo_nyuno;
				com->GetData(37, SQL_C_TYPE_TIMESTAMP, &rec.yo_sinsadat, sizeof(rec.yo_sinsadat), 0);
				com->GetData(38, SQL_C_TYPE_TIMESTAMP, &rec.yo_mitsumori, sizeof(rec.yo_mitsumori), 0);
				com->GetData(39, SQL_C_LONG, &rec.yo_type, sizeof(rec.yo_type), 0);
				com->GetData(40, SQL_C_LONG, &rec.yo_sya011, sizeof(rec.yo_sya011), 0);
				memset(yo_sya012, 0, 81);
				com->GetData(41, SQL_C_CHAR, yo_sya012, 81, 0);
				rec.yo_sya012 = (char *)yo_sya012;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] Kai01;
		delete[] Kai02;
		delete[] Kai03;
		delete[] Kai04;
		delete[] Kai05;
		delete[] Kai06;
		delete[] Kai07;
		delete[] Kai08;
		delete[] yo_工事名;
		delete[] yo_工事番号;
		delete[] yo_工事種別;
		delete[] yo_発注元;
		delete[] yo_現場代理人所見;
		delete[] yo_営業所見;
		delete[] yo_HAT030;
		delete[] yo_HAT040;
		delete[] yo_HAT050;
		delete[] yo_bikou1;
		delete[] yo_bikou2;
		delete[] yo_nyuno;
		delete[] yo_sya012;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_nyusatsu operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_nyusatsu &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_nyusatsu rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_nyusatsu> m_Data;
};
class CR_t_kanseikouji : public COdbcRecord {
public:
	CR_t_kanseikouji() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kanseikouji() {}

	void Initialize() {
		kk_id = 0;
		kk_hat01 = "";
		kk_name = "";
		kk_komi = 0.0;
		kk_zei = 0.0;
		kk_nuki = 0.0;
		kk_dairi = "";
		kk_motcd = 0;
		kk_motouke = "";
		kk_sityouson = "";
		kk_koujisyurui = 0;
		kk_koujisyuruimei = "";
	}

public:
	SQLINTEGER kk_id;
	std::string kk_hat01;
	std::string kk_name;
	TIMESTAMP_STRUCT kk_kaisi;
	TIMESTAMP_STRUCT kk_owari;
	SQLFLOAT kk_komi;
	SQLFLOAT kk_zei;
	SQLFLOAT kk_nuki;
	std::string kk_dairi;
	SQLINTEGER kk_motcd;
	std::string kk_motouke;
	std::string kk_sityouson;
	SQLINTEGER kk_koujisyurui;
	std::string kk_koujisyuruimei;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kk_id;
		} break;
		case 1: {
			ss << this->kk_hat01;
		} break;
		case 2: {
			ss << this->kk_name;
		} break;
		case 3: {
			COdbcDateTime date(&this->kk_kaisi);
			ss << date.to_string();
		} break;
		case 4: {
			COdbcDateTime date(&this->kk_owari);
			ss << date.to_string();
		} break;
		case 5: {
			ss << this->kk_komi;
		} break;
		case 6: {
			ss << this->kk_zei;
		} break;
		case 7: {
			ss << this->kk_nuki;
		} break;
		case 8: {
			ss << this->kk_dairi;
		} break;
		case 9: {
			ss << this->kk_motcd;
		} break;
		case 10: {
			ss << this->kk_motouke;
		} break;
		case 11: {
			ss << this->kk_sityouson;
		} break;
		case 12: {
			ss << this->kk_koujisyurui;
		} break;
		case 13: {
			ss << this->kk_koujisyuruimei;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kanseikouji : public COdbcTable {
public:
	CT_t_kanseikouji() : COdbcTable() {
		m_TableName = "t_kanseikouji";
		m_SqlSELECT = "SELECT "
					  "kk_id,"
					  "kk_hat01,"
					  "kk_name,"
					  "kk_kaisi,"
					  "kk_owari,"
					  "kk_komi,"
					  "kk_zei,"
					  "kk_nuki,"
					  "kk_dairi,"
					  "kk_motcd,"
					  "kk_motouke,"
					  "kk_sityouson,"
					  "kk_koujisyurui,"
					  "kk_koujisyuruimei"
					  " FROM t_kanseikouji";
		m_SqlINSERT = "INSERT INTO t_kanseikouji ("
					  "kk_hat01,"
					  "kk_name,"
					  "kk_kaisi,"
					  "kk_owari,"
					  "kk_komi,"
					  "kk_zei,"
					  "kk_nuki,"
					  "kk_dairi,"
					  "kk_motcd,"
					  "kk_motouke,"
					  "kk_sityouson,"
					  "kk_koujisyurui,"
					  "kk_koujisyuruimei)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_kanseikouji SET "
					  "kk_hat01 = ?,"
					  "kk_name = ?,"
					  "kk_kaisi = ?,"
					  "kk_owari = ?,"
					  "kk_komi = ?,"
					  "kk_zei = ?,"
					  "kk_nuki = ?,"
					  "kk_dairi = ?,"
					  "kk_motcd = ?,"
					  "kk_motouke = ?,"
					  "kk_sityouson = ?,"
					  "kk_koujisyurui = ?,"
					  "kk_koujisyuruimei = ?";

		m_SqlDELETE = "DELETE t_kanseikouji ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 1, _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_hat01", "2", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_name", "3", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_kaisi", "4", "", "YES", "datetime", "0", "0", "0", "0", "3",
					 "", "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_owari", "5", "", "YES", "datetime", "0", "0", "0", "0", "3",
					 "", "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_komi", "6", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_zei", "7", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_nuki", "8", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_dairi", "9", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_motcd", "10", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_motouke", "11", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_sityouson", "12", "", "YES", "nvarchar", "50", "100", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_koujisyurui", "13", "", "YES", "int", "0", "0", "10", "0",
					 "0", "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kanseikouji", "kk_koujisyuruimei", "14", "", "YES", "nvarchar", "50", "100",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_kanseikouji", "kk_id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_kanseikouji() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *kk_hat01 = new char[511];
		char *kk_name = new char[511];
		char *kk_dairi = new char[511];
		char *kk_motouke = new char[101];
		char *kk_sityouson = new char[101];
		char *kk_koujisyuruimei = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kanseikouji rec;
				com->GetData(1, SQL_C_LONG, &rec.kk_id, sizeof(rec.kk_id), 0);
				memset(kk_hat01, 0, 511);
				com->GetData(2, SQL_C_CHAR, kk_hat01, 511, 0);
				rec.kk_hat01 = (char *)kk_hat01;
				memset(kk_name, 0, 511);
				com->GetData(3, SQL_C_CHAR, kk_name, 511, 0);
				rec.kk_name = (char *)kk_name;
				com->GetData(4, SQL_C_TYPE_TIMESTAMP, &rec.kk_kaisi, sizeof(rec.kk_kaisi), 0);
				com->GetData(5, SQL_C_TYPE_TIMESTAMP, &rec.kk_owari, sizeof(rec.kk_owari), 0);
				com->GetData(6, SQL_C_DOUBLE, &rec.kk_komi, sizeof(rec.kk_komi), 0);
				com->GetData(7, SQL_C_DOUBLE, &rec.kk_zei, sizeof(rec.kk_zei), 0);
				com->GetData(8, SQL_C_DOUBLE, &rec.kk_nuki, sizeof(rec.kk_nuki), 0);
				memset(kk_dairi, 0, 511);
				com->GetData(9, SQL_C_CHAR, kk_dairi, 511, 0);
				rec.kk_dairi = (char *)kk_dairi;
				com->GetData(10, SQL_C_LONG, &rec.kk_motcd, sizeof(rec.kk_motcd), 0);
				memset(kk_motouke, 0, 101);
				com->GetData(11, SQL_C_CHAR, kk_motouke, 101, 0);
				rec.kk_motouke = (char *)kk_motouke;
				memset(kk_sityouson, 0, 101);
				com->GetData(12, SQL_C_CHAR, kk_sityouson, 101, 0);
				rec.kk_sityouson = (char *)kk_sityouson;
				com->GetData(13, SQL_C_LONG, &rec.kk_koujisyurui, sizeof(rec.kk_koujisyurui), 0);
				memset(kk_koujisyuruimei, 0, 101);
				com->GetData(14, SQL_C_CHAR, kk_koujisyuruimei, 101, 0);
				rec.kk_koujisyuruimei = (char *)kk_koujisyuruimei;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] kk_hat01;
		delete[] kk_name;
		delete[] kk_dairi;
		delete[] kk_motouke;
		delete[] kk_sityouson;
		delete[] kk_koujisyuruimei;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kanseikouji operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kanseikouji &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kanseikouji rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kanseikouji> m_Data;
};
class CR_v_recycle : public COdbcRecord {
public:
	CR_v_recycle() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_recycle() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		km_syoken = "";
		km_zai00 = 0.0;
		km_zai01 = 0.0;
		km_zai02 = 0.0;
		km_zai03 = 0.0;
		km_zai04 = 0.0;
		km_rou01 = 0.0;
		km_rou02 = 0.0;
		km_rou03 = 0.0;
		km_rou04 = 0.0;
		km_gai01 = 0.0;
		km_gai02 = 0.0;
		km_gai03 = 0.0;
		km_gai04 = 0.0;
		km_kik01 = 0.0;
		km_kik02 = 0.0;
		km_kik03 = 0.0;
		km_kik04 = 0.0;
		km_kas01 = 0.0;
		km_kas02 = 0.0;
		km_kas03 = 0.0;
		km_kas04 = 0.0;
		km_kyuyo01 = 0.0;
		km_kyuyo02 = 0.0;
		km_kyuyo03 = 0.0;
		km_kyuyo04 = 0.0;
		km_tyo01 = 0.0;
		km_tyo02 = 0.0;
		km_tyo03 = 0.0;
		km_tyo04 = 0.0;
		km_kan01 = 0.0;
		km_kan02 = 0.0;
		km_gou01 = 0.0;
		km_gou02 = 0.0;
		km_gou03 = 0.0;
		km_gou04 = 0.0;
		km_yos01 = 0.0;
		km_yos02 = 0.0;
		km_yos03 = 0.0;
		km_yos04 = 0.0;
		km_ipn01 = 0.0;
		km_ipn02 = 0.0;
		km_yosankei = 0.0;
		km_zisekikei = 0.0;
		km_rie01 = 0.0;
		km_rie02 = 0.0;
		km_rie03 = 0.0;
		km_rie04 = 0.0;
		km_hok01 = 0.0;
		km_hok02 = 0.0;
		km_nen = 0;
		km_tuk = 0;
		km_sya011 = 0;
		km_sya012 = "";
		km_sya021 = 0;
		km_sya022 = "";
		km_sya031 = 0;
		km_sya032 = "";
		km_nendo = 0;
		km_kei01 = 0.0;
		km_kei02 = 0.0;
		km_man01 = 0.0;
		km_man02 = 0.0;
		km_man03 = 0.0;
		km_man04 = 0.0;
		km_man05 = 0.0;
		km_wom01 = 0.0;
		km_wom02 = 0.0;
		km_wom03 = 0.0;
		km_wom04 = 0.0;
		km_wom05 = 0.0;
		km_syoteate = 0.0;
		km_tingin = 0.0;
		km_syaho01 = 0.0;
		km_koyou01 = 0.0;
		km_kyosai01 = 0.0;
		km_fukuri01 = 0.0;
		km_kyu011 = 0.0;
		km_kyu012 = 0.0;
		km_kyu013 = 0.0;
		km_kyu021 = 0.0;
		km_kyu022 = 0.0;
		km_kyu023 = 0.0;
		km_kyu031 = 0.0;
		km_kyu032 = 0.0;
		km_kyu033 = 0.0;
		km_kyu014 = 0.0;
		km_kyu015 = 0.0;
		km_kyu016 = 0.0;
		km_kyu024 = 0.0;
		km_kyu025 = 0.0;
		km_kyu026 = 0.0;
		km_kyu034 = 0.0;
		km_kyu035 = 0.0;
		km_kyu036 = 0.0;
		km_kyuyokei = 0.0;
		km_syaho02 = 0.0;
		km_koyou02 = 0.0;
		km_kyosai02 = 0.0;
		km_fukuri02 = 0.0;
		km_kyuyosou = 0.0;
		km_rousaihoken = 0.0;
		km_kks01 = 0.0;
		km_kks02 = 0.0;
		km_kks03 = 0.0;
		km_kks04 = 0.0;
		km_chidai = 0.0;
		km_kukakin = 0.0;
		km_tusin = 0.0;
		km_hokenryo = 0.0;
		km_zappi = 0.0;
		km_sonota = 0.0;
		km_corins = 0.0;
		km_kaigihi = 0.0;
		km_kaihi = 0.0;
		km_anzen = 0.0;
		km_kousai = 0.0;
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_sw = 0;
		km_bikou1 = "";
		km_bikou2 = "";
		km_nyuno = "";
		km_syouhizei = 0.0;
		km_ritsu = 0.0;
		km_ukeoi = 0;
		recycleID = 0;
		rc_class1 = 0;
		rc_class2 = 0;
		rc_classname = "";
		rc_spec_con = 0;
		rc_spec_2 = 0;
		rc_spec_as = 0;
		rc_spec_wood = 0;
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	TIMESTAMP_STRUCT km_keidate;
	TIMESTAMP_STRUCT km_kaisi;
	TIMESTAMP_STRUCT km_owari;
	TIMESTAMP_STRUCT km_tyakou;
	TIMESTAMP_STRUCT km_kansei;
	TIMESTAMP_STRUCT km_kensa;
	std::string km_syoken;
	SQLFLOAT km_zai00;
	SQLFLOAT km_zai01;
	SQLFLOAT km_zai02;
	SQLFLOAT km_zai03;
	SQLFLOAT km_zai04;
	SQLFLOAT km_rou01;
	SQLFLOAT km_rou02;
	SQLFLOAT km_rou03;
	SQLFLOAT km_rou04;
	SQLFLOAT km_gai01;
	SQLFLOAT km_gai02;
	SQLFLOAT km_gai03;
	SQLFLOAT km_gai04;
	SQLFLOAT km_kik01;
	SQLFLOAT km_kik02;
	SQLFLOAT km_kik03;
	SQLFLOAT km_kik04;
	SQLFLOAT km_kas01;
	SQLFLOAT km_kas02;
	SQLFLOAT km_kas03;
	SQLFLOAT km_kas04;
	SQLFLOAT km_kyuyo01;
	SQLFLOAT km_kyuyo02;
	SQLFLOAT km_kyuyo03;
	SQLFLOAT km_kyuyo04;
	SQLFLOAT km_tyo01;
	SQLFLOAT km_tyo02;
	SQLFLOAT km_tyo03;
	SQLFLOAT km_tyo04;
	SQLFLOAT km_kan01;
	SQLFLOAT km_kan02;
	SQLFLOAT km_gou01;
	SQLFLOAT km_gou02;
	SQLFLOAT km_gou03;
	SQLFLOAT km_gou04;
	SQLFLOAT km_yos01;
	SQLFLOAT km_yos02;
	SQLFLOAT km_yos03;
	SQLFLOAT km_yos04;
	SQLFLOAT km_ipn01;
	SQLFLOAT km_ipn02;
	SQLFLOAT km_yosankei;
	SQLFLOAT km_zisekikei;
	SQLFLOAT km_rie01;
	SQLFLOAT km_rie02;
	SQLFLOAT km_rie03;
	SQLFLOAT km_rie04;
	SQLFLOAT km_hok01;
	SQLFLOAT km_hok02;
	SQLSMALLINT km_nen;
	SQLSMALLINT km_tuk;
	SQLINTEGER km_sya011;
	std::string km_sya012;
	SQLINTEGER km_sya021;
	std::string km_sya022;
	SQLINTEGER km_sya031;
	std::string km_sya032;
	SQLSMALLINT km_nendo;
	SQLFLOAT km_kei01;
	SQLFLOAT km_kei02;
	SQLFLOAT km_man01;
	SQLFLOAT km_man02;
	SQLFLOAT km_man03;
	SQLFLOAT km_man04;
	SQLFLOAT km_man05;
	SQLFLOAT km_wom01;
	SQLFLOAT km_wom02;
	SQLFLOAT km_wom03;
	SQLFLOAT km_wom04;
	SQLFLOAT km_wom05;
	SQLFLOAT km_syoteate;
	SQLFLOAT km_tingin;
	SQLFLOAT km_syaho01;
	SQLFLOAT km_koyou01;
	SQLFLOAT km_kyosai01;
	SQLFLOAT km_fukuri01;
	SQLFLOAT km_kyu011;
	SQLFLOAT km_kyu012;
	SQLFLOAT km_kyu013;
	SQLFLOAT km_kyu021;
	SQLFLOAT km_kyu022;
	SQLFLOAT km_kyu023;
	SQLFLOAT km_kyu031;
	SQLFLOAT km_kyu032;
	SQLFLOAT km_kyu033;
	SQLFLOAT km_kyu014;
	SQLFLOAT km_kyu015;
	SQLFLOAT km_kyu016;
	SQLFLOAT km_kyu024;
	SQLFLOAT km_kyu025;
	SQLFLOAT km_kyu026;
	SQLFLOAT km_kyu034;
	SQLFLOAT km_kyu035;
	SQLFLOAT km_kyu036;
	SQLFLOAT km_kyuyokei;
	SQLFLOAT km_syaho02;
	SQLFLOAT km_koyou02;
	SQLFLOAT km_kyosai02;
	SQLFLOAT km_fukuri02;
	SQLFLOAT km_kyuyosou;
	SQLFLOAT km_rousaihoken;
	SQLFLOAT km_kks01;
	SQLFLOAT km_kks02;
	SQLFLOAT km_kks03;
	SQLFLOAT km_kks04;
	SQLFLOAT km_chidai;
	SQLFLOAT km_kukakin;
	SQLFLOAT km_tusin;
	SQLFLOAT km_hokenryo;
	SQLFLOAT km_zappi;
	SQLFLOAT km_sonota;
	SQLFLOAT km_corins;
	SQLFLOAT km_kaigihi;
	SQLFLOAT km_kaihi;
	SQLFLOAT km_anzen;
	SQLFLOAT km_kousai;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_bikou1;
	std::string km_bikou2;
	std::string km_nyuno;
	SQLFLOAT km_syouhizei;
	TIMESTAMP_STRUCT km_mitsumori;
	SQLFLOAT km_ritsu;
	SQLINTEGER km_ukeoi;
	SQLINTEGER recycleID;
	TIMESTAMP_STRUCT rc_date;
	SQLINTEGER rc_class1;
	SQLINTEGER rc_class2;
	std::string rc_classname;
	SQLCHAR rc_spec_con;
	SQLCHAR rc_spec_2;
	SQLCHAR rc_spec_as;
	SQLCHAR rc_spec_wood;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_keiyaku;
		} break;
		case 8: {
			ss << this->km_tsuika;
		} break;
		case 9: {
			ss << this->km_goukei;
		} break;
		case 10: {
			ss << this->km_yosan;
		} break;
		case 11: {
			ss << this->km_genka;
		} break;
		case 12: {
			COdbcDateTime date(&this->km_keidate);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->km_kaisi);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->km_owari);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->km_tyakou);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->km_kansei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->km_kensa);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->km_syoken;
		} break;
		case 19: {
			ss << this->km_zai00;
		} break;
		case 20: {
			ss << this->km_zai01;
		} break;
		case 21: {
			ss << this->km_zai02;
		} break;
		case 22: {
			ss << this->km_zai03;
		} break;
		case 23: {
			ss << this->km_zai04;
		} break;
		case 24: {
			ss << this->km_rou01;
		} break;
		case 25: {
			ss << this->km_rou02;
		} break;
		case 26: {
			ss << this->km_rou03;
		} break;
		case 27: {
			ss << this->km_rou04;
		} break;
		case 28: {
			ss << this->km_gai01;
		} break;
		case 29: {
			ss << this->km_gai02;
		} break;
		case 30: {
			ss << this->km_gai03;
		} break;
		case 31: {
			ss << this->km_gai04;
		} break;
		case 32: {
			ss << this->km_kik01;
		} break;
		case 33: {
			ss << this->km_kik02;
		} break;
		case 34: {
			ss << this->km_kik03;
		} break;
		case 35: {
			ss << this->km_kik04;
		} break;
		case 36: {
			ss << this->km_kas01;
		} break;
		case 37: {
			ss << this->km_kas02;
		} break;
		case 38: {
			ss << this->km_kas03;
		} break;
		case 39: {
			ss << this->km_kas04;
		} break;
		case 40: {
			ss << this->km_kyuyo01;
		} break;
		case 41: {
			ss << this->km_kyuyo02;
		} break;
		case 42: {
			ss << this->km_kyuyo03;
		} break;
		case 43: {
			ss << this->km_kyuyo04;
		} break;
		case 44: {
			ss << this->km_tyo01;
		} break;
		case 45: {
			ss << this->km_tyo02;
		} break;
		case 46: {
			ss << this->km_tyo03;
		} break;
		case 47: {
			ss << this->km_tyo04;
		} break;
		case 48: {
			ss << this->km_kan01;
		} break;
		case 49: {
			ss << this->km_kan02;
		} break;
		case 50: {
			ss << this->km_gou01;
		} break;
		case 51: {
			ss << this->km_gou02;
		} break;
		case 52: {
			ss << this->km_gou03;
		} break;
		case 53: {
			ss << this->km_gou04;
		} break;
		case 54: {
			ss << this->km_yos01;
		} break;
		case 55: {
			ss << this->km_yos02;
		} break;
		case 56: {
			ss << this->km_yos03;
		} break;
		case 57: {
			ss << this->km_yos04;
		} break;
		case 58: {
			ss << this->km_ipn01;
		} break;
		case 59: {
			ss << this->km_ipn02;
		} break;
		case 60: {
			ss << this->km_yosankei;
		} break;
		case 61: {
			ss << this->km_zisekikei;
		} break;
		case 62: {
			ss << this->km_rie01;
		} break;
		case 63: {
			ss << this->km_rie02;
		} break;
		case 64: {
			ss << this->km_rie03;
		} break;
		case 65: {
			ss << this->km_rie04;
		} break;
		case 66: {
			ss << this->km_hok01;
		} break;
		case 67: {
			ss << this->km_hok02;
		} break;
		case 68: {
			ss << this->km_nen;
		} break;
		case 69: {
			ss << this->km_tuk;
		} break;
		case 70: {
			ss << this->km_sya011;
		} break;
		case 71: {
			ss << this->km_sya012;
		} break;
		case 72: {
			ss << this->km_sya021;
		} break;
		case 73: {
			ss << this->km_sya022;
		} break;
		case 74: {
			ss << this->km_sya031;
		} break;
		case 75: {
			ss << this->km_sya032;
		} break;
		case 76: {
			ss << this->km_nendo;
		} break;
		case 77: {
			ss << this->km_kei01;
		} break;
		case 78: {
			ss << this->km_kei02;
		} break;
		case 79: {
			ss << this->km_man01;
		} break;
		case 80: {
			ss << this->km_man02;
		} break;
		case 81: {
			ss << this->km_man03;
		} break;
		case 82: {
			ss << this->km_man04;
		} break;
		case 83: {
			ss << this->km_man05;
		} break;
		case 84: {
			ss << this->km_wom01;
		} break;
		case 85: {
			ss << this->km_wom02;
		} break;
		case 86: {
			ss << this->km_wom03;
		} break;
		case 87: {
			ss << this->km_wom04;
		} break;
		case 88: {
			ss << this->km_wom05;
		} break;
		case 89: {
			ss << this->km_syoteate;
		} break;
		case 90: {
			ss << this->km_tingin;
		} break;
		case 91: {
			ss << this->km_syaho01;
		} break;
		case 92: {
			ss << this->km_koyou01;
		} break;
		case 93: {
			ss << this->km_kyosai01;
		} break;
		case 94: {
			ss << this->km_fukuri01;
		} break;
		case 95: {
			ss << this->km_kyu011;
		} break;
		case 96: {
			ss << this->km_kyu012;
		} break;
		case 97: {
			ss << this->km_kyu013;
		} break;
		case 98: {
			ss << this->km_kyu021;
		} break;
		case 99: {
			ss << this->km_kyu022;
		} break;
		case 100: {
			ss << this->km_kyu023;
		} break;
		case 101: {
			ss << this->km_kyu031;
		} break;
		case 102: {
			ss << this->km_kyu032;
		} break;
		case 103: {
			ss << this->km_kyu033;
		} break;
		case 104: {
			ss << this->km_kyu014;
		} break;
		case 105: {
			ss << this->km_kyu015;
		} break;
		case 106: {
			ss << this->km_kyu016;
		} break;
		case 107: {
			ss << this->km_kyu024;
		} break;
		case 108: {
			ss << this->km_kyu025;
		} break;
		case 109: {
			ss << this->km_kyu026;
		} break;
		case 110: {
			ss << this->km_kyu034;
		} break;
		case 111: {
			ss << this->km_kyu035;
		} break;
		case 112: {
			ss << this->km_kyu036;
		} break;
		case 113: {
			ss << this->km_kyuyokei;
		} break;
		case 114: {
			ss << this->km_syaho02;
		} break;
		case 115: {
			ss << this->km_koyou02;
		} break;
		case 116: {
			ss << this->km_kyosai02;
		} break;
		case 117: {
			ss << this->km_fukuri02;
		} break;
		case 118: {
			ss << this->km_kyuyosou;
		} break;
		case 119: {
			ss << this->km_rousaihoken;
		} break;
		case 120: {
			ss << this->km_kks01;
		} break;
		case 121: {
			ss << this->km_kks02;
		} break;
		case 122: {
			ss << this->km_kks03;
		} break;
		case 123: {
			ss << this->km_kks04;
		} break;
		case 124: {
			ss << this->km_chidai;
		} break;
		case 125: {
			ss << this->km_kukakin;
		} break;
		case 126: {
			ss << this->km_tusin;
		} break;
		case 127: {
			ss << this->km_hokenryo;
		} break;
		case 128: {
			ss << this->km_zappi;
		} break;
		case 129: {
			ss << this->km_sonota;
		} break;
		case 130: {
			ss << this->km_corins;
		} break;
		case 131: {
			ss << this->km_kaigihi;
		} break;
		case 132: {
			ss << this->km_kaihi;
		} break;
		case 133: {
			ss << this->km_anzen;
		} break;
		case 134: {
			ss << this->km_kousai;
		} break;
		case 135: {
			ss << this->km_hat030;
		} break;
		case 136: {
			ss << this->km_hat040;
		} break;
		case 137: {
			ss << this->km_hat050;
		} break;
		case 138: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 139: {
			ss << this->km_sw;
		} break;
		case 140: {
			ss << this->km_bikou1;
		} break;
		case 141: {
			ss << this->km_bikou2;
		} break;
		case 142: {
			ss << this->km_nyuno;
		} break;
		case 143: {
			ss << this->km_syouhizei;
		} break;
		case 144: {
			COdbcDateTime date(&this->km_mitsumori);
			ss << date.to_string();
		} break;
		case 145: {
			ss << this->km_ritsu;
		} break;
		case 146: {
			ss << this->km_ukeoi;
		} break;
		case 147: {
			ss << this->recycleID;
		} break;
		case 148: {
			COdbcDateTime date(&this->rc_date);
			ss << date.to_string();
		} break;
		case 149: {
			ss << this->rc_class1;
		} break;
		case 150: {
			ss << this->rc_class2;
		} break;
		case 151: {
			ss << this->rc_classname;
		} break;
		case 152: {
			ss << this->rc_spec_con;
		} break;
		case 153: {
			ss << this->rc_spec_2;
		} break;
		case 154: {
			ss << this->rc_spec_as;
		} break;
		case 155: {
			ss << this->rc_spec_wood;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_recycle : public COdbcTable {
public:
	CT_v_recycle() : COdbcTable() {
		m_TableName = "v_recycle";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "km_syoken,"
					  "km_zai00,"
					  "km_zai01,"
					  "km_zai02,"
					  "km_zai03,"
					  "km_zai04,"
					  "km_rou01,"
					  "km_rou02,"
					  "km_rou03,"
					  "km_rou04,"
					  "km_gai01,"
					  "km_gai02,"
					  "km_gai03,"
					  "km_gai04,"
					  "km_kik01,"
					  "km_kik02,"
					  "km_kik03,"
					  "km_kik04,"
					  "km_kas01,"
					  "km_kas02,"
					  "km_kas03,"
					  "km_kas04,"
					  "km_kyuyo01,"
					  "km_kyuyo02,"
					  "km_kyuyo03,"
					  "km_kyuyo04,"
					  "km_tyo01,"
					  "km_tyo02,"
					  "km_tyo03,"
					  "km_tyo04,"
					  "km_kan01,"
					  "km_kan02,"
					  "km_gou01,"
					  "km_gou02,"
					  "km_gou03,"
					  "km_gou04,"
					  "km_yos01,"
					  "km_yos02,"
					  "km_yos03,"
					  "km_yos04,"
					  "km_ipn01,"
					  "km_ipn02,"
					  "km_yosankei,"
					  "km_zisekikei,"
					  "km_rie01,"
					  "km_rie02,"
					  "km_rie03,"
					  "km_rie04,"
					  "km_hok01,"
					  "km_hok02,"
					  "km_nen,"
					  "km_tuk,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_sya031,"
					  "km_sya032,"
					  "km_nendo,"
					  "km_kei01,"
					  "km_kei02,"
					  "km_man01,"
					  "km_man02,"
					  "km_man03,"
					  "km_man04,"
					  "km_man05,"
					  "km_wom01,"
					  "km_wom02,"
					  "km_wom03,"
					  "km_wom04,"
					  "km_wom05,"
					  "km_syoteate,"
					  "km_tingin,"
					  "km_syaho01,"
					  "km_koyou01,"
					  "km_kyosai01,"
					  "km_fukuri01,"
					  "km_kyu011,"
					  "km_kyu012,"
					  "km_kyu013,"
					  "km_kyu021,"
					  "km_kyu022,"
					  "km_kyu023,"
					  "km_kyu031,"
					  "km_kyu032,"
					  "km_kyu033,"
					  "km_kyu014,"
					  "km_kyu015,"
					  "km_kyu016,"
					  "km_kyu024,"
					  "km_kyu025,"
					  "km_kyu026,"
					  "km_kyu034,"
					  "km_kyu035,"
					  "km_kyu036,"
					  "km_kyuyokei,"
					  "km_syaho02,"
					  "km_koyou02,"
					  "km_kyosai02,"
					  "km_fukuri02,"
					  "km_kyuyosou,"
					  "km_rousaihoken,"
					  "km_kks01,"
					  "km_kks02,"
					  "km_kks03,"
					  "km_kks04,"
					  "km_chidai,"
					  "km_kukakin,"
					  "km_tusin,"
					  "km_hokenryo,"
					  "km_zappi,"
					  "km_sonota,"
					  "km_corins,"
					  "km_kaigihi,"
					  "km_kaihi,"
					  "km_anzen,"
					  "km_kousai,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu,"
					  "km_ukeoi,"
					  "recycleID,"
					  "rc_date,"
					  "rc_class1,"
					  "rc_class2,"
					  "rc_classname,"
					  "rc_spec_con,"
					  "rc_spec_2,"
					  "rc_spec_as,"
					  "rc_spec_wood"
					  " FROM v_recycle";
		m_SqlINSERT =
			"INSERT INTO v_recycle ("
			"km_index,"
			"km_name,"
			"km_no,"
			"km_syucd,"
			"km_kosyu,"
			"km_hatcd,"
			"km_hat02,"
			"km_keiyaku,"
			"km_tsuika,"
			"km_goukei,"
			"km_yosan,"
			"km_genka,"
			"km_keidate,"
			"km_kaisi,"
			"km_owari,"
			"km_tyakou,"
			"km_kansei,"
			"km_kensa,"
			"km_syoken,"
			"km_zai00,"
			"km_zai01,"
			"km_zai02,"
			"km_zai03,"
			"km_zai04,"
			"km_rou01,"
			"km_rou02,"
			"km_rou03,"
			"km_rou04,"
			"km_gai01,"
			"km_gai02,"
			"km_gai03,"
			"km_gai04,"
			"km_kik01,"
			"km_kik02,"
			"km_kik03,"
			"km_kik04,"
			"km_kas01,"
			"km_kas02,"
			"km_kas03,"
			"km_kas04,"
			"km_kyuyo01,"
			"km_kyuyo02,"
			"km_kyuyo03,"
			"km_kyuyo04,"
			"km_tyo01,"
			"km_tyo02,"
			"km_tyo03,"
			"km_tyo04,"
			"km_kan01,"
			"km_kan02,"
			"km_gou01,"
			"km_gou02,"
			"km_gou03,"
			"km_gou04,"
			"km_yos01,"
			"km_yos02,"
			"km_yos03,"
			"km_yos04,"
			"km_ipn01,"
			"km_ipn02,"
			"km_yosankei,"
			"km_zisekikei,"
			"km_rie01,"
			"km_rie02,"
			"km_rie03,"
			"km_rie04,"
			"km_hok01,"
			"km_hok02,"
			"km_nen,"
			"km_tuk,"
			"km_sya011,"
			"km_sya012,"
			"km_sya021,"
			"km_sya022,"
			"km_sya031,"
			"km_sya032,"
			"km_nendo,"
			"km_kei01,"
			"km_kei02,"
			"km_man01,"
			"km_man02,"
			"km_man03,"
			"km_man04,"
			"km_man05,"
			"km_wom01,"
			"km_wom02,"
			"km_wom03,"
			"km_wom04,"
			"km_wom05,"
			"km_syoteate,"
			"km_tingin,"
			"km_syaho01,"
			"km_koyou01,"
			"km_kyosai01,"
			"km_fukuri01,"
			"km_kyu011,"
			"km_kyu012,"
			"km_kyu013,"
			"km_kyu021,"
			"km_kyu022,"
			"km_kyu023,"
			"km_kyu031,"
			"km_kyu032,"
			"km_kyu033,"
			"km_kyu014,"
			"km_kyu015,"
			"km_kyu016,"
			"km_kyu024,"
			"km_kyu025,"
			"km_kyu026,"
			"km_kyu034,"
			"km_kyu035,"
			"km_kyu036,"
			"km_kyuyokei,"
			"km_syaho02,"
			"km_koyou02,"
			"km_kyosai02,"
			"km_fukuri02,"
			"km_kyuyosou,"
			"km_rousaihoken,"
			"km_kks01,"
			"km_kks02,"
			"km_kks03,"
			"km_kks04,"
			"km_chidai,"
			"km_kukakin,"
			"km_tusin,"
			"km_hokenryo,"
			"km_zappi,"
			"km_sonota,"
			"km_corins,"
			"km_kaigihi,"
			"km_kaihi,"
			"km_anzen,"
			"km_kousai,"
			"km_hat030,"
			"km_hat040,"
			"km_hat050,"
			"km_nyuudat,"
			"km_sw,"
			"km_bikou1,"
			"km_bikou2,"
			"km_nyuno,"
			"km_syouhizei,"
			"km_mitsumori,"
			"km_ritsu,"
			"km_ukeoi,"
			"recycleID,"
			"rc_date,"
			"rc_class1,"
			"rc_class2,"
			"rc_classname,"
			"rc_spec_con,"
			"rc_spec_2,"
			"rc_spec_as,"
			"rc_spec_wood)"
			" VALUES ( "
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_recycle SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_kensa = ?,"
					  "km_syoken = ?,"
					  "km_zai00 = ?,"
					  "km_zai01 = ?,"
					  "km_zai02 = ?,"
					  "km_zai03 = ?,"
					  "km_zai04 = ?,"
					  "km_rou01 = ?,"
					  "km_rou02 = ?,"
					  "km_rou03 = ?,"
					  "km_rou04 = ?,"
					  "km_gai01 = ?,"
					  "km_gai02 = ?,"
					  "km_gai03 = ?,"
					  "km_gai04 = ?,"
					  "km_kik01 = ?,"
					  "km_kik02 = ?,"
					  "km_kik03 = ?,"
					  "km_kik04 = ?,"
					  "km_kas01 = ?,"
					  "km_kas02 = ?,"
					  "km_kas03 = ?,"
					  "km_kas04 = ?,"
					  "km_kyuyo01 = ?,"
					  "km_kyuyo02 = ?,"
					  "km_kyuyo03 = ?,"
					  "km_kyuyo04 = ?,"
					  "km_tyo01 = ?,"
					  "km_tyo02 = ?,"
					  "km_tyo03 = ?,"
					  "km_tyo04 = ?,"
					  "km_kan01 = ?,"
					  "km_kan02 = ?,"
					  "km_gou01 = ?,"
					  "km_gou02 = ?,"
					  "km_gou03 = ?,"
					  "km_gou04 = ?,"
					  "km_yos01 = ?,"
					  "km_yos02 = ?,"
					  "km_yos03 = ?,"
					  "km_yos04 = ?,"
					  "km_ipn01 = ?,"
					  "km_ipn02 = ?,"
					  "km_yosankei = ?,"
					  "km_zisekikei = ?,"
					  "km_rie01 = ?,"
					  "km_rie02 = ?,"
					  "km_rie03 = ?,"
					  "km_rie04 = ?,"
					  "km_hok01 = ?,"
					  "km_hok02 = ?,"
					  "km_nen = ?,"
					  "km_tuk = ?,"
					  "km_sya011 = ?,"
					  "km_sya012 = ?,"
					  "km_sya021 = ?,"
					  "km_sya022 = ?,"
					  "km_sya031 = ?,"
					  "km_sya032 = ?,"
					  "km_nendo = ?,"
					  "km_kei01 = ?,"
					  "km_kei02 = ?,"
					  "km_man01 = ?,"
					  "km_man02 = ?,"
					  "km_man03 = ?,"
					  "km_man04 = ?,"
					  "km_man05 = ?,"
					  "km_wom01 = ?,"
					  "km_wom02 = ?,"
					  "km_wom03 = ?,"
					  "km_wom04 = ?,"
					  "km_wom05 = ?,"
					  "km_syoteate = ?,"
					  "km_tingin = ?,"
					  "km_syaho01 = ?,"
					  "km_koyou01 = ?,"
					  "km_kyosai01 = ?,"
					  "km_fukuri01 = ?,"
					  "km_kyu011 = ?,"
					  "km_kyu012 = ?,"
					  "km_kyu013 = ?,"
					  "km_kyu021 = ?,"
					  "km_kyu022 = ?,"
					  "km_kyu023 = ?,"
					  "km_kyu031 = ?,"
					  "km_kyu032 = ?,"
					  "km_kyu033 = ?,"
					  "km_kyu014 = ?,"
					  "km_kyu015 = ?,"
					  "km_kyu016 = ?,"
					  "km_kyu024 = ?,"
					  "km_kyu025 = ?,"
					  "km_kyu026 = ?,"
					  "km_kyu034 = ?,"
					  "km_kyu035 = ?,"
					  "km_kyu036 = ?,"
					  "km_kyuyokei = ?,"
					  "km_syaho02 = ?,"
					  "km_koyou02 = ?,"
					  "km_kyosai02 = ?,"
					  "km_fukuri02 = ?,"
					  "km_kyuyosou = ?,"
					  "km_rousaihoken = ?,"
					  "km_kks01 = ?,"
					  "km_kks02 = ?,"
					  "km_kks03 = ?,"
					  "km_kks04 = ?,"
					  "km_chidai = ?,"
					  "km_kukakin = ?,"
					  "km_tusin = ?,"
					  "km_hokenryo = ?,"
					  "km_zappi = ?,"
					  "km_sonota = ?,"
					  "km_corins = ?,"
					  "km_kaigihi = ?,"
					  "km_kaihi = ?,"
					  "km_anzen = ?,"
					  "km_kousai = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuno = ?,"
					  "km_syouhizei = ?,"
					  "km_mitsumori = ?,"
					  "km_ritsu = ?,"
					  "km_ukeoi = ?,"
					  "recycleID = ?,"
					  "rc_date = ?,"
					  "rc_class1 = ?,"
					  "rc_class2 = ?,"
					  "rc_classname = ?,"
					  "rc_spec_con = ?,"
					  "rc_spec_2 = ?,"
					  "rc_spec_as = ?,"
					  "rc_spec_wood = ?";

		m_SqlDELETE = "DELETE v_recycle ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_recycle", "km_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_tsuika", "9", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_goukei", "10", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_keidate", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kaisi", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_owari", "15", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_tyakou", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kansei", "17", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kensa", "18", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_syoken", "19", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_zai00", "20", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_zai01", "21", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_zai02", "22", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_zai03", "23", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_zai04", "24", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_rou01", "25", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_rou02", "26", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_rou03", "27", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_rou04", "28", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_gai01", "29", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_gai02", "30", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_gai03", "31", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_gai04", "32", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kik01", "33", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kik02", "34", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kik03", "35", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kik04", "36", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kas01", "37", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kas02", "38", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kas03", "39", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kas04", "40", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyuyo01", "41", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyuyo02", "42", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyuyo03", "43", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyuyo04", "44", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_tyo01", "45", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_tyo02", "46", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_tyo03", "47", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_tyo04", "48", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kan01", "49", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kan02", "50", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_gou01", "51", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_gou02", "52", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_gou03", "53", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_gou04", "54", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_yos01", "55", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_yos02", "56", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_yos03", "57", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_yos04", "58", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_ipn01", "59", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_ipn02", "60", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_yosankei", "61", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_zisekikei", "62", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_rie01", "63", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_rie02", "64", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_rie03", "65", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_rie04", "66", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_hok01", "67", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_hok02", "68", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_nen", "69", "", "YES", "smallint", "0", "0", "5", "0", "0", "",
					 "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_tuk", "70", "", "YES", "smallint", "0", "0", "5", "0", "0", "",
					 "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_sya011", "71", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_sya012", "72", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_sya021", "73", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_sya022", "74", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_sya031", "75", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_sya032", "76", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_nendo", "77", "", "YES", "smallint", "0", "0", "5", "0", "0", "",
					 "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kei01", "78", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kei02", "79", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_man01", "80", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_man02", "81", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_man03", "82", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_man04", "83", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_man05", "84", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_wom01", "85", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_wom02", "86", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_wom03", "87", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_wom04", "88", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_wom05", "89", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_syoteate", "90", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_tingin", "91", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_syaho01", "92", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_koyou01", "93", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyosai01", "94", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_fukuri01", "95", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu011", "96", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu012", "97", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu013", "98", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu021", "99", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu022", "100", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu023", "101", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu031", "102", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu032", "103", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu033", "104", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu014", "105", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu015", "106", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu016", "107", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu024", "108", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu025", "109", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu026", "110", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu034", "111", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu035", "112", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyu036", "113", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyuyokei", "114", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_syaho02", "115", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_koyou02", "116", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyosai02", "117", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_fukuri02", "118", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kyuyosou", "119", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_rousaihoken", "120", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kks01", "121", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kks02", "122", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kks03", "123", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kks04", "124", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_chidai", "125", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kukakin", "126", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_tusin", "127", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_hokenryo", "128", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_zappi", "129", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_sonota", "130", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_corins", "131", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kaigihi", "132", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kaihi", "133", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_anzen", "134", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_kousai", "135", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_hat030", "136", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_hat040", "137", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_hat050", "138", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_nyuudat", "139", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_sw", "140", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_bikou1", "141", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_bikou2", "142", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_nyuno", "143", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_syouhizei", "144", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_mitsumori", "145", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_ritsu", "146", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "km_ukeoi", "147", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "recycleID", "148", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "rc_date", "149", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "rc_class1", "150", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "rc_class2", "151", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "rc_classname", "152", "", "YES", "nvarchar", "-1", "-1", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "rc_spec_con", "153", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "rc_spec_2", "154", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "rc_spec_as", "155", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_recycle", "rc_spec_wood", "156", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_recycle() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_syoken = new char[MAXBUF];
		char *km_sya012 = new char[81];
		char *km_sya022 = new char[81];
		char *km_sya032 = new char[81];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		char *rc_classname = new char[0];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_recycle rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				com->GetData(8, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.km_keidate, sizeof(rec.km_keidate), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.km_kaisi, sizeof(rec.km_kaisi), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.km_owari, sizeof(rec.km_owari), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.km_tyakou, sizeof(rec.km_tyakou), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.km_kansei, sizeof(rec.km_kansei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.km_kensa, sizeof(rec.km_kensa), 0);
				memset(km_syoken, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, km_syoken, 1048576, 0);
				rec.km_syoken = (char *)km_syoken;
				com->GetData(20, SQL_C_DOUBLE, &rec.km_zai00, sizeof(rec.km_zai00), 0);
				com->GetData(21, SQL_C_DOUBLE, &rec.km_zai01, sizeof(rec.km_zai01), 0);
				com->GetData(22, SQL_C_DOUBLE, &rec.km_zai02, sizeof(rec.km_zai02), 0);
				com->GetData(23, SQL_C_DOUBLE, &rec.km_zai03, sizeof(rec.km_zai03), 0);
				com->GetData(24, SQL_C_DOUBLE, &rec.km_zai04, sizeof(rec.km_zai04), 0);
				com->GetData(25, SQL_C_DOUBLE, &rec.km_rou01, sizeof(rec.km_rou01), 0);
				com->GetData(26, SQL_C_DOUBLE, &rec.km_rou02, sizeof(rec.km_rou02), 0);
				com->GetData(27, SQL_C_DOUBLE, &rec.km_rou03, sizeof(rec.km_rou03), 0);
				com->GetData(28, SQL_C_DOUBLE, &rec.km_rou04, sizeof(rec.km_rou04), 0);
				com->GetData(29, SQL_C_DOUBLE, &rec.km_gai01, sizeof(rec.km_gai01), 0);
				com->GetData(30, SQL_C_DOUBLE, &rec.km_gai02, sizeof(rec.km_gai02), 0);
				com->GetData(31, SQL_C_DOUBLE, &rec.km_gai03, sizeof(rec.km_gai03), 0);
				com->GetData(32, SQL_C_DOUBLE, &rec.km_gai04, sizeof(rec.km_gai04), 0);
				com->GetData(33, SQL_C_DOUBLE, &rec.km_kik01, sizeof(rec.km_kik01), 0);
				com->GetData(34, SQL_C_DOUBLE, &rec.km_kik02, sizeof(rec.km_kik02), 0);
				com->GetData(35, SQL_C_DOUBLE, &rec.km_kik03, sizeof(rec.km_kik03), 0);
				com->GetData(36, SQL_C_DOUBLE, &rec.km_kik04, sizeof(rec.km_kik04), 0);
				com->GetData(37, SQL_C_DOUBLE, &rec.km_kas01, sizeof(rec.km_kas01), 0);
				com->GetData(38, SQL_C_DOUBLE, &rec.km_kas02, sizeof(rec.km_kas02), 0);
				com->GetData(39, SQL_C_DOUBLE, &rec.km_kas03, sizeof(rec.km_kas03), 0);
				com->GetData(40, SQL_C_DOUBLE, &rec.km_kas04, sizeof(rec.km_kas04), 0);
				com->GetData(41, SQL_C_DOUBLE, &rec.km_kyuyo01, sizeof(rec.km_kyuyo01), 0);
				com->GetData(42, SQL_C_DOUBLE, &rec.km_kyuyo02, sizeof(rec.km_kyuyo02), 0);
				com->GetData(43, SQL_C_DOUBLE, &rec.km_kyuyo03, sizeof(rec.km_kyuyo03), 0);
				com->GetData(44, SQL_C_DOUBLE, &rec.km_kyuyo04, sizeof(rec.km_kyuyo04), 0);
				com->GetData(45, SQL_C_DOUBLE, &rec.km_tyo01, sizeof(rec.km_tyo01), 0);
				com->GetData(46, SQL_C_DOUBLE, &rec.km_tyo02, sizeof(rec.km_tyo02), 0);
				com->GetData(47, SQL_C_DOUBLE, &rec.km_tyo03, sizeof(rec.km_tyo03), 0);
				com->GetData(48, SQL_C_DOUBLE, &rec.km_tyo04, sizeof(rec.km_tyo04), 0);
				com->GetData(49, SQL_C_DOUBLE, &rec.km_kan01, sizeof(rec.km_kan01), 0);
				com->GetData(50, SQL_C_DOUBLE, &rec.km_kan02, sizeof(rec.km_kan02), 0);
				com->GetData(51, SQL_C_DOUBLE, &rec.km_gou01, sizeof(rec.km_gou01), 0);
				com->GetData(52, SQL_C_DOUBLE, &rec.km_gou02, sizeof(rec.km_gou02), 0);
				com->GetData(53, SQL_C_DOUBLE, &rec.km_gou03, sizeof(rec.km_gou03), 0);
				com->GetData(54, SQL_C_DOUBLE, &rec.km_gou04, sizeof(rec.km_gou04), 0);
				com->GetData(55, SQL_C_DOUBLE, &rec.km_yos01, sizeof(rec.km_yos01), 0);
				com->GetData(56, SQL_C_DOUBLE, &rec.km_yos02, sizeof(rec.km_yos02), 0);
				com->GetData(57, SQL_C_DOUBLE, &rec.km_yos03, sizeof(rec.km_yos03), 0);
				com->GetData(58, SQL_C_DOUBLE, &rec.km_yos04, sizeof(rec.km_yos04), 0);
				com->GetData(59, SQL_C_DOUBLE, &rec.km_ipn01, sizeof(rec.km_ipn01), 0);
				com->GetData(60, SQL_C_DOUBLE, &rec.km_ipn02, sizeof(rec.km_ipn02), 0);
				com->GetData(61, SQL_C_DOUBLE, &rec.km_yosankei, sizeof(rec.km_yosankei), 0);
				com->GetData(62, SQL_C_DOUBLE, &rec.km_zisekikei, sizeof(rec.km_zisekikei), 0);
				com->GetData(63, SQL_C_DOUBLE, &rec.km_rie01, sizeof(rec.km_rie01), 0);
				com->GetData(64, SQL_C_DOUBLE, &rec.km_rie02, sizeof(rec.km_rie02), 0);
				com->GetData(65, SQL_C_DOUBLE, &rec.km_rie03, sizeof(rec.km_rie03), 0);
				com->GetData(66, SQL_C_DOUBLE, &rec.km_rie04, sizeof(rec.km_rie04), 0);
				com->GetData(67, SQL_C_DOUBLE, &rec.km_hok01, sizeof(rec.km_hok01), 0);
				com->GetData(68, SQL_C_DOUBLE, &rec.km_hok02, sizeof(rec.km_hok02), 0);
				com->GetData(69, SQL_C_SHORT, &rec.km_nen, sizeof(rec.km_nen), 0);
				com->GetData(70, SQL_C_SHORT, &rec.km_tuk, sizeof(rec.km_tuk), 0);
				com->GetData(71, SQL_C_LONG, &rec.km_sya011, sizeof(rec.km_sya011), 0);
				memset(km_sya012, 0, 81);
				com->GetData(72, SQL_C_CHAR, km_sya012, 81, 0);
				rec.km_sya012 = (char *)km_sya012;
				com->GetData(73, SQL_C_LONG, &rec.km_sya021, sizeof(rec.km_sya021), 0);
				memset(km_sya022, 0, 81);
				com->GetData(74, SQL_C_CHAR, km_sya022, 81, 0);
				rec.km_sya022 = (char *)km_sya022;
				com->GetData(75, SQL_C_LONG, &rec.km_sya031, sizeof(rec.km_sya031), 0);
				memset(km_sya032, 0, 81);
				com->GetData(76, SQL_C_CHAR, km_sya032, 81, 0);
				rec.km_sya032 = (char *)km_sya032;
				com->GetData(77, SQL_C_SHORT, &rec.km_nendo, sizeof(rec.km_nendo), 0);
				com->GetData(78, SQL_C_DOUBLE, &rec.km_kei01, sizeof(rec.km_kei01), 0);
				com->GetData(79, SQL_C_DOUBLE, &rec.km_kei02, sizeof(rec.km_kei02), 0);
				com->GetData(80, SQL_C_DOUBLE, &rec.km_man01, sizeof(rec.km_man01), 0);
				com->GetData(81, SQL_C_DOUBLE, &rec.km_man02, sizeof(rec.km_man02), 0);
				com->GetData(82, SQL_C_DOUBLE, &rec.km_man03, sizeof(rec.km_man03), 0);
				com->GetData(83, SQL_C_DOUBLE, &rec.km_man04, sizeof(rec.km_man04), 0);
				com->GetData(84, SQL_C_DOUBLE, &rec.km_man05, sizeof(rec.km_man05), 0);
				com->GetData(85, SQL_C_DOUBLE, &rec.km_wom01, sizeof(rec.km_wom01), 0);
				com->GetData(86, SQL_C_DOUBLE, &rec.km_wom02, sizeof(rec.km_wom02), 0);
				com->GetData(87, SQL_C_DOUBLE, &rec.km_wom03, sizeof(rec.km_wom03), 0);
				com->GetData(88, SQL_C_DOUBLE, &rec.km_wom04, sizeof(rec.km_wom04), 0);
				com->GetData(89, SQL_C_DOUBLE, &rec.km_wom05, sizeof(rec.km_wom05), 0);
				com->GetData(90, SQL_C_DOUBLE, &rec.km_syoteate, sizeof(rec.km_syoteate), 0);
				com->GetData(91, SQL_C_DOUBLE, &rec.km_tingin, sizeof(rec.km_tingin), 0);
				com->GetData(92, SQL_C_DOUBLE, &rec.km_syaho01, sizeof(rec.km_syaho01), 0);
				com->GetData(93, SQL_C_DOUBLE, &rec.km_koyou01, sizeof(rec.km_koyou01), 0);
				com->GetData(94, SQL_C_DOUBLE, &rec.km_kyosai01, sizeof(rec.km_kyosai01), 0);
				com->GetData(95, SQL_C_DOUBLE, &rec.km_fukuri01, sizeof(rec.km_fukuri01), 0);
				com->GetData(96, SQL_C_DOUBLE, &rec.km_kyu011, sizeof(rec.km_kyu011), 0);
				com->GetData(97, SQL_C_DOUBLE, &rec.km_kyu012, sizeof(rec.km_kyu012), 0);
				com->GetData(98, SQL_C_DOUBLE, &rec.km_kyu013, sizeof(rec.km_kyu013), 0);
				com->GetData(99, SQL_C_DOUBLE, &rec.km_kyu021, sizeof(rec.km_kyu021), 0);
				com->GetData(100, SQL_C_DOUBLE, &rec.km_kyu022, sizeof(rec.km_kyu022), 0);
				com->GetData(101, SQL_C_DOUBLE, &rec.km_kyu023, sizeof(rec.km_kyu023), 0);
				com->GetData(102, SQL_C_DOUBLE, &rec.km_kyu031, sizeof(rec.km_kyu031), 0);
				com->GetData(103, SQL_C_DOUBLE, &rec.km_kyu032, sizeof(rec.km_kyu032), 0);
				com->GetData(104, SQL_C_DOUBLE, &rec.km_kyu033, sizeof(rec.km_kyu033), 0);
				com->GetData(105, SQL_C_DOUBLE, &rec.km_kyu014, sizeof(rec.km_kyu014), 0);
				com->GetData(106, SQL_C_DOUBLE, &rec.km_kyu015, sizeof(rec.km_kyu015), 0);
				com->GetData(107, SQL_C_DOUBLE, &rec.km_kyu016, sizeof(rec.km_kyu016), 0);
				com->GetData(108, SQL_C_DOUBLE, &rec.km_kyu024, sizeof(rec.km_kyu024), 0);
				com->GetData(109, SQL_C_DOUBLE, &rec.km_kyu025, sizeof(rec.km_kyu025), 0);
				com->GetData(110, SQL_C_DOUBLE, &rec.km_kyu026, sizeof(rec.km_kyu026), 0);
				com->GetData(111, SQL_C_DOUBLE, &rec.km_kyu034, sizeof(rec.km_kyu034), 0);
				com->GetData(112, SQL_C_DOUBLE, &rec.km_kyu035, sizeof(rec.km_kyu035), 0);
				com->GetData(113, SQL_C_DOUBLE, &rec.km_kyu036, sizeof(rec.km_kyu036), 0);
				com->GetData(114, SQL_C_DOUBLE, &rec.km_kyuyokei, sizeof(rec.km_kyuyokei), 0);
				com->GetData(115, SQL_C_DOUBLE, &rec.km_syaho02, sizeof(rec.km_syaho02), 0);
				com->GetData(116, SQL_C_DOUBLE, &rec.km_koyou02, sizeof(rec.km_koyou02), 0);
				com->GetData(117, SQL_C_DOUBLE, &rec.km_kyosai02, sizeof(rec.km_kyosai02), 0);
				com->GetData(118, SQL_C_DOUBLE, &rec.km_fukuri02, sizeof(rec.km_fukuri02), 0);
				com->GetData(119, SQL_C_DOUBLE, &rec.km_kyuyosou, sizeof(rec.km_kyuyosou), 0);
				com->GetData(120, SQL_C_DOUBLE, &rec.km_rousaihoken, sizeof(rec.km_rousaihoken), 0);
				com->GetData(121, SQL_C_DOUBLE, &rec.km_kks01, sizeof(rec.km_kks01), 0);
				com->GetData(122, SQL_C_DOUBLE, &rec.km_kks02, sizeof(rec.km_kks02), 0);
				com->GetData(123, SQL_C_DOUBLE, &rec.km_kks03, sizeof(rec.km_kks03), 0);
				com->GetData(124, SQL_C_DOUBLE, &rec.km_kks04, sizeof(rec.km_kks04), 0);
				com->GetData(125, SQL_C_DOUBLE, &rec.km_chidai, sizeof(rec.km_chidai), 0);
				com->GetData(126, SQL_C_DOUBLE, &rec.km_kukakin, sizeof(rec.km_kukakin), 0);
				com->GetData(127, SQL_C_DOUBLE, &rec.km_tusin, sizeof(rec.km_tusin), 0);
				com->GetData(128, SQL_C_DOUBLE, &rec.km_hokenryo, sizeof(rec.km_hokenryo), 0);
				com->GetData(129, SQL_C_DOUBLE, &rec.km_zappi, sizeof(rec.km_zappi), 0);
				com->GetData(130, SQL_C_DOUBLE, &rec.km_sonota, sizeof(rec.km_sonota), 0);
				com->GetData(131, SQL_C_DOUBLE, &rec.km_corins, sizeof(rec.km_corins), 0);
				com->GetData(132, SQL_C_DOUBLE, &rec.km_kaigihi, sizeof(rec.km_kaigihi), 0);
				com->GetData(133, SQL_C_DOUBLE, &rec.km_kaihi, sizeof(rec.km_kaihi), 0);
				com->GetData(134, SQL_C_DOUBLE, &rec.km_anzen, sizeof(rec.km_anzen), 0);
				com->GetData(135, SQL_C_DOUBLE, &rec.km_kousai, sizeof(rec.km_kousai), 0);
				memset(km_hat030, 0, 101);
				com->GetData(136, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(137, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(138, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				com->GetData(139, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(140, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_bikou1, 0, 511);
				com->GetData(141, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(142, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				memset(km_nyuno, 0, 101);
				com->GetData(143, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				com->GetData(144, SQL_C_DOUBLE, &rec.km_syouhizei, sizeof(rec.km_syouhizei), 0);
				com->GetData(145, SQL_C_TYPE_TIMESTAMP, &rec.km_mitsumori, sizeof(rec.km_mitsumori), 0);
				com->GetData(146, SQL_C_DOUBLE, &rec.km_ritsu, sizeof(rec.km_ritsu), 0);
				com->GetData(147, SQL_C_LONG, &rec.km_ukeoi, sizeof(rec.km_ukeoi), 0);
				com->GetData(148, SQL_C_LONG, &rec.recycleID, sizeof(rec.recycleID), 0);
				com->GetData(149, SQL_C_TYPE_TIMESTAMP, &rec.rc_date, sizeof(rec.rc_date), 0);
				com->GetData(150, SQL_C_LONG, &rec.rc_class1, sizeof(rec.rc_class1), 0);
				com->GetData(151, SQL_C_LONG, &rec.rc_class2, sizeof(rec.rc_class2), 0);
				memset(rc_classname, 0, 0);
				com->GetData(152, SQL_C_CHAR, rc_classname, 0, 0);
				rec.rc_classname = (char *)rc_classname;
				com->GetData(153, SQL_C_CHAR, &rec.rc_spec_con, sizeof(rec.rc_spec_con), 0);
				com->GetData(154, SQL_C_CHAR, &rec.rc_spec_2, sizeof(rec.rc_spec_2), 0);
				com->GetData(155, SQL_C_CHAR, &rec.rc_spec_as, sizeof(rec.rc_spec_as), 0);
				com->GetData(156, SQL_C_CHAR, &rec.rc_spec_wood, sizeof(rec.rc_spec_wood), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_syoken;
		delete[] km_sya012;
		delete[] km_sya022;
		delete[] km_sya032;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		delete[] rc_classname;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_recycle operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_recycle &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_recycle rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_recycle> m_Data;
};
class CR_v_rirekiwork : public COdbcRecord {
public:
	CR_v_rirekiwork() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_rirekiwork() {}

	void Initialize() {
		kr_index = 0;
		kr_syacd = 0;
		MBR020 = "";
		kr_nengo = "";
		kr_nendo = 0;
		kr_tuki = 0;
		kr_kouji = 0;
		kr_name = "";
		kr_no = "";
		kr_hat = "";
		kr_syozoku = "";
		kr_motouke = "";
		kr_syokumu = "";
		kr_bikou1 = "";
	}

public:
	SQLINTEGER kr_index;
	SQLINTEGER kr_syacd;
	std::string MBR020;
	std::string kr_nengo;
	SQLINTEGER kr_nendo;
	SQLINTEGER kr_tuki;
	SQLINTEGER kr_kouji;
	std::string kr_name;
	std::string kr_no;
	TIMESTAMP_STRUCT kr_kaisi;
	TIMESTAMP_STRUCT kr_owari;
	std::string kr_hat;
	std::string kr_syozoku;
	std::string kr_motouke;
	std::string kr_syokumu;
	std::string kr_bikou1;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kr_index;
		} break;
		case 1: {
			ss << this->kr_syacd;
		} break;
		case 2: {
			ss << this->MBR020;
		} break;
		case 3: {
			ss << this->kr_nengo;
		} break;
		case 4: {
			ss << this->kr_nendo;
		} break;
		case 5: {
			ss << this->kr_tuki;
		} break;
		case 6: {
			ss << this->kr_kouji;
		} break;
		case 7: {
			ss << this->kr_name;
		} break;
		case 8: {
			ss << this->kr_no;
		} break;
		case 9: {
			COdbcDateTime date(&this->kr_kaisi);
			ss << date.to_string();
		} break;
		case 10: {
			COdbcDateTime date(&this->kr_owari);
			ss << date.to_string();
		} break;
		case 11: {
			ss << this->kr_hat;
		} break;
		case 12: {
			ss << this->kr_syozoku;
		} break;
		case 13: {
			ss << this->kr_motouke;
		} break;
		case 14: {
			ss << this->kr_syokumu;
		} break;
		case 15: {
			ss << this->kr_bikou1;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_rirekiwork : public COdbcTable {
public:
	CT_v_rirekiwork() : COdbcTable() {
		m_TableName = "v_rirekiwork";
		m_SqlSELECT = "SELECT "
					  "kr_index,"
					  "kr_syacd,"
					  "MBR020,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_tuki,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1"
					  " FROM v_rirekiwork";
		m_SqlINSERT = "INSERT INTO v_rirekiwork ("
					  "kr_index,"
					  "kr_syacd,"
					  "MBR020,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_tuki,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_rirekiwork SET "
					  "kr_index = ?,"
					  "kr_syacd = ?,"
					  "MBR020 = ?,"
					  "kr_nengo = ?,"
					  "kr_nendo = ?,"
					  "kr_tuki = ?,"
					  "kr_kouji = ?,"
					  "kr_name = ?,"
					  "kr_no = ?,"
					  "kr_kaisi = ?,"
					  "kr_owari = ?,"
					  "kr_hat = ?,"
					  "kr_syozoku = ?,"
					  "kr_motouke = ?,"
					  "kr_syokumu = ?,"
					  "kr_bikou1 = ?";

		m_SqlDELETE = "DELETE v_rirekiwork ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_syacd", "2", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "MBR020", "3", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_nengo", "4", "", "NO", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_nendo", "5", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_tuki", "6", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_kouji", "7", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_name", "8", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_no", "9", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_kaisi", "10", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_owari", "11", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_hat", "12", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_syozoku", "13", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_motouke", "14", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_syokumu", "15", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_rirekiwork", "kr_bikou1", "16", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_rirekiwork() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *MBR020 = new char[101];
		char *kr_nengo = new char[101];
		char *kr_name = new char[511];
		char *kr_no = new char[511];
		char *kr_hat = new char[511];
		char *kr_syozoku = new char[511];
		char *kr_motouke = new char[101];
		char *kr_syokumu = new char[101];
		char *kr_bikou1 = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_rirekiwork rec;
				com->GetData(1, SQL_C_LONG, &rec.kr_index, sizeof(rec.kr_index), 0);
				com->GetData(2, SQL_C_LONG, &rec.kr_syacd, sizeof(rec.kr_syacd), 0);
				memset(MBR020, 0, 101);
				com->GetData(3, SQL_C_CHAR, MBR020, 101, 0);
				rec.MBR020 = (char *)MBR020;
				memset(kr_nengo, 0, 101);
				com->GetData(4, SQL_C_CHAR, kr_nengo, 101, 0);
				rec.kr_nengo = (char *)kr_nengo;
				com->GetData(5, SQL_C_LONG, &rec.kr_nendo, sizeof(rec.kr_nendo), 0);
				com->GetData(6, SQL_C_LONG, &rec.kr_tuki, sizeof(rec.kr_tuki), 0);
				com->GetData(7, SQL_C_LONG, &rec.kr_kouji, sizeof(rec.kr_kouji), 0);
				memset(kr_name, 0, 511);
				com->GetData(8, SQL_C_CHAR, kr_name, 511, 0);
				rec.kr_name = (char *)kr_name;
				memset(kr_no, 0, 511);
				com->GetData(9, SQL_C_CHAR, kr_no, 511, 0);
				rec.kr_no = (char *)kr_no;
				com->GetData(10, SQL_C_TYPE_TIMESTAMP, &rec.kr_kaisi, sizeof(rec.kr_kaisi), 0);
				com->GetData(11, SQL_C_TYPE_TIMESTAMP, &rec.kr_owari, sizeof(rec.kr_owari), 0);
				memset(kr_hat, 0, 511);
				com->GetData(12, SQL_C_CHAR, kr_hat, 511, 0);
				rec.kr_hat = (char *)kr_hat;
				memset(kr_syozoku, 0, 511);
				com->GetData(13, SQL_C_CHAR, kr_syozoku, 511, 0);
				rec.kr_syozoku = (char *)kr_syozoku;
				memset(kr_motouke, 0, 101);
				com->GetData(14, SQL_C_CHAR, kr_motouke, 101, 0);
				rec.kr_motouke = (char *)kr_motouke;
				memset(kr_syokumu, 0, 101);
				com->GetData(15, SQL_C_CHAR, kr_syokumu, 101, 0);
				rec.kr_syokumu = (char *)kr_syokumu;
				memset(kr_bikou1, 0, 511);
				com->GetData(16, SQL_C_CHAR, kr_bikou1, 511, 0);
				rec.kr_bikou1 = (char *)kr_bikou1;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] MBR020;
		delete[] kr_nengo;
		delete[] kr_name;
		delete[] kr_no;
		delete[] kr_hat;
		delete[] kr_syozoku;
		delete[] kr_motouke;
		delete[] kr_syokumu;
		delete[] kr_bikou1;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_rirekiwork operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_rirekiwork &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_rirekiwork rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_rirekiwork> m_Data;
};
class CR_t_kansei : public COdbcRecord {
public:
	CR_t_kansei() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kansei() {}

	void Initialize() {
		kk_id = 0;
		kk_ynendo = 0;
		kk_knendo = 0;
		kk_syurui = 0;
		kk_jvflg = 0;
		kk_jvritsu = 0.0;
		kk_ukeoi = 0;
		kk_kanmin = 0;
		kk_ken = "";
		kk_shi = "";
		kk_tiku = "";
		memset(&kk_kingaku, 0, sizeof(kk_kingaku));
		memset(&kk_zei, 0, sizeof(kk_zei));
		memset(&kk_goukei, 0, sizeof(kk_goukei));
		kk_point = 0;
		kk_ritsu = 0.0;
		kk_key = 0;
	}

public:
	SQLINTEGER kk_id;
	SQLINTEGER kk_ynendo;
	SQLINTEGER kk_knendo;
	SQLINTEGER kk_syurui;
	SQLCHAR kk_jvflg;
	SQLFLOAT kk_jvritsu;
	SQLINTEGER kk_ukeoi;
	SQLINTEGER kk_kanmin;
	std::string kk_ken;
	std::string kk_shi;
	std::string kk_tiku;
	TIMESTAMP_STRUCT kk_kaisi;
	TIMESTAMP_STRUCT kk_owari;
	SQL_NUMERIC_STRUCT kk_kingaku;
	SQL_NUMERIC_STRUCT kk_zei;
	SQL_NUMERIC_STRUCT kk_goukei;
	SQLINTEGER kk_point;
	SQLFLOAT kk_ritsu;
	SQLINTEGER kk_key;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kk_id;
		} break;
		case 1: {
			ss << this->kk_ynendo;
		} break;
		case 2: {
			ss << this->kk_knendo;
		} break;
		case 3: {
			ss << this->kk_syurui;
		} break;
		case 4: {
			ss << this->kk_jvflg;
		} break;
		case 5: {
			ss << this->kk_jvritsu;
		} break;
		case 6: {
			ss << this->kk_ukeoi;
		} break;
		case 7: {
			ss << this->kk_kanmin;
		} break;
		case 8: {
			ss << this->kk_ken;
		} break;
		case 9: {
			ss << this->kk_shi;
		} break;
		case 10: {
			ss << this->kk_tiku;
		} break;
		case 11: {
			COdbcDateTime date(&this->kk_kaisi);
			ss << date.to_string();
		} break;
		case 12: {
			COdbcDateTime date(&this->kk_owari);
			ss << date.to_string();
		} break;
		case 13: {
			ss << COdbcColumn::NumericToString(&this->kk_kingaku);
		} break;
		case 14: {
			ss << COdbcColumn::NumericToString(&this->kk_zei);
		} break;
		case 15: {
			ss << COdbcColumn::NumericToString(&this->kk_goukei);
		} break;
		case 16: {
			ss << this->kk_point;
		} break;
		case 17: {
			ss << this->kk_ritsu;
		} break;
		case 18: {
			ss << this->kk_key;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kansei : public COdbcTable {
public:
	CT_t_kansei() : COdbcTable() {
		m_TableName = "t_kansei";
		m_SqlSELECT = "SELECT "
					  "kk_id,"
					  "kk_ynendo,"
					  "kk_knendo,"
					  "kk_syurui,"
					  "kk_jvflg,"
					  "kk_jvritsu,"
					  "kk_ukeoi,"
					  "kk_kanmin,"
					  "kk_ken,"
					  "kk_shi,"
					  "kk_tiku,"
					  "kk_kaisi,"
					  "kk_owari,"
					  "kk_kingaku,"
					  "kk_zei,"
					  "kk_goukei,"
					  "kk_point,"
					  "kk_ritsu,"
					  "kk_key"
					  " FROM t_kansei";
		m_SqlINSERT = "INSERT INTO t_kansei ("
					  "kk_id,"
					  "kk_ynendo,"
					  "kk_knendo,"
					  "kk_syurui,"
					  "kk_jvflg,"
					  "kk_jvritsu,"
					  "kk_ukeoi,"
					  "kk_kanmin,"
					  "kk_ken,"
					  "kk_shi,"
					  "kk_tiku,"
					  "kk_kaisi,"
					  "kk_owari,"
					  "kk_kingaku,"
					  "kk_zei,"
					  "kk_goukei,"
					  "kk_point,"
					  "kk_ritsu"
					  ")"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,";
		m_SqlUPDATE = "UPDATE t_kansei SET "
					  "kk_id = ?,"
					  "kk_ynendo = ?,"
					  "kk_knendo = ?,"
					  "kk_syurui = ?,"
					  "kk_jvflg = ?,"
					  "kk_jvritsu = ?,"
					  "kk_ukeoi = ?,"
					  "kk_kanmin = ?,"
					  "kk_ken = ?,"
					  "kk_shi = ?,"
					  "kk_tiku = ?,"
					  "kk_kaisi = ?,"
					  "kk_owari = ?,"
					  "kk_kingaku = ?,"
					  "kk_zei = ?,"
					  "kk_goukei = ?,"
					  "kk_point = ?,"
					  "kk_ritsu = ?)";

		m_SqlDELETE = "DELETE t_kansei ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_ynendo", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_knendo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_syurui", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_jvflg", "5", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_jvritsu", "6", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_ukeoi", "7", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_kanmin", "8", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_ken", "9", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_shi", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_tiku", "11", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_kaisi", "12", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_owari", "13", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_kingaku", "14", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_zei", "15", "", "YES", "money", "0", "0", "19", "4", "0", "", "",
					 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_goukei", "16", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_point", "17", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_ritsu", "18", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kansei", "kk_key", "19", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_kansei", "kk_key", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_kansei() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *kk_ken = new char[101];
		char *kk_shi = new char[101];
		char *kk_tiku = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kansei rec;
				com->GetData(1, SQL_C_LONG, &rec.kk_id, sizeof(rec.kk_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.kk_ynendo, sizeof(rec.kk_ynendo), 0);
				com->GetData(3, SQL_C_LONG, &rec.kk_knendo, sizeof(rec.kk_knendo), 0);
				com->GetData(4, SQL_C_LONG, &rec.kk_syurui, sizeof(rec.kk_syurui), 0);
				com->GetData(5, SQL_C_CHAR, &rec.kk_jvflg, sizeof(rec.kk_jvflg), 0);
				com->GetData(6, SQL_C_DOUBLE, &rec.kk_jvritsu, sizeof(rec.kk_jvritsu), 0);
				com->GetData(7, SQL_C_LONG, &rec.kk_ukeoi, sizeof(rec.kk_ukeoi), 0);
				com->GetData(8, SQL_C_LONG, &rec.kk_kanmin, sizeof(rec.kk_kanmin), 0);
				memset(kk_ken, 0, 101);
				com->GetData(9, SQL_C_CHAR, kk_ken, 101, 0);
				rec.kk_ken = (char *)kk_ken;
				memset(kk_shi, 0, 101);
				com->GetData(10, SQL_C_CHAR, kk_shi, 101, 0);
				rec.kk_shi = (char *)kk_shi;
				memset(kk_tiku, 0, 101);
				com->GetData(11, SQL_C_CHAR, kk_tiku, 101, 0);
				rec.kk_tiku = (char *)kk_tiku;
				com->GetData(12, SQL_C_TYPE_TIMESTAMP, &rec.kk_kaisi, sizeof(rec.kk_kaisi), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.kk_owari, sizeof(rec.kk_owari), 0);
				com->GetData(14, SQL_C_NUMERIC, &rec.kk_kingaku, sizeof(rec.kk_kingaku), 0);
				com->GetData(15, SQL_C_NUMERIC, &rec.kk_zei, sizeof(rec.kk_zei), 0);
				com->GetData(16, SQL_C_NUMERIC, &rec.kk_goukei, sizeof(rec.kk_goukei), 0);
				com->GetData(17, SQL_C_LONG, &rec.kk_point, sizeof(rec.kk_point), 0);
				com->GetData(18, SQL_C_DOUBLE, &rec.kk_ritsu, sizeof(rec.kk_ritsu), 0);
				com->GetData(19, SQL_C_LONG, &rec.kk_key, sizeof(rec.kk_key), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] kk_ken;
		delete[] kk_shi;
		delete[] kk_tiku;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kansei operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kansei &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kansei rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kansei> m_Data;
};
class CR_v_roudou : public COdbcRecord {
public:
	CR_v_roudou() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_roudou() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		kk_ynendo = 0;
		kk_knendo = 0;
		kk_syurui = 0;
		kk_jvflg = 0;
		kk_jvritsu = 0.0;
		kk_ukeoi = 0;
		kk_kanmin = 0;
		kk_ken = "";
		kk_shi = "";
		kk_tiku = "";
		memset(&kk_kingaku, 0, sizeof(kk_kingaku));
		memset(&kk_zei, 0, sizeof(kk_zei));
		memset(&kk_goukei, 0, sizeof(kk_goukei));
		kk_point = 0;
		kk_ritsu = 0.0;
		kk_key = 0;
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	TIMESTAMP_STRUCT km_keidate;
	TIMESTAMP_STRUCT km_kaisi;
	TIMESTAMP_STRUCT km_owari;
	TIMESTAMP_STRUCT km_tyakou;
	TIMESTAMP_STRUCT km_kansei;
	TIMESTAMP_STRUCT km_kensa;
	SQLINTEGER kk_ynendo;
	SQLINTEGER kk_knendo;
	SQLINTEGER kk_syurui;
	SQLCHAR kk_jvflg;
	SQLFLOAT kk_jvritsu;
	SQLINTEGER kk_ukeoi;
	SQLINTEGER kk_kanmin;
	std::string kk_ken;
	std::string kk_shi;
	std::string kk_tiku;
	TIMESTAMP_STRUCT kk_kaisi;
	TIMESTAMP_STRUCT kk_owari;
	SQL_NUMERIC_STRUCT kk_kingaku;
	SQL_NUMERIC_STRUCT kk_zei;
	SQL_NUMERIC_STRUCT kk_goukei;
	SQLINTEGER kk_point;
	SQLFLOAT kk_ritsu;
	SQLINTEGER kk_key;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_keiyaku;
		} break;
		case 8: {
			ss << this->km_tsuika;
		} break;
		case 9: {
			ss << this->km_goukei;
		} break;
		case 10: {
			ss << this->km_yosan;
		} break;
		case 11: {
			ss << this->km_genka;
		} break;
		case 12: {
			COdbcDateTime date(&this->km_keidate);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->km_kaisi);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->km_owari);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->km_tyakou);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->km_kansei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->km_kensa);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->kk_ynendo;
		} break;
		case 19: {
			ss << this->kk_knendo;
		} break;
		case 20: {
			ss << this->kk_syurui;
		} break;
		case 21: {
			ss << this->kk_jvflg;
		} break;
		case 22: {
			ss << this->kk_jvritsu;
		} break;
		case 23: {
			ss << this->kk_ukeoi;
		} break;
		case 24: {
			ss << this->kk_kanmin;
		} break;
		case 25: {
			ss << this->kk_ken;
		} break;
		case 26: {
			ss << this->kk_shi;
		} break;
		case 27: {
			ss << this->kk_tiku;
		} break;
		case 28: {
			COdbcDateTime date(&this->kk_kaisi);
			ss << date.to_string();
		} break;
		case 29: {
			COdbcDateTime date(&this->kk_owari);
			ss << date.to_string();
		} break;
		case 30: {
			ss << COdbcColumn::NumericToString(&this->kk_kingaku);
		} break;
		case 31: {
			ss << COdbcColumn::NumericToString(&this->kk_zei);
		} break;
		case 32: {
			ss << COdbcColumn::NumericToString(&this->kk_goukei);
		} break;
		case 33: {
			ss << this->kk_point;
		} break;
		case 34: {
			ss << this->kk_ritsu;
		} break;
		case 35: {
			ss << this->kk_key;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_roudou : public COdbcTable {
public:
	CT_v_roudou() : COdbcTable() {
		m_TableName = "v_roudou";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "kk_ynendo,"
					  "kk_knendo,"
					  "kk_syurui,"
					  "kk_jvflg,"
					  "kk_jvritsu,"
					  "kk_ukeoi,"
					  "kk_kanmin,"
					  "kk_ken,"
					  "kk_shi,"
					  "kk_tiku,"
					  "kk_kaisi,"
					  "kk_owari,"
					  "kk_kingaku,"
					  "kk_zei,"
					  "kk_goukei,"
					  "kk_point,"
					  "kk_ritsu,"
					  "kk_key"
					  " FROM v_roudou";
		m_SqlINSERT = "INSERT INTO v_roudou ("
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "kk_ynendo,"
					  "kk_knendo,"
					  "kk_syurui,"
					  "kk_jvflg,"
					  "kk_jvritsu,"
					  "kk_ukeoi,"
					  "kk_kanmin,"
					  "kk_ken,"
					  "kk_shi,"
					  "kk_tiku,"
					  "kk_kaisi,"
					  "kk_owari,"
					  "kk_kingaku,"
					  "kk_zei,"
					  "kk_goukei,"
					  "kk_point,"
					  "kk_ritsu,"
					  "kk_key)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_roudou SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_kensa = ?,"
					  "kk_ynendo = ?,"
					  "kk_knendo = ?,"
					  "kk_syurui = ?,"
					  "kk_jvflg = ?,"
					  "kk_jvritsu = ?,"
					  "kk_ukeoi = ?,"
					  "kk_kanmin = ?,"
					  "kk_ken = ?,"
					  "kk_shi = ?,"
					  "kk_tiku = ?,"
					  "kk_kaisi = ?,"
					  "kk_owari = ?,"
					  "kk_kingaku = ?,"
					  "kk_zei = ?,"
					  "kk_goukei = ?,"
					  "kk_point = ?,"
					  "kk_ritsu = ?,"
					  "kk_key = ?";

		m_SqlDELETE = "DELETE v_roudou ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_roudou", "km_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_tsuika", "9", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_goukei", "10", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_keidate", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_kaisi", "14", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_owari", "15", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_tyakou", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_kansei", "17", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "km_kensa", "18", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_ynendo", "19", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_knendo", "20", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_syurui", "21", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_jvflg", "22", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_jvritsu", "23", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_ukeoi", "24", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_kanmin", "25", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_ken", "26", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_shi", "27", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_tiku", "28", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_kaisi", "29", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_owari", "30", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_kingaku", "31", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_zei", "32", "", "YES", "money", "0", "0", "19", "4", "0", "", "",
					 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_goukei", "33", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_point", "34", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_ritsu", "35", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_roudou", "kk_key", "36", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_roudou() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *kk_ken = new char[101];
		char *kk_shi = new char[101];
		char *kk_tiku = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_roudou rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				com->GetData(8, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.km_keidate, sizeof(rec.km_keidate), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.km_kaisi, sizeof(rec.km_kaisi), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.km_owari, sizeof(rec.km_owari), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.km_tyakou, sizeof(rec.km_tyakou), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.km_kansei, sizeof(rec.km_kansei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.km_kensa, sizeof(rec.km_kensa), 0);
				com->GetData(19, SQL_C_LONG, &rec.kk_ynendo, sizeof(rec.kk_ynendo), 0);
				com->GetData(20, SQL_C_LONG, &rec.kk_knendo, sizeof(rec.kk_knendo), 0);
				com->GetData(21, SQL_C_LONG, &rec.kk_syurui, sizeof(rec.kk_syurui), 0);
				com->GetData(22, SQL_C_CHAR, &rec.kk_jvflg, sizeof(rec.kk_jvflg), 0);
				com->GetData(23, SQL_C_DOUBLE, &rec.kk_jvritsu, sizeof(rec.kk_jvritsu), 0);
				com->GetData(24, SQL_C_LONG, &rec.kk_ukeoi, sizeof(rec.kk_ukeoi), 0);
				com->GetData(25, SQL_C_LONG, &rec.kk_kanmin, sizeof(rec.kk_kanmin), 0);
				memset(kk_ken, 0, 101);
				com->GetData(26, SQL_C_CHAR, kk_ken, 101, 0);
				rec.kk_ken = (char *)kk_ken;
				memset(kk_shi, 0, 101);
				com->GetData(27, SQL_C_CHAR, kk_shi, 101, 0);
				rec.kk_shi = (char *)kk_shi;
				memset(kk_tiku, 0, 101);
				com->GetData(28, SQL_C_CHAR, kk_tiku, 101, 0);
				rec.kk_tiku = (char *)kk_tiku;
				com->GetData(29, SQL_C_TYPE_TIMESTAMP, &rec.kk_kaisi, sizeof(rec.kk_kaisi), 0);
				com->GetData(30, SQL_C_TYPE_TIMESTAMP, &rec.kk_owari, sizeof(rec.kk_owari), 0);
				com->GetData(31, SQL_C_NUMERIC, &rec.kk_kingaku, sizeof(rec.kk_kingaku), 0);
				com->GetData(32, SQL_C_NUMERIC, &rec.kk_zei, sizeof(rec.kk_zei), 0);
				com->GetData(33, SQL_C_NUMERIC, &rec.kk_goukei, sizeof(rec.kk_goukei), 0);
				com->GetData(34, SQL_C_LONG, &rec.kk_point, sizeof(rec.kk_point), 0);
				com->GetData(35, SQL_C_DOUBLE, &rec.kk_ritsu, sizeof(rec.kk_ritsu), 0);
				com->GetData(36, SQL_C_LONG, &rec.kk_key, sizeof(rec.kk_key), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] kk_ken;
		delete[] kk_shi;
		delete[] kk_tiku;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_roudou operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_roudou &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_roudou rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_roudou> m_Data;
};
class CR_v_seikyu : public COdbcRecord {
public:
	CR_v_seikyu() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_seikyu() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		km_syoken = "";
		km_zai00 = 0.0;
		km_zai01 = 0.0;
		km_zai02 = 0.0;
		km_zai03 = 0.0;
		km_zai04 = 0.0;
		km_rou01 = 0.0;
		km_rou02 = 0.0;
		km_rou03 = 0.0;
		km_rou04 = 0.0;
		km_gai01 = 0.0;
		km_gai02 = 0.0;
		km_gai03 = 0.0;
		km_gai04 = 0.0;
		km_kik01 = 0.0;
		km_kik02 = 0.0;
		km_kik03 = 0.0;
		km_kik04 = 0.0;
		km_kas01 = 0.0;
		km_kas02 = 0.0;
		km_kas03 = 0.0;
		km_kas04 = 0.0;
		km_kyuyo01 = 0.0;
		km_kyuyo02 = 0.0;
		km_kyuyo03 = 0.0;
		km_kyuyo04 = 0.0;
		km_tyo01 = 0.0;
		km_tyo02 = 0.0;
		km_tyo03 = 0.0;
		km_tyo04 = 0.0;
		km_kan01 = 0.0;
		km_kan02 = 0.0;
		km_gou01 = 0.0;
		km_gou02 = 0.0;
		km_gou03 = 0.0;
		km_gou04 = 0.0;
		km_yos01 = 0.0;
		km_yos02 = 0.0;
		km_yos03 = 0.0;
		km_yos04 = 0.0;
		km_ipn01 = 0.0;
		km_ipn02 = 0.0;
		km_yosankei = 0.0;
		km_zisekikei = 0.0;
		km_rie01 = 0.0;
		km_rie02 = 0.0;
		km_rie03 = 0.0;
		km_rie04 = 0.0;
		km_hok01 = 0.0;
		km_hok02 = 0.0;
		km_nen = 0;
		km_tuk = 0;
		km_sya011 = 0;
		km_sya012 = "";
		km_sya021 = 0;
		km_sya022 = "";
		km_sya031 = 0;
		km_sya032 = "";
		km_nendo = 0;
		km_kei01 = 0.0;
		km_kei02 = 0.0;
		km_man01 = 0.0;
		km_man02 = 0.0;
		km_man03 = 0.0;
		km_man04 = 0.0;
		km_man05 = 0.0;
		km_wom01 = 0.0;
		km_wom02 = 0.0;
		km_wom03 = 0.0;
		km_wom04 = 0.0;
		km_wom05 = 0.0;
		km_syoteate = 0.0;
		km_tingin = 0.0;
		km_syaho01 = 0.0;
		km_koyou01 = 0.0;
		km_kyosai01 = 0.0;
		km_fukuri01 = 0.0;
		km_kyu011 = 0.0;
		km_kyu012 = 0.0;
		km_kyu013 = 0.0;
		km_kyu021 = 0.0;
		km_kyu022 = 0.0;
		km_kyu023 = 0.0;
		km_kyu031 = 0.0;
		km_kyu032 = 0.0;
		km_kyu033 = 0.0;
		km_kyu014 = 0.0;
		km_kyu015 = 0.0;
		km_kyu016 = 0.0;
		km_kyu024 = 0.0;
		km_kyu025 = 0.0;
		km_kyu026 = 0.0;
		km_kyu034 = 0.0;
		km_kyu035 = 0.0;
		km_kyu036 = 0.0;
		km_kyuyokei = 0.0;
		km_syaho02 = 0.0;
		km_koyou02 = 0.0;
		km_kyosai02 = 0.0;
		km_fukuri02 = 0.0;
		km_kyuyosou = 0.0;
		km_rousaihoken = 0.0;
		km_kks01 = 0.0;
		km_kks02 = 0.0;
		km_kks03 = 0.0;
		km_kks04 = 0.0;
		km_chidai = 0.0;
		km_kukakin = 0.0;
		km_tusin = 0.0;
		km_hokenryo = 0.0;
		km_zappi = 0.0;
		km_sonota = 0.0;
		km_corins = 0.0;
		km_kaigihi = 0.0;
		km_kaihi = 0.0;
		km_anzen = 0.0;
		km_kousai = 0.0;
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_sw = 0;
		km_bikou1 = "";
		km_bikou2 = "";
		km_nyuno = "";
		km_syouhizei = 0.0;
		km_ritsu = 0.0;
		km_ukeoi = 0;
		km_ten = 0;
		se_Id = 0;
		se_kouji = 0;
		se_name = "";
		memset(&se_nuki, 0, sizeof(se_nuki));
		memset(&se_zei, 0, sizeof(se_zei));
		memset(&se_komi, 0, sizeof(se_komi));
		se_kubun = 0;
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	TIMESTAMP_STRUCT km_keidate;
	TIMESTAMP_STRUCT km_kaisi;
	TIMESTAMP_STRUCT km_owari;
	TIMESTAMP_STRUCT km_tyakou;
	TIMESTAMP_STRUCT km_kansei;
	TIMESTAMP_STRUCT km_kensa;
	std::string km_syoken;
	SQLFLOAT km_zai00;
	SQLFLOAT km_zai01;
	SQLFLOAT km_zai02;
	SQLFLOAT km_zai03;
	SQLFLOAT km_zai04;
	SQLFLOAT km_rou01;
	SQLFLOAT km_rou02;
	SQLFLOAT km_rou03;
	SQLFLOAT km_rou04;
	SQLFLOAT km_gai01;
	SQLFLOAT km_gai02;
	SQLFLOAT km_gai03;
	SQLFLOAT km_gai04;
	SQLFLOAT km_kik01;
	SQLFLOAT km_kik02;
	SQLFLOAT km_kik03;
	SQLFLOAT km_kik04;
	SQLFLOAT km_kas01;
	SQLFLOAT km_kas02;
	SQLFLOAT km_kas03;
	SQLFLOAT km_kas04;
	SQLFLOAT km_kyuyo01;
	SQLFLOAT km_kyuyo02;
	SQLFLOAT km_kyuyo03;
	SQLFLOAT km_kyuyo04;
	SQLFLOAT km_tyo01;
	SQLFLOAT km_tyo02;
	SQLFLOAT km_tyo03;
	SQLFLOAT km_tyo04;
	SQLFLOAT km_kan01;
	SQLFLOAT km_kan02;
	SQLFLOAT km_gou01;
	SQLFLOAT km_gou02;
	SQLFLOAT km_gou03;
	SQLFLOAT km_gou04;
	SQLFLOAT km_yos01;
	SQLFLOAT km_yos02;
	SQLFLOAT km_yos03;
	SQLFLOAT km_yos04;
	SQLFLOAT km_ipn01;
	SQLFLOAT km_ipn02;
	SQLFLOAT km_yosankei;
	SQLFLOAT km_zisekikei;
	SQLFLOAT km_rie01;
	SQLFLOAT km_rie02;
	SQLFLOAT km_rie03;
	SQLFLOAT km_rie04;
	SQLFLOAT km_hok01;
	SQLFLOAT km_hok02;
	SQLSMALLINT km_nen;
	SQLSMALLINT km_tuk;
	SQLINTEGER km_sya011;
	std::string km_sya012;
	SQLINTEGER km_sya021;
	std::string km_sya022;
	SQLINTEGER km_sya031;
	std::string km_sya032;
	SQLSMALLINT km_nendo;
	SQLFLOAT km_kei01;
	SQLFLOAT km_kei02;
	SQLFLOAT km_man01;
	SQLFLOAT km_man02;
	SQLFLOAT km_man03;
	SQLFLOAT km_man04;
	SQLFLOAT km_man05;
	SQLFLOAT km_wom01;
	SQLFLOAT km_wom02;
	SQLFLOAT km_wom03;
	SQLFLOAT km_wom04;
	SQLFLOAT km_wom05;
	SQLFLOAT km_syoteate;
	SQLFLOAT km_tingin;
	SQLFLOAT km_syaho01;
	SQLFLOAT km_koyou01;
	SQLFLOAT km_kyosai01;
	SQLFLOAT km_fukuri01;
	SQLFLOAT km_kyu011;
	SQLFLOAT km_kyu012;
	SQLFLOAT km_kyu013;
	SQLFLOAT km_kyu021;
	SQLFLOAT km_kyu022;
	SQLFLOAT km_kyu023;
	SQLFLOAT km_kyu031;
	SQLFLOAT km_kyu032;
	SQLFLOAT km_kyu033;
	SQLFLOAT km_kyu014;
	SQLFLOAT km_kyu015;
	SQLFLOAT km_kyu016;
	SQLFLOAT km_kyu024;
	SQLFLOAT km_kyu025;
	SQLFLOAT km_kyu026;
	SQLFLOAT km_kyu034;
	SQLFLOAT km_kyu035;
	SQLFLOAT km_kyu036;
	SQLFLOAT km_kyuyokei;
	SQLFLOAT km_syaho02;
	SQLFLOAT km_koyou02;
	SQLFLOAT km_kyosai02;
	SQLFLOAT km_fukuri02;
	SQLFLOAT km_kyuyosou;
	SQLFLOAT km_rousaihoken;
	SQLFLOAT km_kks01;
	SQLFLOAT km_kks02;
	SQLFLOAT km_kks03;
	SQLFLOAT km_kks04;
	SQLFLOAT km_chidai;
	SQLFLOAT km_kukakin;
	SQLFLOAT km_tusin;
	SQLFLOAT km_hokenryo;
	SQLFLOAT km_zappi;
	SQLFLOAT km_sonota;
	SQLFLOAT km_corins;
	SQLFLOAT km_kaigihi;
	SQLFLOAT km_kaihi;
	SQLFLOAT km_anzen;
	SQLFLOAT km_kousai;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_bikou1;
	std::string km_bikou2;
	std::string km_nyuno;
	SQLFLOAT km_syouhizei;
	TIMESTAMP_STRUCT km_mitsumori;
	SQLFLOAT km_ritsu;
	SQLINTEGER km_ukeoi;
	SQLINTEGER km_ten;
	SQLINTEGER se_Id;
	SQLINTEGER se_kouji;
	TIMESTAMP_STRUCT se_date;
	std::string se_name;
	SQL_NUMERIC_STRUCT se_nuki;
	SQL_NUMERIC_STRUCT se_zei;
	SQL_NUMERIC_STRUCT se_komi;
	SQLINTEGER se_kubun;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_keiyaku;
		} break;
		case 8: {
			ss << this->km_tsuika;
		} break;
		case 9: {
			ss << this->km_goukei;
		} break;
		case 10: {
			ss << this->km_yosan;
		} break;
		case 11: {
			ss << this->km_genka;
		} break;
		case 12: {
			COdbcDateTime date(&this->km_keidate);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->km_kaisi);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->km_owari);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->km_tyakou);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->km_kansei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->km_kensa);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->km_syoken;
		} break;
		case 19: {
			ss << this->km_zai00;
		} break;
		case 20: {
			ss << this->km_zai01;
		} break;
		case 21: {
			ss << this->km_zai02;
		} break;
		case 22: {
			ss << this->km_zai03;
		} break;
		case 23: {
			ss << this->km_zai04;
		} break;
		case 24: {
			ss << this->km_rou01;
		} break;
		case 25: {
			ss << this->km_rou02;
		} break;
		case 26: {
			ss << this->km_rou03;
		} break;
		case 27: {
			ss << this->km_rou04;
		} break;
		case 28: {
			ss << this->km_gai01;
		} break;
		case 29: {
			ss << this->km_gai02;
		} break;
		case 30: {
			ss << this->km_gai03;
		} break;
		case 31: {
			ss << this->km_gai04;
		} break;
		case 32: {
			ss << this->km_kik01;
		} break;
		case 33: {
			ss << this->km_kik02;
		} break;
		case 34: {
			ss << this->km_kik03;
		} break;
		case 35: {
			ss << this->km_kik04;
		} break;
		case 36: {
			ss << this->km_kas01;
		} break;
		case 37: {
			ss << this->km_kas02;
		} break;
		case 38: {
			ss << this->km_kas03;
		} break;
		case 39: {
			ss << this->km_kas04;
		} break;
		case 40: {
			ss << this->km_kyuyo01;
		} break;
		case 41: {
			ss << this->km_kyuyo02;
		} break;
		case 42: {
			ss << this->km_kyuyo03;
		} break;
		case 43: {
			ss << this->km_kyuyo04;
		} break;
		case 44: {
			ss << this->km_tyo01;
		} break;
		case 45: {
			ss << this->km_tyo02;
		} break;
		case 46: {
			ss << this->km_tyo03;
		} break;
		case 47: {
			ss << this->km_tyo04;
		} break;
		case 48: {
			ss << this->km_kan01;
		} break;
		case 49: {
			ss << this->km_kan02;
		} break;
		case 50: {
			ss << this->km_gou01;
		} break;
		case 51: {
			ss << this->km_gou02;
		} break;
		case 52: {
			ss << this->km_gou03;
		} break;
		case 53: {
			ss << this->km_gou04;
		} break;
		case 54: {
			ss << this->km_yos01;
		} break;
		case 55: {
			ss << this->km_yos02;
		} break;
		case 56: {
			ss << this->km_yos03;
		} break;
		case 57: {
			ss << this->km_yos04;
		} break;
		case 58: {
			ss << this->km_ipn01;
		} break;
		case 59: {
			ss << this->km_ipn02;
		} break;
		case 60: {
			ss << this->km_yosankei;
		} break;
		case 61: {
			ss << this->km_zisekikei;
		} break;
		case 62: {
			ss << this->km_rie01;
		} break;
		case 63: {
			ss << this->km_rie02;
		} break;
		case 64: {
			ss << this->km_rie03;
		} break;
		case 65: {
			ss << this->km_rie04;
		} break;
		case 66: {
			ss << this->km_hok01;
		} break;
		case 67: {
			ss << this->km_hok02;
		} break;
		case 68: {
			ss << this->km_nen;
		} break;
		case 69: {
			ss << this->km_tuk;
		} break;
		case 70: {
			ss << this->km_sya011;
		} break;
		case 71: {
			ss << this->km_sya012;
		} break;
		case 72: {
			ss << this->km_sya021;
		} break;
		case 73: {
			ss << this->km_sya022;
		} break;
		case 74: {
			ss << this->km_sya031;
		} break;
		case 75: {
			ss << this->km_sya032;
		} break;
		case 76: {
			ss << this->km_nendo;
		} break;
		case 77: {
			ss << this->km_kei01;
		} break;
		case 78: {
			ss << this->km_kei02;
		} break;
		case 79: {
			ss << this->km_man01;
		} break;
		case 80: {
			ss << this->km_man02;
		} break;
		case 81: {
			ss << this->km_man03;
		} break;
		case 82: {
			ss << this->km_man04;
		} break;
		case 83: {
			ss << this->km_man05;
		} break;
		case 84: {
			ss << this->km_wom01;
		} break;
		case 85: {
			ss << this->km_wom02;
		} break;
		case 86: {
			ss << this->km_wom03;
		} break;
		case 87: {
			ss << this->km_wom04;
		} break;
		case 88: {
			ss << this->km_wom05;
		} break;
		case 89: {
			ss << this->km_syoteate;
		} break;
		case 90: {
			ss << this->km_tingin;
		} break;
		case 91: {
			ss << this->km_syaho01;
		} break;
		case 92: {
			ss << this->km_koyou01;
		} break;
		case 93: {
			ss << this->km_kyosai01;
		} break;
		case 94: {
			ss << this->km_fukuri01;
		} break;
		case 95: {
			ss << this->km_kyu011;
		} break;
		case 96: {
			ss << this->km_kyu012;
		} break;
		case 97: {
			ss << this->km_kyu013;
		} break;
		case 98: {
			ss << this->km_kyu021;
		} break;
		case 99: {
			ss << this->km_kyu022;
		} break;
		case 100: {
			ss << this->km_kyu023;
		} break;
		case 101: {
			ss << this->km_kyu031;
		} break;
		case 102: {
			ss << this->km_kyu032;
		} break;
		case 103: {
			ss << this->km_kyu033;
		} break;
		case 104: {
			ss << this->km_kyu014;
		} break;
		case 105: {
			ss << this->km_kyu015;
		} break;
		case 106: {
			ss << this->km_kyu016;
		} break;
		case 107: {
			ss << this->km_kyu024;
		} break;
		case 108: {
			ss << this->km_kyu025;
		} break;
		case 109: {
			ss << this->km_kyu026;
		} break;
		case 110: {
			ss << this->km_kyu034;
		} break;
		case 111: {
			ss << this->km_kyu035;
		} break;
		case 112: {
			ss << this->km_kyu036;
		} break;
		case 113: {
			ss << this->km_kyuyokei;
		} break;
		case 114: {
			ss << this->km_syaho02;
		} break;
		case 115: {
			ss << this->km_koyou02;
		} break;
		case 116: {
			ss << this->km_kyosai02;
		} break;
		case 117: {
			ss << this->km_fukuri02;
		} break;
		case 118: {
			ss << this->km_kyuyosou;
		} break;
		case 119: {
			ss << this->km_rousaihoken;
		} break;
		case 120: {
			ss << this->km_kks01;
		} break;
		case 121: {
			ss << this->km_kks02;
		} break;
		case 122: {
			ss << this->km_kks03;
		} break;
		case 123: {
			ss << this->km_kks04;
		} break;
		case 124: {
			ss << this->km_chidai;
		} break;
		case 125: {
			ss << this->km_kukakin;
		} break;
		case 126: {
			ss << this->km_tusin;
		} break;
		case 127: {
			ss << this->km_hokenryo;
		} break;
		case 128: {
			ss << this->km_zappi;
		} break;
		case 129: {
			ss << this->km_sonota;
		} break;
		case 130: {
			ss << this->km_corins;
		} break;
		case 131: {
			ss << this->km_kaigihi;
		} break;
		case 132: {
			ss << this->km_kaihi;
		} break;
		case 133: {
			ss << this->km_anzen;
		} break;
		case 134: {
			ss << this->km_kousai;
		} break;
		case 135: {
			ss << this->km_hat030;
		} break;
		case 136: {
			ss << this->km_hat040;
		} break;
		case 137: {
			ss << this->km_hat050;
		} break;
		case 138: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 139: {
			ss << this->km_sw;
		} break;
		case 140: {
			ss << this->km_bikou1;
		} break;
		case 141: {
			ss << this->km_bikou2;
		} break;
		case 142: {
			ss << this->km_nyuno;
		} break;
		case 143: {
			ss << this->km_syouhizei;
		} break;
		case 144: {
			COdbcDateTime date(&this->km_mitsumori);
			ss << date.to_string();
		} break;
		case 145: {
			ss << this->km_ritsu;
		} break;
		case 146: {
			ss << this->km_ukeoi;
		} break;
		case 147: {
			ss << this->km_ten;
		} break;
		case 148: {
			ss << this->se_Id;
		} break;
		case 149: {
			ss << this->se_kouji;
		} break;
		case 150: {
			COdbcDateTime date(&this->se_date);
			ss << date.to_string();
		} break;
		case 151: {
			ss << this->se_name;
		} break;
		case 152: {
			ss << COdbcColumn::NumericToString(&this->se_nuki);
		} break;
		case 153: {
			ss << COdbcColumn::NumericToString(&this->se_zei);
		} break;
		case 154: {
			ss << COdbcColumn::NumericToString(&this->se_komi);
		} break;
		case 155: {
			ss << this->se_kubun;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_seikyu : public COdbcTable {
public:
	CT_v_seikyu() : COdbcTable() {
		m_TableName = "v_seikyu";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "km_syoken,"
					  "km_zai00,"
					  "km_zai01,"
					  "km_zai02,"
					  "km_zai03,"
					  "km_zai04,"
					  "km_rou01,"
					  "km_rou02,"
					  "km_rou03,"
					  "km_rou04,"
					  "km_gai01,"
					  "km_gai02,"
					  "km_gai03,"
					  "km_gai04,"
					  "km_kik01,"
					  "km_kik02,"
					  "km_kik03,"
					  "km_kik04,"
					  "km_kas01,"
					  "km_kas02,"
					  "km_kas03,"
					  "km_kas04,"
					  "km_kyuyo01,"
					  "km_kyuyo02,"
					  "km_kyuyo03,"
					  "km_kyuyo04,"
					  "km_tyo01,"
					  "km_tyo02,"
					  "km_tyo03,"
					  "km_tyo04,"
					  "km_kan01,"
					  "km_kan02,"
					  "km_gou01,"
					  "km_gou02,"
					  "km_gou03,"
					  "km_gou04,"
					  "km_yos01,"
					  "km_yos02,"
					  "km_yos03,"
					  "km_yos04,"
					  "km_ipn01,"
					  "km_ipn02,"
					  "km_yosankei,"
					  "km_zisekikei,"
					  "km_rie01,"
					  "km_rie02,"
					  "km_rie03,"
					  "km_rie04,"
					  "km_hok01,"
					  "km_hok02,"
					  "km_nen,"
					  "km_tuk,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_sya031,"
					  "km_sya032,"
					  "km_nendo,"
					  "km_kei01,"
					  "km_kei02,"
					  "km_man01,"
					  "km_man02,"
					  "km_man03,"
					  "km_man04,"
					  "km_man05,"
					  "km_wom01,"
					  "km_wom02,"
					  "km_wom03,"
					  "km_wom04,"
					  "km_wom05,"
					  "km_syoteate,"
					  "km_tingin,"
					  "km_syaho01,"
					  "km_koyou01,"
					  "km_kyosai01,"
					  "km_fukuri01,"
					  "km_kyu011,"
					  "km_kyu012,"
					  "km_kyu013,"
					  "km_kyu021,"
					  "km_kyu022,"
					  "km_kyu023,"
					  "km_kyu031,"
					  "km_kyu032,"
					  "km_kyu033,"
					  "km_kyu014,"
					  "km_kyu015,"
					  "km_kyu016,"
					  "km_kyu024,"
					  "km_kyu025,"
					  "km_kyu026,"
					  "km_kyu034,"
					  "km_kyu035,"
					  "km_kyu036,"
					  "km_kyuyokei,"
					  "km_syaho02,"
					  "km_koyou02,"
					  "km_kyosai02,"
					  "km_fukuri02,"
					  "km_kyuyosou,"
					  "km_rousaihoken,"
					  "km_kks01,"
					  "km_kks02,"
					  "km_kks03,"
					  "km_kks04,"
					  "km_chidai,"
					  "km_kukakin,"
					  "km_tusin,"
					  "km_hokenryo,"
					  "km_zappi,"
					  "km_sonota,"
					  "km_corins,"
					  "km_kaigihi,"
					  "km_kaihi,"
					  "km_anzen,"
					  "km_kousai,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu,"
					  "km_ukeoi,"
					  "km_ten,"
					  "se_Id,"
					  "se_kouji,"
					  "se_date,"
					  "se_name,"
					  "se_nuki,"
					  "se_zei,"
					  "se_komi,"
					  "se_kubun"
					  " FROM v_seikyu";
		m_SqlINSERT =
			"INSERT INTO v_seikyu ("
			"km_index,"
			"km_name,"
			"km_no,"
			"km_syucd,"
			"km_kosyu,"
			"km_hatcd,"
			"km_hat02,"
			"km_keiyaku,"
			"km_tsuika,"
			"km_goukei,"
			"km_yosan,"
			"km_genka,"
			"km_keidate,"
			"km_kaisi,"
			"km_owari,"
			"km_tyakou,"
			"km_kansei,"
			"km_kensa,"
			"km_syoken,"
			"km_zai00,"
			"km_zai01,"
			"km_zai02,"
			"km_zai03,"
			"km_zai04,"
			"km_rou01,"
			"km_rou02,"
			"km_rou03,"
			"km_rou04,"
			"km_gai01,"
			"km_gai02,"
			"km_gai03,"
			"km_gai04,"
			"km_kik01,"
			"km_kik02,"
			"km_kik03,"
			"km_kik04,"
			"km_kas01,"
			"km_kas02,"
			"km_kas03,"
			"km_kas04,"
			"km_kyuyo01,"
			"km_kyuyo02,"
			"km_kyuyo03,"
			"km_kyuyo04,"
			"km_tyo01,"
			"km_tyo02,"
			"km_tyo03,"
			"km_tyo04,"
			"km_kan01,"
			"km_kan02,"
			"km_gou01,"
			"km_gou02,"
			"km_gou03,"
			"km_gou04,"
			"km_yos01,"
			"km_yos02,"
			"km_yos03,"
			"km_yos04,"
			"km_ipn01,"
			"km_ipn02,"
			"km_yosankei,"
			"km_zisekikei,"
			"km_rie01,"
			"km_rie02,"
			"km_rie03,"
			"km_rie04,"
			"km_hok01,"
			"km_hok02,"
			"km_nen,"
			"km_tuk,"
			"km_sya011,"
			"km_sya012,"
			"km_sya021,"
			"km_sya022,"
			"km_sya031,"
			"km_sya032,"
			"km_nendo,"
			"km_kei01,"
			"km_kei02,"
			"km_man01,"
			"km_man02,"
			"km_man03,"
			"km_man04,"
			"km_man05,"
			"km_wom01,"
			"km_wom02,"
			"km_wom03,"
			"km_wom04,"
			"km_wom05,"
			"km_syoteate,"
			"km_tingin,"
			"km_syaho01,"
			"km_koyou01,"
			"km_kyosai01,"
			"km_fukuri01,"
			"km_kyu011,"
			"km_kyu012,"
			"km_kyu013,"
			"km_kyu021,"
			"km_kyu022,"
			"km_kyu023,"
			"km_kyu031,"
			"km_kyu032,"
			"km_kyu033,"
			"km_kyu014,"
			"km_kyu015,"
			"km_kyu016,"
			"km_kyu024,"
			"km_kyu025,"
			"km_kyu026,"
			"km_kyu034,"
			"km_kyu035,"
			"km_kyu036,"
			"km_kyuyokei,"
			"km_syaho02,"
			"km_koyou02,"
			"km_kyosai02,"
			"km_fukuri02,"
			"km_kyuyosou,"
			"km_rousaihoken,"
			"km_kks01,"
			"km_kks02,"
			"km_kks03,"
			"km_kks04,"
			"km_chidai,"
			"km_kukakin,"
			"km_tusin,"
			"km_hokenryo,"
			"km_zappi,"
			"km_sonota,"
			"km_corins,"
			"km_kaigihi,"
			"km_kaihi,"
			"km_anzen,"
			"km_kousai,"
			"km_hat030,"
			"km_hat040,"
			"km_hat050,"
			"km_nyuudat,"
			"km_sw,"
			"km_bikou1,"
			"km_bikou2,"
			"km_nyuno,"
			"km_syouhizei,"
			"km_mitsumori,"
			"km_ritsu,"
			"km_ukeoi,"
			"km_ten,"
			"se_Id,"
			"se_kouji,"
			"se_date,"
			"se_name,"
			"se_nuki,"
			"se_zei,"
			"se_komi,"
			"se_kubun)"
			" VALUES ( "
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_seikyu SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_kensa = ?,"
					  "km_syoken = ?,"
					  "km_zai00 = ?,"
					  "km_zai01 = ?,"
					  "km_zai02 = ?,"
					  "km_zai03 = ?,"
					  "km_zai04 = ?,"
					  "km_rou01 = ?,"
					  "km_rou02 = ?,"
					  "km_rou03 = ?,"
					  "km_rou04 = ?,"
					  "km_gai01 = ?,"
					  "km_gai02 = ?,"
					  "km_gai03 = ?,"
					  "km_gai04 = ?,"
					  "km_kik01 = ?,"
					  "km_kik02 = ?,"
					  "km_kik03 = ?,"
					  "km_kik04 = ?,"
					  "km_kas01 = ?,"
					  "km_kas02 = ?,"
					  "km_kas03 = ?,"
					  "km_kas04 = ?,"
					  "km_kyuyo01 = ?,"
					  "km_kyuyo02 = ?,"
					  "km_kyuyo03 = ?,"
					  "km_kyuyo04 = ?,"
					  "km_tyo01 = ?,"
					  "km_tyo02 = ?,"
					  "km_tyo03 = ?,"
					  "km_tyo04 = ?,"
					  "km_kan01 = ?,"
					  "km_kan02 = ?,"
					  "km_gou01 = ?,"
					  "km_gou02 = ?,"
					  "km_gou03 = ?,"
					  "km_gou04 = ?,"
					  "km_yos01 = ?,"
					  "km_yos02 = ?,"
					  "km_yos03 = ?,"
					  "km_yos04 = ?,"
					  "km_ipn01 = ?,"
					  "km_ipn02 = ?,"
					  "km_yosankei = ?,"
					  "km_zisekikei = ?,"
					  "km_rie01 = ?,"
					  "km_rie02 = ?,"
					  "km_rie03 = ?,"
					  "km_rie04 = ?,"
					  "km_hok01 = ?,"
					  "km_hok02 = ?,"
					  "km_nen = ?,"
					  "km_tuk = ?,"
					  "km_sya011 = ?,"
					  "km_sya012 = ?,"
					  "km_sya021 = ?,"
					  "km_sya022 = ?,"
					  "km_sya031 = ?,"
					  "km_sya032 = ?,"
					  "km_nendo = ?,"
					  "km_kei01 = ?,"
					  "km_kei02 = ?,"
					  "km_man01 = ?,"
					  "km_man02 = ?,"
					  "km_man03 = ?,"
					  "km_man04 = ?,"
					  "km_man05 = ?,"
					  "km_wom01 = ?,"
					  "km_wom02 = ?,"
					  "km_wom03 = ?,"
					  "km_wom04 = ?,"
					  "km_wom05 = ?,"
					  "km_syoteate = ?,"
					  "km_tingin = ?,"
					  "km_syaho01 = ?,"
					  "km_koyou01 = ?,"
					  "km_kyosai01 = ?,"
					  "km_fukuri01 = ?,"
					  "km_kyu011 = ?,"
					  "km_kyu012 = ?,"
					  "km_kyu013 = ?,"
					  "km_kyu021 = ?,"
					  "km_kyu022 = ?,"
					  "km_kyu023 = ?,"
					  "km_kyu031 = ?,"
					  "km_kyu032 = ?,"
					  "km_kyu033 = ?,"
					  "km_kyu014 = ?,"
					  "km_kyu015 = ?,"
					  "km_kyu016 = ?,"
					  "km_kyu024 = ?,"
					  "km_kyu025 = ?,"
					  "km_kyu026 = ?,"
					  "km_kyu034 = ?,"
					  "km_kyu035 = ?,"
					  "km_kyu036 = ?,"
					  "km_kyuyokei = ?,"
					  "km_syaho02 = ?,"
					  "km_koyou02 = ?,"
					  "km_kyosai02 = ?,"
					  "km_fukuri02 = ?,"
					  "km_kyuyosou = ?,"
					  "km_rousaihoken = ?,"
					  "km_kks01 = ?,"
					  "km_kks02 = ?,"
					  "km_kks03 = ?,"
					  "km_kks04 = ?,"
					  "km_chidai = ?,"
					  "km_kukakin = ?,"
					  "km_tusin = ?,"
					  "km_hokenryo = ?,"
					  "km_zappi = ?,"
					  "km_sonota = ?,"
					  "km_corins = ?,"
					  "km_kaigihi = ?,"
					  "km_kaihi = ?,"
					  "km_anzen = ?,"
					  "km_kousai = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuno = ?,"
					  "km_syouhizei = ?,"
					  "km_mitsumori = ?,"
					  "km_ritsu = ?,"
					  "km_ukeoi = ?,"
					  "km_ten = ?,"
					  "se_Id = ?,"
					  "se_kouji = ?,"
					  "se_date = ?,"
					  "se_name = ?,"
					  "se_nuki = ?,"
					  "se_zei = ?,"
					  "se_komi = ?,"
					  "se_kubun = ?";

		m_SqlDELETE = "DELETE v_seikyu ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_index", "1", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_tsuika", "9", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_goukei", "10", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_keidate", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kaisi", "14", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_owari", "15", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_tyakou", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kansei", "17", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kensa", "18", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_syoken", "19", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_zai00", "20", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_zai01", "21", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_zai02", "22", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_zai03", "23", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_zai04", "24", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_rou01", "25", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_rou02", "26", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_rou03", "27", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_rou04", "28", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_gai01", "29", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_gai02", "30", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_gai03", "31", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_gai04", "32", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kik01", "33", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kik02", "34", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kik03", "35", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kik04", "36", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kas01", "37", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kas02", "38", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kas03", "39", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kas04", "40", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyuyo01", "41", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyuyo02", "42", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyuyo03", "43", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyuyo04", "44", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_tyo01", "45", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_tyo02", "46", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_tyo03", "47", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_tyo04", "48", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kan01", "49", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kan02", "50", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_gou01", "51", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_gou02", "52", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_gou03", "53", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_gou04", "54", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_yos01", "55", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_yos02", "56", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_yos03", "57", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_yos04", "58", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_ipn01", "59", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_ipn02", "60", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_yosankei", "61", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_zisekikei", "62", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_rie01", "63", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_rie02", "64", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_rie03", "65", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_rie04", "66", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_hok01", "67", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_hok02", "68", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_nen", "69", "", "YES", "smallint", "0", "0", "5", "0", "0", "",
					 "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_tuk", "70", "", "YES", "smallint", "0", "0", "5", "0", "0", "",
					 "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_sya011", "71", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_sya012", "72", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_sya021", "73", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_sya022", "74", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_sya031", "75", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_sya032", "76", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_nendo", "77", "", "YES", "smallint", "0", "0", "5", "0", "0", "",
					 "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kei01", "78", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kei02", "79", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_man01", "80", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_man02", "81", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_man03", "82", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_man04", "83", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_man05", "84", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_wom01", "85", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_wom02", "86", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_wom03", "87", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_wom04", "88", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_wom05", "89", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_syoteate", "90", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_tingin", "91", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_syaho01", "92", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_koyou01", "93", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyosai01", "94", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_fukuri01", "95", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu011", "96", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu012", "97", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu013", "98", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu021", "99", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu022", "100", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu023", "101", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu031", "102", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu032", "103", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu033", "104", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu014", "105", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu015", "106", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu016", "107", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu024", "108", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu025", "109", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu026", "110", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu034", "111", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu035", "112", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyu036", "113", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyuyokei", "114", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_syaho02", "115", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_koyou02", "116", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyosai02", "117", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_fukuri02", "118", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kyuyosou", "119", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_rousaihoken", "120", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kks01", "121", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kks02", "122", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kks03", "123", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kks04", "124", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_chidai", "125", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kukakin", "126", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_tusin", "127", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_hokenryo", "128", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_zappi", "129", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_sonota", "130", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_corins", "131", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kaigihi", "132", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kaihi", "133", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_anzen", "134", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_kousai", "135", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_hat030", "136", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_hat040", "137", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_hat050", "138", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_nyuudat", "139", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_sw", "140", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_bikou1", "141", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_bikou2", "142", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_nyuno", "143", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_syouhizei", "144", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_mitsumori", "145", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_ritsu", "146", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_ukeoi", "147", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "km_ten", "148", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "se_Id", "149", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "se_kouji", "150", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "se_date", "151", "", "NO", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "se_name", "152", "", "YES", "nvarchar", "-1", "-1", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "se_nuki", "153", "", "YES", "decimal", "0", "0", "18", "0", "0", "",
					 "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "se_zei", "154", "", "YES", "decimal", "0", "0", "18", "0", "0", "",
					 "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "se_komi", "155", "", "YES", "decimal", "0", "0", "18", "0", "0", "",
					 "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_seikyu", "se_kubun", "156", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_seikyu() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_syoken = new char[MAXBUF];
		char *km_sya012 = new char[81];
		char *km_sya022 = new char[81];
		char *km_sya032 = new char[81];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		char *se_name = new char[0];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_seikyu rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				com->GetData(8, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.km_keidate, sizeof(rec.km_keidate), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.km_kaisi, sizeof(rec.km_kaisi), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.km_owari, sizeof(rec.km_owari), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.km_tyakou, sizeof(rec.km_tyakou), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.km_kansei, sizeof(rec.km_kansei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.km_kensa, sizeof(rec.km_kensa), 0);
				memset(km_syoken, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, km_syoken, 1048576, 0);
				rec.km_syoken = (char *)km_syoken;
				com->GetData(20, SQL_C_DOUBLE, &rec.km_zai00, sizeof(rec.km_zai00), 0);
				com->GetData(21, SQL_C_DOUBLE, &rec.km_zai01, sizeof(rec.km_zai01), 0);
				com->GetData(22, SQL_C_DOUBLE, &rec.km_zai02, sizeof(rec.km_zai02), 0);
				com->GetData(23, SQL_C_DOUBLE, &rec.km_zai03, sizeof(rec.km_zai03), 0);
				com->GetData(24, SQL_C_DOUBLE, &rec.km_zai04, sizeof(rec.km_zai04), 0);
				com->GetData(25, SQL_C_DOUBLE, &rec.km_rou01, sizeof(rec.km_rou01), 0);
				com->GetData(26, SQL_C_DOUBLE, &rec.km_rou02, sizeof(rec.km_rou02), 0);
				com->GetData(27, SQL_C_DOUBLE, &rec.km_rou03, sizeof(rec.km_rou03), 0);
				com->GetData(28, SQL_C_DOUBLE, &rec.km_rou04, sizeof(rec.km_rou04), 0);
				com->GetData(29, SQL_C_DOUBLE, &rec.km_gai01, sizeof(rec.km_gai01), 0);
				com->GetData(30, SQL_C_DOUBLE, &rec.km_gai02, sizeof(rec.km_gai02), 0);
				com->GetData(31, SQL_C_DOUBLE, &rec.km_gai03, sizeof(rec.km_gai03), 0);
				com->GetData(32, SQL_C_DOUBLE, &rec.km_gai04, sizeof(rec.km_gai04), 0);
				com->GetData(33, SQL_C_DOUBLE, &rec.km_kik01, sizeof(rec.km_kik01), 0);
				com->GetData(34, SQL_C_DOUBLE, &rec.km_kik02, sizeof(rec.km_kik02), 0);
				com->GetData(35, SQL_C_DOUBLE, &rec.km_kik03, sizeof(rec.km_kik03), 0);
				com->GetData(36, SQL_C_DOUBLE, &rec.km_kik04, sizeof(rec.km_kik04), 0);
				com->GetData(37, SQL_C_DOUBLE, &rec.km_kas01, sizeof(rec.km_kas01), 0);
				com->GetData(38, SQL_C_DOUBLE, &rec.km_kas02, sizeof(rec.km_kas02), 0);
				com->GetData(39, SQL_C_DOUBLE, &rec.km_kas03, sizeof(rec.km_kas03), 0);
				com->GetData(40, SQL_C_DOUBLE, &rec.km_kas04, sizeof(rec.km_kas04), 0);
				com->GetData(41, SQL_C_DOUBLE, &rec.km_kyuyo01, sizeof(rec.km_kyuyo01), 0);
				com->GetData(42, SQL_C_DOUBLE, &rec.km_kyuyo02, sizeof(rec.km_kyuyo02), 0);
				com->GetData(43, SQL_C_DOUBLE, &rec.km_kyuyo03, sizeof(rec.km_kyuyo03), 0);
				com->GetData(44, SQL_C_DOUBLE, &rec.km_kyuyo04, sizeof(rec.km_kyuyo04), 0);
				com->GetData(45, SQL_C_DOUBLE, &rec.km_tyo01, sizeof(rec.km_tyo01), 0);
				com->GetData(46, SQL_C_DOUBLE, &rec.km_tyo02, sizeof(rec.km_tyo02), 0);
				com->GetData(47, SQL_C_DOUBLE, &rec.km_tyo03, sizeof(rec.km_tyo03), 0);
				com->GetData(48, SQL_C_DOUBLE, &rec.km_tyo04, sizeof(rec.km_tyo04), 0);
				com->GetData(49, SQL_C_DOUBLE, &rec.km_kan01, sizeof(rec.km_kan01), 0);
				com->GetData(50, SQL_C_DOUBLE, &rec.km_kan02, sizeof(rec.km_kan02), 0);
				com->GetData(51, SQL_C_DOUBLE, &rec.km_gou01, sizeof(rec.km_gou01), 0);
				com->GetData(52, SQL_C_DOUBLE, &rec.km_gou02, sizeof(rec.km_gou02), 0);
				com->GetData(53, SQL_C_DOUBLE, &rec.km_gou03, sizeof(rec.km_gou03), 0);
				com->GetData(54, SQL_C_DOUBLE, &rec.km_gou04, sizeof(rec.km_gou04), 0);
				com->GetData(55, SQL_C_DOUBLE, &rec.km_yos01, sizeof(rec.km_yos01), 0);
				com->GetData(56, SQL_C_DOUBLE, &rec.km_yos02, sizeof(rec.km_yos02), 0);
				com->GetData(57, SQL_C_DOUBLE, &rec.km_yos03, sizeof(rec.km_yos03), 0);
				com->GetData(58, SQL_C_DOUBLE, &rec.km_yos04, sizeof(rec.km_yos04), 0);
				com->GetData(59, SQL_C_DOUBLE, &rec.km_ipn01, sizeof(rec.km_ipn01), 0);
				com->GetData(60, SQL_C_DOUBLE, &rec.km_ipn02, sizeof(rec.km_ipn02), 0);
				com->GetData(61, SQL_C_DOUBLE, &rec.km_yosankei, sizeof(rec.km_yosankei), 0);
				com->GetData(62, SQL_C_DOUBLE, &rec.km_zisekikei, sizeof(rec.km_zisekikei), 0);
				com->GetData(63, SQL_C_DOUBLE, &rec.km_rie01, sizeof(rec.km_rie01), 0);
				com->GetData(64, SQL_C_DOUBLE, &rec.km_rie02, sizeof(rec.km_rie02), 0);
				com->GetData(65, SQL_C_DOUBLE, &rec.km_rie03, sizeof(rec.km_rie03), 0);
				com->GetData(66, SQL_C_DOUBLE, &rec.km_rie04, sizeof(rec.km_rie04), 0);
				com->GetData(67, SQL_C_DOUBLE, &rec.km_hok01, sizeof(rec.km_hok01), 0);
				com->GetData(68, SQL_C_DOUBLE, &rec.km_hok02, sizeof(rec.km_hok02), 0);
				com->GetData(69, SQL_C_SHORT, &rec.km_nen, sizeof(rec.km_nen), 0);
				com->GetData(70, SQL_C_SHORT, &rec.km_tuk, sizeof(rec.km_tuk), 0);
				com->GetData(71, SQL_C_LONG, &rec.km_sya011, sizeof(rec.km_sya011), 0);
				memset(km_sya012, 0, 81);
				com->GetData(72, SQL_C_CHAR, km_sya012, 81, 0);
				rec.km_sya012 = (char *)km_sya012;
				com->GetData(73, SQL_C_LONG, &rec.km_sya021, sizeof(rec.km_sya021), 0);
				memset(km_sya022, 0, 81);
				com->GetData(74, SQL_C_CHAR, km_sya022, 81, 0);
				rec.km_sya022 = (char *)km_sya022;
				com->GetData(75, SQL_C_LONG, &rec.km_sya031, sizeof(rec.km_sya031), 0);
				memset(km_sya032, 0, 81);
				com->GetData(76, SQL_C_CHAR, km_sya032, 81, 0);
				rec.km_sya032 = (char *)km_sya032;
				com->GetData(77, SQL_C_SHORT, &rec.km_nendo, sizeof(rec.km_nendo), 0);
				com->GetData(78, SQL_C_DOUBLE, &rec.km_kei01, sizeof(rec.km_kei01), 0);
				com->GetData(79, SQL_C_DOUBLE, &rec.km_kei02, sizeof(rec.km_kei02), 0);
				com->GetData(80, SQL_C_DOUBLE, &rec.km_man01, sizeof(rec.km_man01), 0);
				com->GetData(81, SQL_C_DOUBLE, &rec.km_man02, sizeof(rec.km_man02), 0);
				com->GetData(82, SQL_C_DOUBLE, &rec.km_man03, sizeof(rec.km_man03), 0);
				com->GetData(83, SQL_C_DOUBLE, &rec.km_man04, sizeof(rec.km_man04), 0);
				com->GetData(84, SQL_C_DOUBLE, &rec.km_man05, sizeof(rec.km_man05), 0);
				com->GetData(85, SQL_C_DOUBLE, &rec.km_wom01, sizeof(rec.km_wom01), 0);
				com->GetData(86, SQL_C_DOUBLE, &rec.km_wom02, sizeof(rec.km_wom02), 0);
				com->GetData(87, SQL_C_DOUBLE, &rec.km_wom03, sizeof(rec.km_wom03), 0);
				com->GetData(88, SQL_C_DOUBLE, &rec.km_wom04, sizeof(rec.km_wom04), 0);
				com->GetData(89, SQL_C_DOUBLE, &rec.km_wom05, sizeof(rec.km_wom05), 0);
				com->GetData(90, SQL_C_DOUBLE, &rec.km_syoteate, sizeof(rec.km_syoteate), 0);
				com->GetData(91, SQL_C_DOUBLE, &rec.km_tingin, sizeof(rec.km_tingin), 0);
				com->GetData(92, SQL_C_DOUBLE, &rec.km_syaho01, sizeof(rec.km_syaho01), 0);
				com->GetData(93, SQL_C_DOUBLE, &rec.km_koyou01, sizeof(rec.km_koyou01), 0);
				com->GetData(94, SQL_C_DOUBLE, &rec.km_kyosai01, sizeof(rec.km_kyosai01), 0);
				com->GetData(95, SQL_C_DOUBLE, &rec.km_fukuri01, sizeof(rec.km_fukuri01), 0);
				com->GetData(96, SQL_C_DOUBLE, &rec.km_kyu011, sizeof(rec.km_kyu011), 0);
				com->GetData(97, SQL_C_DOUBLE, &rec.km_kyu012, sizeof(rec.km_kyu012), 0);
				com->GetData(98, SQL_C_DOUBLE, &rec.km_kyu013, sizeof(rec.km_kyu013), 0);
				com->GetData(99, SQL_C_DOUBLE, &rec.km_kyu021, sizeof(rec.km_kyu021), 0);
				com->GetData(100, SQL_C_DOUBLE, &rec.km_kyu022, sizeof(rec.km_kyu022), 0);
				com->GetData(101, SQL_C_DOUBLE, &rec.km_kyu023, sizeof(rec.km_kyu023), 0);
				com->GetData(102, SQL_C_DOUBLE, &rec.km_kyu031, sizeof(rec.km_kyu031), 0);
				com->GetData(103, SQL_C_DOUBLE, &rec.km_kyu032, sizeof(rec.km_kyu032), 0);
				com->GetData(104, SQL_C_DOUBLE, &rec.km_kyu033, sizeof(rec.km_kyu033), 0);
				com->GetData(105, SQL_C_DOUBLE, &rec.km_kyu014, sizeof(rec.km_kyu014), 0);
				com->GetData(106, SQL_C_DOUBLE, &rec.km_kyu015, sizeof(rec.km_kyu015), 0);
				com->GetData(107, SQL_C_DOUBLE, &rec.km_kyu016, sizeof(rec.km_kyu016), 0);
				com->GetData(108, SQL_C_DOUBLE, &rec.km_kyu024, sizeof(rec.km_kyu024), 0);
				com->GetData(109, SQL_C_DOUBLE, &rec.km_kyu025, sizeof(rec.km_kyu025), 0);
				com->GetData(110, SQL_C_DOUBLE, &rec.km_kyu026, sizeof(rec.km_kyu026), 0);
				com->GetData(111, SQL_C_DOUBLE, &rec.km_kyu034, sizeof(rec.km_kyu034), 0);
				com->GetData(112, SQL_C_DOUBLE, &rec.km_kyu035, sizeof(rec.km_kyu035), 0);
				com->GetData(113, SQL_C_DOUBLE, &rec.km_kyu036, sizeof(rec.km_kyu036), 0);
				com->GetData(114, SQL_C_DOUBLE, &rec.km_kyuyokei, sizeof(rec.km_kyuyokei), 0);
				com->GetData(115, SQL_C_DOUBLE, &rec.km_syaho02, sizeof(rec.km_syaho02), 0);
				com->GetData(116, SQL_C_DOUBLE, &rec.km_koyou02, sizeof(rec.km_koyou02), 0);
				com->GetData(117, SQL_C_DOUBLE, &rec.km_kyosai02, sizeof(rec.km_kyosai02), 0);
				com->GetData(118, SQL_C_DOUBLE, &rec.km_fukuri02, sizeof(rec.km_fukuri02), 0);
				com->GetData(119, SQL_C_DOUBLE, &rec.km_kyuyosou, sizeof(rec.km_kyuyosou), 0);
				com->GetData(120, SQL_C_DOUBLE, &rec.km_rousaihoken, sizeof(rec.km_rousaihoken), 0);
				com->GetData(121, SQL_C_DOUBLE, &rec.km_kks01, sizeof(rec.km_kks01), 0);
				com->GetData(122, SQL_C_DOUBLE, &rec.km_kks02, sizeof(rec.km_kks02), 0);
				com->GetData(123, SQL_C_DOUBLE, &rec.km_kks03, sizeof(rec.km_kks03), 0);
				com->GetData(124, SQL_C_DOUBLE, &rec.km_kks04, sizeof(rec.km_kks04), 0);
				com->GetData(125, SQL_C_DOUBLE, &rec.km_chidai, sizeof(rec.km_chidai), 0);
				com->GetData(126, SQL_C_DOUBLE, &rec.km_kukakin, sizeof(rec.km_kukakin), 0);
				com->GetData(127, SQL_C_DOUBLE, &rec.km_tusin, sizeof(rec.km_tusin), 0);
				com->GetData(128, SQL_C_DOUBLE, &rec.km_hokenryo, sizeof(rec.km_hokenryo), 0);
				com->GetData(129, SQL_C_DOUBLE, &rec.km_zappi, sizeof(rec.km_zappi), 0);
				com->GetData(130, SQL_C_DOUBLE, &rec.km_sonota, sizeof(rec.km_sonota), 0);
				com->GetData(131, SQL_C_DOUBLE, &rec.km_corins, sizeof(rec.km_corins), 0);
				com->GetData(132, SQL_C_DOUBLE, &rec.km_kaigihi, sizeof(rec.km_kaigihi), 0);
				com->GetData(133, SQL_C_DOUBLE, &rec.km_kaihi, sizeof(rec.km_kaihi), 0);
				com->GetData(134, SQL_C_DOUBLE, &rec.km_anzen, sizeof(rec.km_anzen), 0);
				com->GetData(135, SQL_C_DOUBLE, &rec.km_kousai, sizeof(rec.km_kousai), 0);
				memset(km_hat030, 0, 101);
				com->GetData(136, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(137, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(138, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				com->GetData(139, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(140, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_bikou1, 0, 511);
				com->GetData(141, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(142, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				memset(km_nyuno, 0, 101);
				com->GetData(143, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				com->GetData(144, SQL_C_DOUBLE, &rec.km_syouhizei, sizeof(rec.km_syouhizei), 0);
				com->GetData(145, SQL_C_TYPE_TIMESTAMP, &rec.km_mitsumori, sizeof(rec.km_mitsumori), 0);
				com->GetData(146, SQL_C_DOUBLE, &rec.km_ritsu, sizeof(rec.km_ritsu), 0);
				com->GetData(147, SQL_C_LONG, &rec.km_ukeoi, sizeof(rec.km_ukeoi), 0);
				com->GetData(148, SQL_C_LONG, &rec.km_ten, sizeof(rec.km_ten), 0);
				com->GetData(149, SQL_C_LONG, &rec.se_Id, sizeof(rec.se_Id), 0);
				com->GetData(150, SQL_C_LONG, &rec.se_kouji, sizeof(rec.se_kouji), 0);
				com->GetData(151, SQL_C_TYPE_TIMESTAMP, &rec.se_date, sizeof(rec.se_date), 0);
				memset(se_name, 0, 0);
				com->GetData(152, SQL_C_CHAR, se_name, 0, 0);
				rec.se_name = (char *)se_name;
				com->GetData(153, SQL_C_NUMERIC, &rec.se_nuki, sizeof(rec.se_nuki), 0);
				com->GetData(154, SQL_C_NUMERIC, &rec.se_zei, sizeof(rec.se_zei), 0);
				com->GetData(155, SQL_C_NUMERIC, &rec.se_komi, sizeof(rec.se_komi), 0);
				com->GetData(156, SQL_C_LONG, &rec.se_kubun, sizeof(rec.se_kubun), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_syoken;
		delete[] km_sya012;
		delete[] km_sya022;
		delete[] km_sya032;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		delete[] se_name;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_seikyu operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_seikyu &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_seikyu rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_seikyu> m_Data;
};
class CR_v_taikei_00 : public COdbcRecord {
public:
	CR_v_taikei_00() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_taikei_00() {}

	void Initialize() {
		tk_key = "";
		tk_kubun = 0;
		tk_kousyu = 0;
		tk_syubetsu = 0;
		tk_saibetsu = 0;
		tk_kikaku = 0;
		tk_mname = "";
		tk_kname = "";
		tk_tani = "";
		tk_tekiyou = "";
	}

public:
	std::string tk_key;
	SQLINTEGER tk_kubun;
	SQLINTEGER tk_kousyu;
	SQLINTEGER tk_syubetsu;
	SQLINTEGER tk_saibetsu;
	SQLINTEGER tk_kikaku;
	std::string tk_mname;
	std::string tk_kname;
	std::string tk_tani;
	std::string tk_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->tk_key;
		} break;
		case 1: {
			ss << this->tk_kubun;
		} break;
		case 2: {
			ss << this->tk_kousyu;
		} break;
		case 3: {
			ss << this->tk_syubetsu;
		} break;
		case 4: {
			ss << this->tk_saibetsu;
		} break;
		case 5: {
			ss << this->tk_kikaku;
		} break;
		case 6: {
			ss << this->tk_mname;
		} break;
		case 7: {
			ss << this->tk_kname;
		} break;
		case 8: {
			ss << this->tk_tani;
		} break;
		case 9: {
			ss << this->tk_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_taikei_00 : public COdbcTable {
public:
	CT_v_taikei_00() : COdbcTable() {
		m_TableName = "v_taikei_00";
		m_SqlSELECT = "SELECT "
					  "tk_key,"
					  "tk_kubun,"
					  "tk_kousyu,"
					  "tk_syubetsu,"
					  "tk_saibetsu,"
					  "tk_kikaku,"
					  "tk_mname,"
					  "tk_kname,"
					  "tk_tani,"
					  "tk_tekiyou"
					  " FROM v_taikei_00";
		m_SqlINSERT = "INSERT INTO v_taikei_00 ("
					  "tk_key,"
					  "tk_kubun,"
					  "tk_kousyu,"
					  "tk_syubetsu,"
					  "tk_saibetsu,"
					  "tk_kikaku,"
					  "tk_mname,"
					  "tk_kname,"
					  "tk_tani,"
					  "tk_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_taikei_00 SET "
					  "tk_key = ?,"
					  "tk_kubun = ?,"
					  "tk_kousyu = ?,"
					  "tk_syubetsu = ?,"
					  "tk_saibetsu = ?,"
					  "tk_kikaku = ?,"
					  "tk_mname = ?,"
					  "tk_kname = ?,"
					  "tk_tani = ?,"
					  "tk_tekiyou = ?";

		m_SqlDELETE = "DELETE v_taikei_00 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_key", "1", "", "NO", "char", "21", "21", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _char, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_kubun", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_kousyu", "3", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_syubetsu", "4", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_saibetsu", "5", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_kikaku", "6", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_mname", "7", "", "NO", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_kname", "8", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_tani", "9", "", "YES", "varchar", "50", "50", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_taikei_00", "tk_tekiyou", "10", "", "YES", "varchar", "50", "50", "0", "0",
					 "0", "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_taikei_00() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *tk_key = new char[22];
		char *tk_mname = new char[256];
		char *tk_kname = new char[256];
		char *tk_tani = new char[51];
		char *tk_tekiyou = new char[51];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_taikei_00 rec;
				memset(tk_key, 0, 22);
				com->GetData(1, SQL_C_CHAR, tk_key, 22, 0);
				rec.tk_key = (char *)tk_key;
				com->GetData(2, SQL_C_LONG, &rec.tk_kubun, sizeof(rec.tk_kubun), 0);
				com->GetData(3, SQL_C_LONG, &rec.tk_kousyu, sizeof(rec.tk_kousyu), 0);
				com->GetData(4, SQL_C_LONG, &rec.tk_syubetsu, sizeof(rec.tk_syubetsu), 0);
				com->GetData(5, SQL_C_LONG, &rec.tk_saibetsu, sizeof(rec.tk_saibetsu), 0);
				com->GetData(6, SQL_C_LONG, &rec.tk_kikaku, sizeof(rec.tk_kikaku), 0);
				memset(tk_mname, 0, 256);
				com->GetData(7, SQL_C_CHAR, tk_mname, 256, 0);
				rec.tk_mname = (char *)tk_mname;
				memset(tk_kname, 0, 256);
				com->GetData(8, SQL_C_CHAR, tk_kname, 256, 0);
				rec.tk_kname = (char *)tk_kname;
				memset(tk_tani, 0, 51);
				com->GetData(9, SQL_C_CHAR, tk_tani, 51, 0);
				rec.tk_tani = (char *)tk_tani;
				memset(tk_tekiyou, 0, 51);
				com->GetData(10, SQL_C_CHAR, tk_tekiyou, 51, 0);
				rec.tk_tekiyou = (char *)tk_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] tk_key;
		delete[] tk_mname;
		delete[] tk_kname;
		delete[] tk_tani;
		delete[] tk_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_taikei_00 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_taikei_00 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_taikei_00 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_taikei_00> m_Data;
};
class CR_v_temp_meisai : public COdbcRecord {
public:
	CR_v_temp_meisai() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_temp_meisai() {}

	void Initialize() {
		yo_工事コード = 0;
		yo_工事名 = "";
		yo_工事番号 = "";
		yo_工種ｺｰﾄﾞ = 0;
		yo_工事種別 = "";
		yo_発注元ｺｰﾄﾞ = 0;
		yo_発注元 = "";
		yo_契約金額 = 0.0;
		yo_追加金額 = 0.0;
		yo_合計金額 = 0.0;
		yo_実行予算 = 0.0;
		yo_実際原価 = 0.0;
		yo_現場代理人所見 = "";
		yo_営業所見 = "";
		yo_HAT030 = "";
		yo_HAT040 = "";
		yo_HAT050 = "";
		yo_sw = 0;
		yo_bikou1 = "";
		yo_bikou2 = "";
		yo_nyuno = "";
		yo_type = 0;
		yo_sya011 = 0;
		yo_sya012 = "";
		memset(&yo_yoteinuki, 0, sizeof(yo_yoteinuki));
		memset(&yo_yoteikomi, 0, sizeof(yo_yoteikomi));
		tmm_id = 0;
		tmm_kouji = 0;
		tmm_gyo = 0;
		tmm_name = "";
		tmm_kikaku = "";
		tmm_suu = 0.0;
		tmm_tani = "";
		memset(&tmm_tanka, 0, sizeof(tmm_tanka));
		tmm_syukei = 0;
		memset(&tmm_kingaku, 0, sizeof(tmm_kingaku));
		tmm_tekiyou = "";
	}

public:
	SQLINTEGER yo_工事コード;
	std::string yo_工事名;
	std::string yo_工事番号;
	SQLINTEGER yo_工種ｺｰﾄﾞ;
	std::string yo_工事種別;
	SQLINTEGER yo_発注元ｺｰﾄﾞ;
	std::string yo_発注元;
	SQLFLOAT yo_契約金額;
	SQLFLOAT yo_追加金額;
	SQLFLOAT yo_合計金額;
	SQLFLOAT yo_実行予算;
	SQLFLOAT yo_実際原価;
	TIMESTAMP_STRUCT yo_契約日付;
	TIMESTAMP_STRUCT yo_工期;
	TIMESTAMP_STRUCT yo_工期終了;
	TIMESTAMP_STRUCT yo_着工日付;
	TIMESTAMP_STRUCT yo_完成日付;
	TIMESTAMP_STRUCT yo_検査引渡日;
	std::string yo_現場代理人所見;
	std::string yo_営業所見;
	std::string yo_HAT030;
	std::string yo_HAT040;
	std::string yo_HAT050;
	TIMESTAMP_STRUCT yo_nyuudat;
	SQLCHAR yo_sw;
	std::string yo_bikou1;
	std::string yo_bikou2;
	std::string yo_nyuno;
	TIMESTAMP_STRUCT yo_sinsadat;
	TIMESTAMP_STRUCT yo_mitsumori;
	SQLINTEGER yo_type;
	SQLINTEGER yo_sya011;
	std::string yo_sya012;
	TIMESTAMP_STRUCT yo_koukoku;
	SQL_NUMERIC_STRUCT yo_yoteinuki;
	SQL_NUMERIC_STRUCT yo_yoteikomi;
	SQLINTEGER tmm_id;
	SQLINTEGER tmm_kouji;
	SQLINTEGER tmm_gyo;
	std::string tmm_name;
	std::string tmm_kikaku;
	SQLFLOAT tmm_suu;
	std::string tmm_tani;
	SQL_NUMERIC_STRUCT tmm_tanka;
	SQLINTEGER tmm_syukei;
	SQL_NUMERIC_STRUCT tmm_kingaku;
	std::string tmm_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->yo_工事コード;
		} break;
		case 1: {
			ss << this->yo_工事名;
		} break;
		case 2: {
			ss << this->yo_工事番号;
		} break;
		case 3: {
			ss << this->yo_工種ｺｰﾄﾞ;
		} break;
		case 4: {
			ss << this->yo_工事種別;
		} break;
		case 5: {
			ss << this->yo_発注元ｺｰﾄﾞ;
		} break;
		case 6: {
			ss << this->yo_発注元;
		} break;
		case 7: {
			ss << this->yo_契約金額;
		} break;
		case 8: {
			ss << this->yo_追加金額;
		} break;
		case 9: {
			ss << this->yo_合計金額;
		} break;
		case 10: {
			ss << this->yo_実行予算;
		} break;
		case 11: {
			ss << this->yo_実際原価;
		} break;
		case 12: {
			COdbcDateTime date(&this->yo_契約日付);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->yo_工期);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->yo_工期終了);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->yo_着工日付);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->yo_完成日付);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->yo_検査引渡日);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->yo_現場代理人所見;
		} break;
		case 19: {
			ss << this->yo_営業所見;
		} break;
		case 20: {
			ss << this->yo_HAT030;
		} break;
		case 21: {
			ss << this->yo_HAT040;
		} break;
		case 22: {
			ss << this->yo_HAT050;
		} break;
		case 23: {
			COdbcDateTime date(&this->yo_nyuudat);
			ss << date.to_string();
		} break;
		case 24: {
			ss << this->yo_sw;
		} break;
		case 25: {
			ss << this->yo_bikou1;
		} break;
		case 26: {
			ss << this->yo_bikou2;
		} break;
		case 27: {
			ss << this->yo_nyuno;
		} break;
		case 28: {
			COdbcDateTime date(&this->yo_sinsadat);
			ss << date.to_string();
		} break;
		case 29: {
			COdbcDateTime date(&this->yo_mitsumori);
			ss << date.to_string();
		} break;
		case 30: {
			ss << this->yo_type;
		} break;
		case 31: {
			ss << this->yo_sya011;
		} break;
		case 32: {
			ss << this->yo_sya012;
		} break;
		case 33: {
			COdbcDateTime date(&this->yo_koukoku);
			ss << date.to_string();
		} break;
		case 34: {
			ss << COdbcColumn::NumericToString(&this->yo_yoteinuki);
		} break;
		case 35: {
			ss << COdbcColumn::NumericToString(&this->yo_yoteikomi);
		} break;
		case 36: {
			ss << this->tmm_id;
		} break;
		case 37: {
			ss << this->tmm_kouji;
		} break;
		case 38: {
			ss << this->tmm_gyo;
		} break;
		case 39: {
			ss << this->tmm_name;
		} break;
		case 40: {
			ss << this->tmm_kikaku;
		} break;
		case 41: {
			ss << this->tmm_suu;
		} break;
		case 42: {
			ss << this->tmm_tani;
		} break;
		case 43: {
			ss << COdbcColumn::NumericToString(&this->tmm_tanka);
		} break;
		case 44: {
			ss << this->tmm_syukei;
		} break;
		case 45: {
			ss << COdbcColumn::NumericToString(&this->tmm_kingaku);
		} break;
		case 46: {
			ss << this->tmm_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_temp_meisai : public COdbcTable {
public:
	CT_v_temp_meisai() : COdbcTable() {
		m_TableName = "v_temp_meisai";
		m_SqlSELECT = "SELECT "
					  "yo_工事コード,"
					  "yo_工事名,"
					  "yo_工事番号,"
					  "yo_工種ｺｰﾄﾞ,"
					  "yo_工事種別,"
					  "yo_発注元ｺｰﾄﾞ,"
					  "yo_発注元,"
					  "yo_契約金額,"
					  "yo_追加金額,"
					  "yo_合計金額,"
					  "yo_実行予算,"
					  "yo_実際原価,"
					  "yo_契約日付,"
					  "yo_工期,"
					  "yo_工期終了,"
					  "yo_着工日付,"
					  "yo_完成日付,"
					  "yo_検査引渡日,"
					  "yo_現場代理人所見,"
					  "yo_営業所見,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012,"
					  "yo_koukoku,"
					  "yo_yoteinuki,"
					  "yo_yoteikomi,"
					  "tmm_id,"
					  "tmm_kouji,"
					  "tmm_gyo,"
					  "tmm_name,"
					  "tmm_kikaku,"
					  "tmm_suu,"
					  "tmm_tani,"
					  "tmm_tanka,"
					  "tmm_syukei,"
					  "tmm_kingaku,"
					  "tmm_tekiyou"
					  " FROM v_temp_meisai";
		m_SqlINSERT =
			"INSERT INTO v_temp_meisai ("
			"yo_工事コード,"
			"yo_工事名,"
			"yo_工事番号,"
			"yo_工種ｺｰﾄﾞ,"
			"yo_工事種別,"
			"yo_発注元ｺｰﾄﾞ,"
			"yo_発注元,"
			"yo_契約金額,"
			"yo_追加金額,"
			"yo_合計金額,"
			"yo_実行予算,"
			"yo_実際原価,"
			"yo_契約日付,"
			"yo_工期,"
			"yo_工期終了,"
			"yo_着工日付,"
			"yo_完成日付,"
			"yo_検査引渡日,"
			"yo_現場代理人所見,"
			"yo_営業所見,"
			"yo_HAT030,"
			"yo_HAT040,"
			"yo_HAT050,"
			"yo_nyuudat,"
			"yo_sw,"
			"yo_bikou1,"
			"yo_bikou2,"
			"yo_nyuno,"
			"yo_sinsadat,"
			"yo_mitsumori,"
			"yo_type,"
			"yo_sya011,"
			"yo_sya012,"
			"yo_koukoku,"
			"yo_yoteinuki,"
			"yo_yoteikomi,"
			"tmm_id,"
			"tmm_kouji,"
			"tmm_gyo,"
			"tmm_name,"
			"tmm_kikaku,"
			"tmm_suu,"
			"tmm_tani,"
			"tmm_tanka,"
			"tmm_syukei,"
			"tmm_kingaku,"
			"tmm_tekiyou)"
			" VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_temp_meisai SET "
					  "yo_工事コード = ?,"
					  "yo_工事名 = ?,"
					  "yo_工事番号 = ?,"
					  "yo_工種ｺｰﾄﾞ = ?,"
					  "yo_工事種別 = ?,"
					  "yo_発注元ｺｰﾄﾞ = ?,"
					  "yo_発注元 = ?,"
					  "yo_契約金額 = ?,"
					  "yo_追加金額 = ?,"
					  "yo_合計金額 = ?,"
					  "yo_実行予算 = ?,"
					  "yo_実際原価 = ?,"
					  "yo_契約日付 = ?,"
					  "yo_工期 = ?,"
					  "yo_工期終了 = ?,"
					  "yo_着工日付 = ?,"
					  "yo_完成日付 = ?,"
					  "yo_検査引渡日 = ?,"
					  "yo_現場代理人所見 = ?,"
					  "yo_営業所見 = ?,"
					  "yo_HAT030 = ?,"
					  "yo_HAT040 = ?,"
					  "yo_HAT050 = ?,"
					  "yo_nyuudat = ?,"
					  "yo_sw = ?,"
					  "yo_bikou1 = ?,"
					  "yo_bikou2 = ?,"
					  "yo_nyuno = ?,"
					  "yo_sinsadat = ?,"
					  "yo_mitsumori = ?,"
					  "yo_type = ?,"
					  "yo_sya011 = ?,"
					  "yo_sya012 = ?,"
					  "yo_koukoku = ?,"
					  "yo_yoteinuki = ?,"
					  "yo_yoteikomi = ?,"
					  "tmm_id = ?,"
					  "tmm_kouji = ?,"
					  "tmm_gyo = ?,"
					  "tmm_name = ?,"
					  "tmm_kikaku = ?,"
					  "tmm_suu = ?,"
					  "tmm_tani = ?,"
					  "tmm_tanka = ?,"
					  "tmm_syukei = ?,"
					  "tmm_kingaku = ?,"
					  "tmm_tekiyou = ?";

		m_SqlDELETE = "DELETE v_temp_meisai ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_工事コード", "1", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_工事名", "2", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_工事番号", "3", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_工種ｺｰﾄﾞ", "4", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_工事種別", "5", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_発注元ｺｰﾄﾞ", "6", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_発注元", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_契約金額", "8", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_追加金額", "9", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_合計金額", "10", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_実行予算", "11", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_実際原価", "12", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_契約日付", "13", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_工期", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_工期終了", "15", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_着工日付", "16", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_完成日付", "17", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_検査引渡日", "18", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_現場代理人所見", "19", "", "YES", "ntext", "1073741823",
					 "2147483646", "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_営業所見", "20", "", "YES", "ntext", "1073741823",
					 "2147483646", "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_HAT030", "21", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_HAT040", "22", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_HAT050", "23", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_nyuudat", "24", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_sw", "25", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_bikou1", "26", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_bikou2", "27", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_nyuno", "28", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_sinsadat", "29", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_mitsumori", "30", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_type", "31", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_sya011", "32", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_sya012", "33", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_koukoku", "34", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_yoteinuki", "35", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "yo_yoteikomi", "36", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_id", "37", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_kouji", "38", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_gyo", "39", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_name", "40", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_kikaku", "41", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_suu", "42", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_tani", "43", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_tanka", "44", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_syukei", "45", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_kingaku", "46", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_temp_meisai", "tmm_tekiyou", "47", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_temp_meisai() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *yo_工事名 = new char[511];
		char *yo_工事番号 = new char[511];
		char *yo_工事種別 = new char[101];
		char *yo_発注元 = new char[511];
		char *yo_現場代理人所見 = new char[MAXBUF];
		char *yo_営業所見 = new char[MAXBUF];
		char *yo_HAT030 = new char[101];
		char *yo_HAT040 = new char[101];
		char *yo_HAT050 = new char[101];
		char *yo_bikou1 = new char[511];
		char *yo_bikou2 = new char[511];
		char *yo_nyuno = new char[101];
		char *yo_sya012 = new char[81];
		char *tmm_name = new char[511];
		char *tmm_kikaku = new char[511];
		char *tmm_tani = new char[101];
		char *tmm_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_temp_meisai rec;
				com->GetData(1, SQL_C_LONG, &rec.yo_工事コード, sizeof(rec.yo_工事コード), 0);
				memset(yo_工事名, 0, 511);
				com->GetData(2, SQL_C_CHAR, yo_工事名, 511, 0);
				rec.yo_工事名 = (char *)yo_工事名;
				memset(yo_工事番号, 0, 511);
				com->GetData(3, SQL_C_CHAR, yo_工事番号, 511, 0);
				rec.yo_工事番号 = (char *)yo_工事番号;
				com->GetData(4, SQL_C_LONG, &rec.yo_工種ｺｰﾄﾞ, sizeof(rec.yo_工種ｺｰﾄﾞ), 0);
				memset(yo_工事種別, 0, 101);
				com->GetData(5, SQL_C_CHAR, yo_工事種別, 101, 0);
				rec.yo_工事種別 = (char *)yo_工事種別;
				com->GetData(6, SQL_C_LONG, &rec.yo_発注元ｺｰﾄﾞ, sizeof(rec.yo_発注元ｺｰﾄﾞ), 0);
				memset(yo_発注元, 0, 511);
				com->GetData(7, SQL_C_CHAR, yo_発注元, 511, 0);
				rec.yo_発注元 = (char *)yo_発注元;
				com->GetData(8, SQL_C_DOUBLE, &rec.yo_契約金額, sizeof(rec.yo_契約金額), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.yo_追加金額, sizeof(rec.yo_追加金額), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.yo_合計金額, sizeof(rec.yo_合計金額), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.yo_実行予算, sizeof(rec.yo_実行予算), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.yo_実際原価, sizeof(rec.yo_実際原価), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.yo_契約日付, sizeof(rec.yo_契約日付), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期, sizeof(rec.yo_工期), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期終了, sizeof(rec.yo_工期終了), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.yo_着工日付, sizeof(rec.yo_着工日付), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.yo_完成日付, sizeof(rec.yo_完成日付), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.yo_検査引渡日, sizeof(rec.yo_検査引渡日), 0);
				memset(yo_現場代理人所見, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, yo_現場代理人所見, 1048576, 0);
				rec.yo_現場代理人所見 = (char *)yo_現場代理人所見;
				memset(yo_営業所見, 0, 1048576);
				com->GetData(20, SQL_C_CHAR, yo_営業所見, 1048576, 0);
				rec.yo_営業所見 = (char *)yo_営業所見;
				memset(yo_HAT030, 0, 101);
				com->GetData(21, SQL_C_CHAR, yo_HAT030, 101, 0);
				rec.yo_HAT030 = (char *)yo_HAT030;
				memset(yo_HAT040, 0, 101);
				com->GetData(22, SQL_C_CHAR, yo_HAT040, 101, 0);
				rec.yo_HAT040 = (char *)yo_HAT040;
				memset(yo_HAT050, 0, 101);
				com->GetData(23, SQL_C_CHAR, yo_HAT050, 101, 0);
				rec.yo_HAT050 = (char *)yo_HAT050;
				com->GetData(24, SQL_C_TYPE_TIMESTAMP, &rec.yo_nyuudat, sizeof(rec.yo_nyuudat), 0);
				com->GetData(25, SQL_C_CHAR, &rec.yo_sw, sizeof(rec.yo_sw), 0);
				memset(yo_bikou1, 0, 511);
				com->GetData(26, SQL_C_CHAR, yo_bikou1, 511, 0);
				rec.yo_bikou1 = (char *)yo_bikou1;
				memset(yo_bikou2, 0, 511);
				com->GetData(27, SQL_C_CHAR, yo_bikou2, 511, 0);
				rec.yo_bikou2 = (char *)yo_bikou2;
				memset(yo_nyuno, 0, 101);
				com->GetData(28, SQL_C_CHAR, yo_nyuno, 101, 0);
				rec.yo_nyuno = (char *)yo_nyuno;
				com->GetData(29, SQL_C_TYPE_TIMESTAMP, &rec.yo_sinsadat, sizeof(rec.yo_sinsadat), 0);
				com->GetData(30, SQL_C_TYPE_TIMESTAMP, &rec.yo_mitsumori, sizeof(rec.yo_mitsumori), 0);
				com->GetData(31, SQL_C_LONG, &rec.yo_type, sizeof(rec.yo_type), 0);
				com->GetData(32, SQL_C_LONG, &rec.yo_sya011, sizeof(rec.yo_sya011), 0);
				memset(yo_sya012, 0, 81);
				com->GetData(33, SQL_C_CHAR, yo_sya012, 81, 0);
				rec.yo_sya012 = (char *)yo_sya012;
				com->GetData(34, SQL_C_TYPE_TIMESTAMP, &rec.yo_koukoku, sizeof(rec.yo_koukoku), 0);
				com->GetData(35, SQL_C_NUMERIC, &rec.yo_yoteinuki, sizeof(rec.yo_yoteinuki), 0);
				com->GetData(36, SQL_C_NUMERIC, &rec.yo_yoteikomi, sizeof(rec.yo_yoteikomi), 0);
				com->GetData(37, SQL_C_LONG, &rec.tmm_id, sizeof(rec.tmm_id), 0);
				com->GetData(38, SQL_C_LONG, &rec.tmm_kouji, sizeof(rec.tmm_kouji), 0);
				com->GetData(39, SQL_C_LONG, &rec.tmm_gyo, sizeof(rec.tmm_gyo), 0);
				memset(tmm_name, 0, 511);
				com->GetData(40, SQL_C_CHAR, tmm_name, 511, 0);
				rec.tmm_name = (char *)tmm_name;
				memset(tmm_kikaku, 0, 511);
				com->GetData(41, SQL_C_CHAR, tmm_kikaku, 511, 0);
				rec.tmm_kikaku = (char *)tmm_kikaku;
				com->GetData(42, SQL_C_DOUBLE, &rec.tmm_suu, sizeof(rec.tmm_suu), 0);
				memset(tmm_tani, 0, 101);
				com->GetData(43, SQL_C_CHAR, tmm_tani, 101, 0);
				rec.tmm_tani = (char *)tmm_tani;
				com->GetData(44, SQL_C_NUMERIC, &rec.tmm_tanka, sizeof(rec.tmm_tanka), 0);
				com->GetData(45, SQL_C_LONG, &rec.tmm_syukei, sizeof(rec.tmm_syukei), 0);
				com->GetData(46, SQL_C_NUMERIC, &rec.tmm_kingaku, sizeof(rec.tmm_kingaku), 0);
				memset(tmm_tekiyou, 0, 511);
				com->GetData(47, SQL_C_CHAR, tmm_tekiyou, 511, 0);
				rec.tmm_tekiyou = (char *)tmm_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] yo_工事名;
		delete[] yo_工事番号;
		delete[] yo_工事種別;
		delete[] yo_発注元;
		delete[] yo_現場代理人所見;
		delete[] yo_営業所見;
		delete[] yo_HAT030;
		delete[] yo_HAT040;
		delete[] yo_HAT050;
		delete[] yo_bikou1;
		delete[] yo_bikou2;
		delete[] yo_nyuno;
		delete[] yo_sya012;
		delete[] tmm_name;
		delete[] tmm_kikaku;
		delete[] tmm_tani;
		delete[] tmm_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_temp_meisai operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_temp_meisai &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_temp_meisai rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_temp_meisai> m_Data;
};
class CR_v_tyumon1 : public COdbcRecord {
public:
	CR_v_tyumon1() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_tyumon1() {}

	void Initialize() {
		tyu_id = 0;
		tyu_kouji = 0;
		tyu_gyosya = 0;
		tyu_seq = 0;
		tyu_name = "";
		tyu_basyo = "";
		tyu_zyoken = "";
		memset(&tyu_kingaku, 0, sizeof(tyu_kingaku));
		memset(&tyu_zei, 0, sizeof(tyu_zei));
		memset(&tyu_goukei, 0, sizeof(tyu_goukei));
		memset(&tyu_ritsu, 0, sizeof(tyu_ritsu));
		tyu_kousyu = "";
		gyo_id = 0;
		gyo_name = "";
		gyo_ten = "";
		gyo_katagaki = "";
		gyo_shimei = "";
		gyo_zip = "";
		gyo_zyusyo1 = "";
		gyo_zyusyo2 = "";
		gyo_tel = "";
		gyo_fax = "";
		km_index = 0;
		km_name = "";
		km_no = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
	}

public:
	SQLINTEGER tyu_id;
	SQLINTEGER tyu_kouji;
	SQLINTEGER tyu_gyosya;
	SQLINTEGER tyu_seq;
	std::string tyu_name;
	std::string tyu_basyo;
	std::string tyu_zyoken;
	TIMESTAMP_STRUCT tyu_date;
	TIMESTAMP_STRUCT tyu_kaisi;
	TIMESTAMP_STRUCT tyu_owari;
	SQL_NUMERIC_STRUCT tyu_kingaku;
	SQL_NUMERIC_STRUCT tyu_zei;
	SQL_NUMERIC_STRUCT tyu_goukei;
	SQL_NUMERIC_STRUCT tyu_ritsu;
	std::string tyu_kousyu;
	TIMESTAMP_STRUCT tyu_irai;
	SQLINTEGER gyo_id;
	std::string gyo_name;
	std::string gyo_ten;
	std::string gyo_katagaki;
	std::string gyo_shimei;
	std::string gyo_zip;
	std::string gyo_zyusyo1;
	std::string gyo_zyusyo2;
	std::string gyo_tel;
	std::string gyo_fax;
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->tyu_id;
		} break;
		case 1: {
			ss << this->tyu_kouji;
		} break;
		case 2: {
			ss << this->tyu_gyosya;
		} break;
		case 3: {
			ss << this->tyu_seq;
		} break;
		case 4: {
			ss << this->tyu_name;
		} break;
		case 5: {
			ss << this->tyu_basyo;
		} break;
		case 6: {
			ss << this->tyu_zyoken;
		} break;
		case 7: {
			COdbcDateTime date(&this->tyu_date);
			ss << date.to_string();
		} break;
		case 8: {
			COdbcDateTime date(&this->tyu_kaisi);
			ss << date.to_string();
		} break;
		case 9: {
			COdbcDateTime date(&this->tyu_owari);
			ss << date.to_string();
		} break;
		case 10: {
			ss << COdbcColumn::NumericToString(&this->tyu_kingaku);
		} break;
		case 11: {
			ss << COdbcColumn::NumericToString(&this->tyu_zei);
		} break;
		case 12: {
			ss << COdbcColumn::NumericToString(&this->tyu_goukei);
		} break;
		case 13: {
			ss << COdbcColumn::NumericToString(&this->tyu_ritsu);
		} break;
		case 14: {
			ss << this->tyu_kousyu;
		} break;
		case 15: {
			COdbcDateTime date(&this->tyu_irai);
			ss << date.to_string();
		} break;
		case 16: {
			ss << this->gyo_id;
		} break;
		case 17: {
			ss << this->gyo_name;
		} break;
		case 18: {
			ss << this->gyo_ten;
		} break;
		case 19: {
			ss << this->gyo_katagaki;
		} break;
		case 20: {
			ss << this->gyo_shimei;
		} break;
		case 21: {
			ss << this->gyo_zip;
		} break;
		case 22: {
			ss << this->gyo_zyusyo1;
		} break;
		case 23: {
			ss << this->gyo_zyusyo2;
		} break;
		case 24: {
			ss << this->gyo_tel;
		} break;
		case 25: {
			ss << this->gyo_fax;
		} break;
		case 26: {
			ss << this->km_index;
		} break;
		case 27: {
			ss << this->km_name;
		} break;
		case 28: {
			ss << this->km_no;
		} break;
		case 29: {
			ss << this->km_hatcd;
		} break;
		case 30: {
			ss << this->km_hat02;
		} break;
		case 31: {
			ss << this->km_hat030;
		} break;
		case 32: {
			ss << this->km_hat040;
		} break;
		case 33: {
			ss << this->km_hat050;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_tyumon1 : public COdbcTable {
public:
	CT_v_tyumon1() : COdbcTable() {
		m_TableName = "v_tyumon1";
		m_SqlSELECT = "SELECT "
					  "tyu_id,"
					  "tyu_kouji,"
					  "tyu_gyosya,"
					  "tyu_seq,"
					  "tyu_name,"
					  "tyu_basyo,"
					  "tyu_zyoken,"
					  "tyu_date,"
					  "tyu_kaisi,"
					  "tyu_owari,"
					  "tyu_kingaku,"
					  "tyu_zei,"
					  "tyu_goukei,"
					  "tyu_ritsu,"
					  "tyu_kousyu,"
					  "tyu_irai,"
					  "gyo_id,"
					  "gyo_name,"
					  "gyo_ten,"
					  "gyo_katagaki,"
					  "gyo_shimei,"
					  "gyo_zip,"
					  "gyo_zyusyo1,"
					  "gyo_zyusyo2,"
					  "gyo_tel,"
					  "gyo_fax,"
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050"
					  " FROM v_tyumon1";
		m_SqlINSERT = "INSERT INTO v_tyumon1 ("
					  "tyu_id,"
					  "tyu_kouji,"
					  "tyu_gyosya,"
					  "tyu_seq,"
					  "tyu_name,"
					  "tyu_basyo,"
					  "tyu_zyoken,"
					  "tyu_date,"
					  "tyu_kaisi,"
					  "tyu_owari,"
					  "tyu_kingaku,"
					  "tyu_zei,"
					  "tyu_goukei,"
					  "tyu_ritsu,"
					  "tyu_kousyu,"
					  "tyu_irai,"
					  "gyo_id,"
					  "gyo_name,"
					  "gyo_ten,"
					  "gyo_katagaki,"
					  "gyo_shimei,"
					  "gyo_zip,"
					  "gyo_zyusyo1,"
					  "gyo_zyusyo2,"
					  "gyo_tel,"
					  "gyo_fax,"
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_tyumon1 SET "
					  "tyu_id = ?,"
					  "tyu_kouji = ?,"
					  "tyu_gyosya = ?,"
					  "tyu_seq = ?,"
					  "tyu_name = ?,"
					  "tyu_basyo = ?,"
					  "tyu_zyoken = ?,"
					  "tyu_date = ?,"
					  "tyu_kaisi = ?,"
					  "tyu_owari = ?,"
					  "tyu_kingaku = ?,"
					  "tyu_zei = ?,"
					  "tyu_goukei = ?,"
					  "tyu_ritsu = ?,"
					  "tyu_kousyu = ?,"
					  "tyu_irai = ?,"
					  "gyo_id = ?,"
					  "gyo_name = ?,"
					  "gyo_ten = ?,"
					  "gyo_katagaki = ?,"
					  "gyo_shimei = ?,"
					  "gyo_zip = ?,"
					  "gyo_zyusyo1 = ?,"
					  "gyo_zyusyo2 = ?,"
					  "gyo_tel = ?,"
					  "gyo_fax = ?,"
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?";

		m_SqlDELETE = "DELETE v_tyumon1 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_gyosya", "3", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_seq", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_name", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_basyo", "6", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_zyoken", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_date", "8", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_kaisi", "9", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_owari", "10", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_kingaku", "11", "", "YES", "decimal", "0", "0", "18", "0", "0",
					 "", "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_zei", "12", "", "YES", "decimal", "0", "0", "18", "0", "0", "",
					 "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_goukei", "13", "", "YES", "decimal", "0", "0", "18", "0", "0",
					 "", "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_ritsu", "14", "", "YES", "decimal", "0", "0", "18", "0", "0",
					 "", "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_kousyu", "15", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "tyu_irai", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_id", "17", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_name", "18", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_ten", "19", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_katagaki", "20", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_shimei", "21", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_zip", "22", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_zyusyo1", "23", "", "YES", "nvarchar", "100", "200", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_zyusyo2", "24", "", "YES", "nvarchar", "100", "200", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_tel", "25", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "gyo_fax", "26", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "km_index", "27", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "km_name", "28", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "km_no", "29", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "km_hatcd", "30", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "km_hat02", "31", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "km_hat030", "32", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "km_hat040", "33", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_tyumon1", "km_hat050", "34", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_tyumon1() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *tyu_name = new char[511];
		char *tyu_basyo = new char[511];
		char *tyu_zyoken = new char[511];
		char *tyu_kousyu = new char[511];
		char *gyo_name = new char[101];
		char *gyo_ten = new char[101];
		char *gyo_katagaki = new char[101];
		char *gyo_shimei = new char[101];
		char *gyo_zip = new char[41];
		char *gyo_zyusyo1 = new char[201];
		char *gyo_zyusyo2 = new char[201];
		char *gyo_tel = new char[41];
		char *gyo_fax = new char[41];
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_hat02 = new char[511];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_tyumon1 rec;
				com->GetData(1, SQL_C_LONG, &rec.tyu_id, sizeof(rec.tyu_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.tyu_kouji, sizeof(rec.tyu_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.tyu_gyosya, sizeof(rec.tyu_gyosya), 0);
				com->GetData(4, SQL_C_LONG, &rec.tyu_seq, sizeof(rec.tyu_seq), 0);
				memset(tyu_name, 0, 511);
				com->GetData(5, SQL_C_CHAR, tyu_name, 511, 0);
				rec.tyu_name = (char *)tyu_name;
				memset(tyu_basyo, 0, 511);
				com->GetData(6, SQL_C_CHAR, tyu_basyo, 511, 0);
				rec.tyu_basyo = (char *)tyu_basyo;
				memset(tyu_zyoken, 0, 511);
				com->GetData(7, SQL_C_CHAR, tyu_zyoken, 511, 0);
				rec.tyu_zyoken = (char *)tyu_zyoken;
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.tyu_date, sizeof(rec.tyu_date), 0);
				com->GetData(9, SQL_C_TYPE_TIMESTAMP, &rec.tyu_kaisi, sizeof(rec.tyu_kaisi), 0);
				com->GetData(10, SQL_C_TYPE_TIMESTAMP, &rec.tyu_owari, sizeof(rec.tyu_owari), 0);
				com->GetData(11, SQL_C_NUMERIC, &rec.tyu_kingaku, sizeof(rec.tyu_kingaku), 0);
				com->GetData(12, SQL_C_NUMERIC, &rec.tyu_zei, sizeof(rec.tyu_zei), 0);
				com->GetData(13, SQL_C_NUMERIC, &rec.tyu_goukei, sizeof(rec.tyu_goukei), 0);
				com->GetData(14, SQL_C_NUMERIC, &rec.tyu_ritsu, sizeof(rec.tyu_ritsu), 0);
				memset(tyu_kousyu, 0, 511);
				com->GetData(15, SQL_C_CHAR, tyu_kousyu, 511, 0);
				rec.tyu_kousyu = (char *)tyu_kousyu;
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.tyu_irai, sizeof(rec.tyu_irai), 0);
				com->GetData(17, SQL_C_LONG, &rec.gyo_id, sizeof(rec.gyo_id), 0);
				memset(gyo_name, 0, 101);
				com->GetData(18, SQL_C_CHAR, gyo_name, 101, 0);
				rec.gyo_name = (char *)gyo_name;
				memset(gyo_ten, 0, 101);
				com->GetData(19, SQL_C_CHAR, gyo_ten, 101, 0);
				rec.gyo_ten = (char *)gyo_ten;
				memset(gyo_katagaki, 0, 101);
				com->GetData(20, SQL_C_CHAR, gyo_katagaki, 101, 0);
				rec.gyo_katagaki = (char *)gyo_katagaki;
				memset(gyo_shimei, 0, 101);
				com->GetData(21, SQL_C_CHAR, gyo_shimei, 101, 0);
				rec.gyo_shimei = (char *)gyo_shimei;
				memset(gyo_zip, 0, 41);
				com->GetData(22, SQL_C_CHAR, gyo_zip, 41, 0);
				rec.gyo_zip = (char *)gyo_zip;
				memset(gyo_zyusyo1, 0, 201);
				com->GetData(23, SQL_C_CHAR, gyo_zyusyo1, 201, 0);
				rec.gyo_zyusyo1 = (char *)gyo_zyusyo1;
				memset(gyo_zyusyo2, 0, 201);
				com->GetData(24, SQL_C_CHAR, gyo_zyusyo2, 201, 0);
				rec.gyo_zyusyo2 = (char *)gyo_zyusyo2;
				memset(gyo_tel, 0, 41);
				com->GetData(25, SQL_C_CHAR, gyo_tel, 41, 0);
				rec.gyo_tel = (char *)gyo_tel;
				memset(gyo_fax, 0, 41);
				com->GetData(26, SQL_C_CHAR, gyo_fax, 41, 0);
				rec.gyo_fax = (char *)gyo_fax;
				com->GetData(27, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(28, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(29, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(30, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(31, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				memset(km_hat030, 0, 101);
				com->GetData(32, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(33, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(34, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] tyu_name;
		delete[] tyu_basyo;
		delete[] tyu_zyoken;
		delete[] tyu_kousyu;
		delete[] gyo_name;
		delete[] gyo_ten;
		delete[] gyo_katagaki;
		delete[] gyo_shimei;
		delete[] gyo_zip;
		delete[] gyo_zyusyo1;
		delete[] gyo_zyusyo2;
		delete[] gyo_tel;
		delete[] gyo_fax;
		delete[] km_name;
		delete[] km_no;
		delete[] km_hat02;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_tyumon1 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_tyumon1 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_tyumon1 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_tyumon1> m_Data;
};
class CR_v_ukeoi : public COdbcRecord {
public:
	CR_v_ukeoi() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_ukeoi() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		km_syoken = "";
		km_zai00 = 0.0;
		km_zai01 = 0.0;
		km_zai02 = 0.0;
		km_zai03 = 0.0;
		km_zai04 = 0.0;
		km_rou01 = 0.0;
		km_rou02 = 0.0;
		km_rou03 = 0.0;
		km_rou04 = 0.0;
		km_gai01 = 0.0;
		km_gai02 = 0.0;
		km_gai03 = 0.0;
		km_gai04 = 0.0;
		km_kik01 = 0.0;
		km_kik02 = 0.0;
		km_kik03 = 0.0;
		km_kik04 = 0.0;
		km_kas01 = 0.0;
		km_kas02 = 0.0;
		km_kas03 = 0.0;
		km_kas04 = 0.0;
		km_kyuyo01 = 0.0;
		km_kyuyo02 = 0.0;
		km_kyuyo03 = 0.0;
		km_kyuyo04 = 0.0;
		km_tyo01 = 0.0;
		km_tyo02 = 0.0;
		km_tyo03 = 0.0;
		km_tyo04 = 0.0;
		km_kan01 = 0.0;
		km_kan02 = 0.0;
		km_gou01 = 0.0;
		km_gou02 = 0.0;
		km_gou03 = 0.0;
		km_gou04 = 0.0;
		km_yos01 = 0.0;
		km_yos02 = 0.0;
		km_yos03 = 0.0;
		km_yos04 = 0.0;
		km_ipn01 = 0.0;
		km_ipn02 = 0.0;
		km_yosankei = 0.0;
		km_zisekikei = 0.0;
		km_rie01 = 0.0;
		km_rie02 = 0.0;
		km_rie03 = 0.0;
		km_rie04 = 0.0;
		km_hok01 = 0.0;
		km_hok02 = 0.0;
		km_nen = 0;
		km_tuk = 0;
		km_sya011 = 0;
		km_sya012 = "";
		km_sya021 = 0;
		km_sya022 = "";
		km_sya031 = 0;
		km_sya032 = "";
		km_nendo = 0;
		km_kei01 = 0.0;
		km_kei02 = 0.0;
		km_man01 = 0.0;
		km_man02 = 0.0;
		km_man03 = 0.0;
		km_man04 = 0.0;
		km_man05 = 0.0;
		km_wom01 = 0.0;
		km_wom02 = 0.0;
		km_wom03 = 0.0;
		km_wom04 = 0.0;
		km_wom05 = 0.0;
		km_syoteate = 0.0;
		km_tingin = 0.0;
		km_syaho01 = 0.0;
		km_koyou01 = 0.0;
		km_kyosai01 = 0.0;
		km_fukuri01 = 0.0;
		km_kyu011 = 0.0;
		km_kyu012 = 0.0;
		km_kyu013 = 0.0;
		km_kyu021 = 0.0;
		km_kyu022 = 0.0;
		km_kyu023 = 0.0;
		km_kyu031 = 0.0;
		km_kyu032 = 0.0;
		km_kyu033 = 0.0;
		km_kyu014 = 0.0;
		km_kyu015 = 0.0;
		km_kyu016 = 0.0;
		km_kyu024 = 0.0;
		km_kyu025 = 0.0;
		km_kyu026 = 0.0;
		km_kyu034 = 0.0;
		km_kyu035 = 0.0;
		km_kyu036 = 0.0;
		km_kyuyokei = 0.0;
		km_syaho02 = 0.0;
		km_koyou02 = 0.0;
		km_kyosai02 = 0.0;
		km_fukuri02 = 0.0;
		km_kyuyosou = 0.0;
		km_rousaihoken = 0.0;
		km_kks01 = 0.0;
		km_kks02 = 0.0;
		km_kks03 = 0.0;
		km_kks04 = 0.0;
		km_chidai = 0.0;
		km_kukakin = 0.0;
		km_tusin = 0.0;
		km_hokenryo = 0.0;
		km_zappi = 0.0;
		km_sonota = 0.0;
		km_corins = 0.0;
		km_kaigihi = 0.0;
		km_kaihi = 0.0;
		km_anzen = 0.0;
		km_kousai = 0.0;
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_sw = 0;
		km_bikou1 = "";
		km_bikou2 = "";
		km_nyuno = "";
		km_syouhizei = 0.0;
		km_ritsu = 0.0;
		km_ukeoi = 0;
		km_ten = 0;
		kai00 = 0;
		Kai01 = "";
		Kai02 = "";
		Kai03 = "";
		Kai04 = "";
		Kai05 = "";
		Kai06 = "";
		Kai07 = "";
		Kai08 = "";
		Kai09 = "";
		Kai10 = "";
		Kai11 = "";
		Kai12 = "";
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	TIMESTAMP_STRUCT km_keidate;
	TIMESTAMP_STRUCT km_kaisi;
	TIMESTAMP_STRUCT km_owari;
	TIMESTAMP_STRUCT km_tyakou;
	TIMESTAMP_STRUCT km_kansei;
	TIMESTAMP_STRUCT km_kensa;
	std::string km_syoken;
	SQLFLOAT km_zai00;
	SQLFLOAT km_zai01;
	SQLFLOAT km_zai02;
	SQLFLOAT km_zai03;
	SQLFLOAT km_zai04;
	SQLFLOAT km_rou01;
	SQLFLOAT km_rou02;
	SQLFLOAT km_rou03;
	SQLFLOAT km_rou04;
	SQLFLOAT km_gai01;
	SQLFLOAT km_gai02;
	SQLFLOAT km_gai03;
	SQLFLOAT km_gai04;
	SQLFLOAT km_kik01;
	SQLFLOAT km_kik02;
	SQLFLOAT km_kik03;
	SQLFLOAT km_kik04;
	SQLFLOAT km_kas01;
	SQLFLOAT km_kas02;
	SQLFLOAT km_kas03;
	SQLFLOAT km_kas04;
	SQLFLOAT km_kyuyo01;
	SQLFLOAT km_kyuyo02;
	SQLFLOAT km_kyuyo03;
	SQLFLOAT km_kyuyo04;
	SQLFLOAT km_tyo01;
	SQLFLOAT km_tyo02;
	SQLFLOAT km_tyo03;
	SQLFLOAT km_tyo04;
	SQLFLOAT km_kan01;
	SQLFLOAT km_kan02;
	SQLFLOAT km_gou01;
	SQLFLOAT km_gou02;
	SQLFLOAT km_gou03;
	SQLFLOAT km_gou04;
	SQLFLOAT km_yos01;
	SQLFLOAT km_yos02;
	SQLFLOAT km_yos03;
	SQLFLOAT km_yos04;
	SQLFLOAT km_ipn01;
	SQLFLOAT km_ipn02;
	SQLFLOAT km_yosankei;
	SQLFLOAT km_zisekikei;
	SQLFLOAT km_rie01;
	SQLFLOAT km_rie02;
	SQLFLOAT km_rie03;
	SQLFLOAT km_rie04;
	SQLFLOAT km_hok01;
	SQLFLOAT km_hok02;
	SQLSMALLINT km_nen;
	SQLSMALLINT km_tuk;
	SQLINTEGER km_sya011;
	std::string km_sya012;
	SQLINTEGER km_sya021;
	std::string km_sya022;
	SQLINTEGER km_sya031;
	std::string km_sya032;
	SQLSMALLINT km_nendo;
	SQLFLOAT km_kei01;
	SQLFLOAT km_kei02;
	SQLFLOAT km_man01;
	SQLFLOAT km_man02;
	SQLFLOAT km_man03;
	SQLFLOAT km_man04;
	SQLFLOAT km_man05;
	SQLFLOAT km_wom01;
	SQLFLOAT km_wom02;
	SQLFLOAT km_wom03;
	SQLFLOAT km_wom04;
	SQLFLOAT km_wom05;
	SQLFLOAT km_syoteate;
	SQLFLOAT km_tingin;
	SQLFLOAT km_syaho01;
	SQLFLOAT km_koyou01;
	SQLFLOAT km_kyosai01;
	SQLFLOAT km_fukuri01;
	SQLFLOAT km_kyu011;
	SQLFLOAT km_kyu012;
	SQLFLOAT km_kyu013;
	SQLFLOAT km_kyu021;
	SQLFLOAT km_kyu022;
	SQLFLOAT km_kyu023;
	SQLFLOAT km_kyu031;
	SQLFLOAT km_kyu032;
	SQLFLOAT km_kyu033;
	SQLFLOAT km_kyu014;
	SQLFLOAT km_kyu015;
	SQLFLOAT km_kyu016;
	SQLFLOAT km_kyu024;
	SQLFLOAT km_kyu025;
	SQLFLOAT km_kyu026;
	SQLFLOAT km_kyu034;
	SQLFLOAT km_kyu035;
	SQLFLOAT km_kyu036;
	SQLFLOAT km_kyuyokei;
	SQLFLOAT km_syaho02;
	SQLFLOAT km_koyou02;
	SQLFLOAT km_kyosai02;
	SQLFLOAT km_fukuri02;
	SQLFLOAT km_kyuyosou;
	SQLFLOAT km_rousaihoken;
	SQLFLOAT km_kks01;
	SQLFLOAT km_kks02;
	SQLFLOAT km_kks03;
	SQLFLOAT km_kks04;
	SQLFLOAT km_chidai;
	SQLFLOAT km_kukakin;
	SQLFLOAT km_tusin;
	SQLFLOAT km_hokenryo;
	SQLFLOAT km_zappi;
	SQLFLOAT km_sonota;
	SQLFLOAT km_corins;
	SQLFLOAT km_kaigihi;
	SQLFLOAT km_kaihi;
	SQLFLOAT km_anzen;
	SQLFLOAT km_kousai;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_bikou1;
	std::string km_bikou2;
	std::string km_nyuno;
	SQLFLOAT km_syouhizei;
	TIMESTAMP_STRUCT km_mitsumori;
	SQLFLOAT km_ritsu;
	SQLINTEGER km_ukeoi;
	SQLINTEGER km_ten;
	SQLINTEGER kai00;
	std::string Kai01;
	std::string Kai02;
	std::string Kai03;
	std::string Kai04;
	std::string Kai05;
	std::string Kai06;
	std::string Kai07;
	std::string Kai08;
	std::string Kai09;
	std::string Kai10;
	std::string Kai11;
	std::string Kai12;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_keiyaku;
		} break;
		case 8: {
			ss << this->km_tsuika;
		} break;
		case 9: {
			ss << this->km_goukei;
		} break;
		case 10: {
			ss << this->km_yosan;
		} break;
		case 11: {
			ss << this->km_genka;
		} break;
		case 12: {
			COdbcDateTime date(&this->km_keidate);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->km_kaisi);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->km_owari);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->km_tyakou);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->km_kansei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->km_kensa);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->km_syoken;
		} break;
		case 19: {
			ss << this->km_zai00;
		} break;
		case 20: {
			ss << this->km_zai01;
		} break;
		case 21: {
			ss << this->km_zai02;
		} break;
		case 22: {
			ss << this->km_zai03;
		} break;
		case 23: {
			ss << this->km_zai04;
		} break;
		case 24: {
			ss << this->km_rou01;
		} break;
		case 25: {
			ss << this->km_rou02;
		} break;
		case 26: {
			ss << this->km_rou03;
		} break;
		case 27: {
			ss << this->km_rou04;
		} break;
		case 28: {
			ss << this->km_gai01;
		} break;
		case 29: {
			ss << this->km_gai02;
		} break;
		case 30: {
			ss << this->km_gai03;
		} break;
		case 31: {
			ss << this->km_gai04;
		} break;
		case 32: {
			ss << this->km_kik01;
		} break;
		case 33: {
			ss << this->km_kik02;
		} break;
		case 34: {
			ss << this->km_kik03;
		} break;
		case 35: {
			ss << this->km_kik04;
		} break;
		case 36: {
			ss << this->km_kas01;
		} break;
		case 37: {
			ss << this->km_kas02;
		} break;
		case 38: {
			ss << this->km_kas03;
		} break;
		case 39: {
			ss << this->km_kas04;
		} break;
		case 40: {
			ss << this->km_kyuyo01;
		} break;
		case 41: {
			ss << this->km_kyuyo02;
		} break;
		case 42: {
			ss << this->km_kyuyo03;
		} break;
		case 43: {
			ss << this->km_kyuyo04;
		} break;
		case 44: {
			ss << this->km_tyo01;
		} break;
		case 45: {
			ss << this->km_tyo02;
		} break;
		case 46: {
			ss << this->km_tyo03;
		} break;
		case 47: {
			ss << this->km_tyo04;
		} break;
		case 48: {
			ss << this->km_kan01;
		} break;
		case 49: {
			ss << this->km_kan02;
		} break;
		case 50: {
			ss << this->km_gou01;
		} break;
		case 51: {
			ss << this->km_gou02;
		} break;
		case 52: {
			ss << this->km_gou03;
		} break;
		case 53: {
			ss << this->km_gou04;
		} break;
		case 54: {
			ss << this->km_yos01;
		} break;
		case 55: {
			ss << this->km_yos02;
		} break;
		case 56: {
			ss << this->km_yos03;
		} break;
		case 57: {
			ss << this->km_yos04;
		} break;
		case 58: {
			ss << this->km_ipn01;
		} break;
		case 59: {
			ss << this->km_ipn02;
		} break;
		case 60: {
			ss << this->km_yosankei;
		} break;
		case 61: {
			ss << this->km_zisekikei;
		} break;
		case 62: {
			ss << this->km_rie01;
		} break;
		case 63: {
			ss << this->km_rie02;
		} break;
		case 64: {
			ss << this->km_rie03;
		} break;
		case 65: {
			ss << this->km_rie04;
		} break;
		case 66: {
			ss << this->km_hok01;
		} break;
		case 67: {
			ss << this->km_hok02;
		} break;
		case 68: {
			ss << this->km_nen;
		} break;
		case 69: {
			ss << this->km_tuk;
		} break;
		case 70: {
			ss << this->km_sya011;
		} break;
		case 71: {
			ss << this->km_sya012;
		} break;
		case 72: {
			ss << this->km_sya021;
		} break;
		case 73: {
			ss << this->km_sya022;
		} break;
		case 74: {
			ss << this->km_sya031;
		} break;
		case 75: {
			ss << this->km_sya032;
		} break;
		case 76: {
			ss << this->km_nendo;
		} break;
		case 77: {
			ss << this->km_kei01;
		} break;
		case 78: {
			ss << this->km_kei02;
		} break;
		case 79: {
			ss << this->km_man01;
		} break;
		case 80: {
			ss << this->km_man02;
		} break;
		case 81: {
			ss << this->km_man03;
		} break;
		case 82: {
			ss << this->km_man04;
		} break;
		case 83: {
			ss << this->km_man05;
		} break;
		case 84: {
			ss << this->km_wom01;
		} break;
		case 85: {
			ss << this->km_wom02;
		} break;
		case 86: {
			ss << this->km_wom03;
		} break;
		case 87: {
			ss << this->km_wom04;
		} break;
		case 88: {
			ss << this->km_wom05;
		} break;
		case 89: {
			ss << this->km_syoteate;
		} break;
		case 90: {
			ss << this->km_tingin;
		} break;
		case 91: {
			ss << this->km_syaho01;
		} break;
		case 92: {
			ss << this->km_koyou01;
		} break;
		case 93: {
			ss << this->km_kyosai01;
		} break;
		case 94: {
			ss << this->km_fukuri01;
		} break;
		case 95: {
			ss << this->km_kyu011;
		} break;
		case 96: {
			ss << this->km_kyu012;
		} break;
		case 97: {
			ss << this->km_kyu013;
		} break;
		case 98: {
			ss << this->km_kyu021;
		} break;
		case 99: {
			ss << this->km_kyu022;
		} break;
		case 100: {
			ss << this->km_kyu023;
		} break;
		case 101: {
			ss << this->km_kyu031;
		} break;
		case 102: {
			ss << this->km_kyu032;
		} break;
		case 103: {
			ss << this->km_kyu033;
		} break;
		case 104: {
			ss << this->km_kyu014;
		} break;
		case 105: {
			ss << this->km_kyu015;
		} break;
		case 106: {
			ss << this->km_kyu016;
		} break;
		case 107: {
			ss << this->km_kyu024;
		} break;
		case 108: {
			ss << this->km_kyu025;
		} break;
		case 109: {
			ss << this->km_kyu026;
		} break;
		case 110: {
			ss << this->km_kyu034;
		} break;
		case 111: {
			ss << this->km_kyu035;
		} break;
		case 112: {
			ss << this->km_kyu036;
		} break;
		case 113: {
			ss << this->km_kyuyokei;
		} break;
		case 114: {
			ss << this->km_syaho02;
		} break;
		case 115: {
			ss << this->km_koyou02;
		} break;
		case 116: {
			ss << this->km_kyosai02;
		} break;
		case 117: {
			ss << this->km_fukuri02;
		} break;
		case 118: {
			ss << this->km_kyuyosou;
		} break;
		case 119: {
			ss << this->km_rousaihoken;
		} break;
		case 120: {
			ss << this->km_kks01;
		} break;
		case 121: {
			ss << this->km_kks02;
		} break;
		case 122: {
			ss << this->km_kks03;
		} break;
		case 123: {
			ss << this->km_kks04;
		} break;
		case 124: {
			ss << this->km_chidai;
		} break;
		case 125: {
			ss << this->km_kukakin;
		} break;
		case 126: {
			ss << this->km_tusin;
		} break;
		case 127: {
			ss << this->km_hokenryo;
		} break;
		case 128: {
			ss << this->km_zappi;
		} break;
		case 129: {
			ss << this->km_sonota;
		} break;
		case 130: {
			ss << this->km_corins;
		} break;
		case 131: {
			ss << this->km_kaigihi;
		} break;
		case 132: {
			ss << this->km_kaihi;
		} break;
		case 133: {
			ss << this->km_anzen;
		} break;
		case 134: {
			ss << this->km_kousai;
		} break;
		case 135: {
			ss << this->km_hat030;
		} break;
		case 136: {
			ss << this->km_hat040;
		} break;
		case 137: {
			ss << this->km_hat050;
		} break;
		case 138: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 139: {
			ss << this->km_sw;
		} break;
		case 140: {
			ss << this->km_bikou1;
		} break;
		case 141: {
			ss << this->km_bikou2;
		} break;
		case 142: {
			ss << this->km_nyuno;
		} break;
		case 143: {
			ss << this->km_syouhizei;
		} break;
		case 144: {
			COdbcDateTime date(&this->km_mitsumori);
			ss << date.to_string();
		} break;
		case 145: {
			ss << this->km_ritsu;
		} break;
		case 146: {
			ss << this->km_ukeoi;
		} break;
		case 147: {
			ss << this->km_ten;
		} break;
		case 148: {
			ss << this->kai00;
		} break;
		case 149: {
			ss << this->Kai01;
		} break;
		case 150: {
			ss << this->Kai02;
		} break;
		case 151: {
			ss << this->Kai03;
		} break;
		case 152: {
			ss << this->Kai04;
		} break;
		case 153: {
			ss << this->Kai05;
		} break;
		case 154: {
			ss << this->Kai06;
		} break;
		case 155: {
			ss << this->Kai07;
		} break;
		case 156: {
			ss << this->Kai08;
		} break;
		case 157: {
			ss << this->Kai09;
		} break;
		case 158: {
			ss << this->Kai10;
		} break;
		case 159: {
			ss << this->Kai11;
		} break;
		case 160: {
			ss << this->Kai12;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_ukeoi : public COdbcTable {
public:
	CT_v_ukeoi() : COdbcTable() {
		m_TableName = "v_ukeoi";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "km_syoken,"
					  "km_zai00,"
					  "km_zai01,"
					  "km_zai02,"
					  "km_zai03,"
					  "km_zai04,"
					  "km_rou01,"
					  "km_rou02,"
					  "km_rou03,"
					  "km_rou04,"
					  "km_gai01,"
					  "km_gai02,"
					  "km_gai03,"
					  "km_gai04,"
					  "km_kik01,"
					  "km_kik02,"
					  "km_kik03,"
					  "km_kik04,"
					  "km_kas01,"
					  "km_kas02,"
					  "km_kas03,"
					  "km_kas04,"
					  "km_kyuyo01,"
					  "km_kyuyo02,"
					  "km_kyuyo03,"
					  "km_kyuyo04,"
					  "km_tyo01,"
					  "km_tyo02,"
					  "km_tyo03,"
					  "km_tyo04,"
					  "km_kan01,"
					  "km_kan02,"
					  "km_gou01,"
					  "km_gou02,"
					  "km_gou03,"
					  "km_gou04,"
					  "km_yos01,"
					  "km_yos02,"
					  "km_yos03,"
					  "km_yos04,"
					  "km_ipn01,"
					  "km_ipn02,"
					  "km_yosankei,"
					  "km_zisekikei,"
					  "km_rie01,"
					  "km_rie02,"
					  "km_rie03,"
					  "km_rie04,"
					  "km_hok01,"
					  "km_hok02,"
					  "km_nen,"
					  "km_tuk,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_sya031,"
					  "km_sya032,"
					  "km_nendo,"
					  "km_kei01,"
					  "km_kei02,"
					  "km_man01,"
					  "km_man02,"
					  "km_man03,"
					  "km_man04,"
					  "km_man05,"
					  "km_wom01,"
					  "km_wom02,"
					  "km_wom03,"
					  "km_wom04,"
					  "km_wom05,"
					  "km_syoteate,"
					  "km_tingin,"
					  "km_syaho01,"
					  "km_koyou01,"
					  "km_kyosai01,"
					  "km_fukuri01,"
					  "km_kyu011,"
					  "km_kyu012,"
					  "km_kyu013,"
					  "km_kyu021,"
					  "km_kyu022,"
					  "km_kyu023,"
					  "km_kyu031,"
					  "km_kyu032,"
					  "km_kyu033,"
					  "km_kyu014,"
					  "km_kyu015,"
					  "km_kyu016,"
					  "km_kyu024,"
					  "km_kyu025,"
					  "km_kyu026,"
					  "km_kyu034,"
					  "km_kyu035,"
					  "km_kyu036,"
					  "km_kyuyokei,"
					  "km_syaho02,"
					  "km_koyou02,"
					  "km_kyosai02,"
					  "km_fukuri02,"
					  "km_kyuyosou,"
					  "km_rousaihoken,"
					  "km_kks01,"
					  "km_kks02,"
					  "km_kks03,"
					  "km_kks04,"
					  "km_chidai,"
					  "km_kukakin,"
					  "km_tusin,"
					  "km_hokenryo,"
					  "km_zappi,"
					  "km_sonota,"
					  "km_corins,"
					  "km_kaigihi,"
					  "km_kaihi,"
					  "km_anzen,"
					  "km_kousai,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu,"
					  "km_ukeoi,"
					  "km_ten,"
					  "kai00,"
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08,"
					  "Kai09,"
					  "Kai10,"
					  "Kai11,"
					  "Kai12"
					  " FROM v_ukeoi";
		m_SqlINSERT = "INSERT INTO v_ukeoi ("
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "km_syoken,"
					  "km_zai00,"
					  "km_zai01,"
					  "km_zai02,"
					  "km_zai03,"
					  "km_zai04,"
					  "km_rou01,"
					  "km_rou02,"
					  "km_rou03,"
					  "km_rou04,"
					  "km_gai01,"
					  "km_gai02,"
					  "km_gai03,"
					  "km_gai04,"
					  "km_kik01,"
					  "km_kik02,"
					  "km_kik03,"
					  "km_kik04,"
					  "km_kas01,"
					  "km_kas02,"
					  "km_kas03,"
					  "km_kas04,"
					  "km_kyuyo01,"
					  "km_kyuyo02,"
					  "km_kyuyo03,"
					  "km_kyuyo04,"
					  "km_tyo01,"
					  "km_tyo02,"
					  "km_tyo03,"
					  "km_tyo04,"
					  "km_kan01,"
					  "km_kan02,"
					  "km_gou01,"
					  "km_gou02,"
					  "km_gou03,"
					  "km_gou04,"
					  "km_yos01,"
					  "km_yos02,"
					  "km_yos03,"
					  "km_yos04,"
					  "km_ipn01,"
					  "km_ipn02,"
					  "km_yosankei,"
					  "km_zisekikei,"
					  "km_rie01,"
					  "km_rie02,"
					  "km_rie03,"
					  "km_rie04,"
					  "km_hok01,"
					  "km_hok02,"
					  "km_nen,"
					  "km_tuk,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_sya031,"
					  "km_sya032,"
					  "km_nendo,"
					  "km_kei01,"
					  "km_kei02,"
					  "km_man01,"
					  "km_man02,"
					  "km_man03,"
					  "km_man04,"
					  "km_man05,"
					  "km_wom01,"
					  "km_wom02,"
					  "km_wom03,"
					  "km_wom04,"
					  "km_wom05,"
					  "km_syoteate,"
					  "km_tingin,"
					  "km_syaho01,"
					  "km_koyou01,"
					  "km_kyosai01,"
					  "km_fukuri01,"
					  "km_kyu011,"
					  "km_kyu012,"
					  "km_kyu013,"
					  "km_kyu021,"
					  "km_kyu022,"
					  "km_kyu023,"
					  "km_kyu031,"
					  "km_kyu032,"
					  "km_kyu033,"
					  "km_kyu014,"
					  "km_kyu015,"
					  "km_kyu016,"
					  "km_kyu024,"
					  "km_kyu025,"
					  "km_kyu026,"
					  "km_kyu034,"
					  "km_kyu035,"
					  "km_kyu036,"
					  "km_kyuyokei,"
					  "km_syaho02,"
					  "km_koyou02,"
					  "km_kyosai02,"
					  "km_fukuri02,"
					  "km_kyuyosou,"
					  "km_rousaihoken,"
					  "km_kks01,"
					  "km_kks02,"
					  "km_kks03,"
					  "km_kks04,"
					  "km_chidai,"
					  "km_kukakin,"
					  "km_tusin,"
					  "km_hokenryo,"
					  "km_zappi,"
					  "km_sonota,"
					  "km_corins,"
					  "km_kaigihi,"
					  "km_kaihi,"
					  "km_anzen,"
					  "km_kousai,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu,"
					  "km_ukeoi,"
					  "km_ten,"
					  "kai00,"
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08,"
					  "Kai09,"
					  "Kai10,"
					  "Kai11,"
					  "Kai12)"
					  " VALUES ( "
					  "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
					  "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
					  "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
					  "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_ukeoi SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_kensa = ?,"
					  "km_syoken = ?,"
					  "km_zai00 = ?,"
					  "km_zai01 = ?,"
					  "km_zai02 = ?,"
					  "km_zai03 = ?,"
					  "km_zai04 = ?,"
					  "km_rou01 = ?,"
					  "km_rou02 = ?,"
					  "km_rou03 = ?,"
					  "km_rou04 = ?,"
					  "km_gai01 = ?,"
					  "km_gai02 = ?,"
					  "km_gai03 = ?,"
					  "km_gai04 = ?,"
					  "km_kik01 = ?,"
					  "km_kik02 = ?,"
					  "km_kik03 = ?,"
					  "km_kik04 = ?,"
					  "km_kas01 = ?,"
					  "km_kas02 = ?,"
					  "km_kas03 = ?,"
					  "km_kas04 = ?,"
					  "km_kyuyo01 = ?,"
					  "km_kyuyo02 = ?,"
					  "km_kyuyo03 = ?,"
					  "km_kyuyo04 = ?,"
					  "km_tyo01 = ?,"
					  "km_tyo02 = ?,"
					  "km_tyo03 = ?,"
					  "km_tyo04 = ?,"
					  "km_kan01 = ?,"
					  "km_kan02 = ?,"
					  "km_gou01 = ?,"
					  "km_gou02 = ?,"
					  "km_gou03 = ?,"
					  "km_gou04 = ?,"
					  "km_yos01 = ?,"
					  "km_yos02 = ?,"
					  "km_yos03 = ?,"
					  "km_yos04 = ?,"
					  "km_ipn01 = ?,"
					  "km_ipn02 = ?,"
					  "km_yosankei = ?,"
					  "km_zisekikei = ?,"
					  "km_rie01 = ?,"
					  "km_rie02 = ?,"
					  "km_rie03 = ?,"
					  "km_rie04 = ?,"
					  "km_hok01 = ?,"
					  "km_hok02 = ?,"
					  "km_nen = ?,"
					  "km_tuk = ?,"
					  "km_sya011 = ?,"
					  "km_sya012 = ?,"
					  "km_sya021 = ?,"
					  "km_sya022 = ?,"
					  "km_sya031 = ?,"
					  "km_sya032 = ?,"
					  "km_nendo = ?,"
					  "km_kei01 = ?,"
					  "km_kei02 = ?,"
					  "km_man01 = ?,"
					  "km_man02 = ?,"
					  "km_man03 = ?,"
					  "km_man04 = ?,"
					  "km_man05 = ?,"
					  "km_wom01 = ?,"
					  "km_wom02 = ?,"
					  "km_wom03 = ?,"
					  "km_wom04 = ?,"
					  "km_wom05 = ?,"
					  "km_syoteate = ?,"
					  "km_tingin = ?,"
					  "km_syaho01 = ?,"
					  "km_koyou01 = ?,"
					  "km_kyosai01 = ?,"
					  "km_fukuri01 = ?,"
					  "km_kyu011 = ?,"
					  "km_kyu012 = ?,"
					  "km_kyu013 = ?,"
					  "km_kyu021 = ?,"
					  "km_kyu022 = ?,"
					  "km_kyu023 = ?,"
					  "km_kyu031 = ?,"
					  "km_kyu032 = ?,"
					  "km_kyu033 = ?,"
					  "km_kyu014 = ?,"
					  "km_kyu015 = ?,"
					  "km_kyu016 = ?,"
					  "km_kyu024 = ?,"
					  "km_kyu025 = ?,"
					  "km_kyu026 = ?,"
					  "km_kyu034 = ?,"
					  "km_kyu035 = ?,"
					  "km_kyu036 = ?,"
					  "km_kyuyokei = ?,"
					  "km_syaho02 = ?,"
					  "km_koyou02 = ?,"
					  "km_kyosai02 = ?,"
					  "km_fukuri02 = ?,"
					  "km_kyuyosou = ?,"
					  "km_rousaihoken = ?,"
					  "km_kks01 = ?,"
					  "km_kks02 = ?,"
					  "km_kks03 = ?,"
					  "km_kks04 = ?,"
					  "km_chidai = ?,"
					  "km_kukakin = ?,"
					  "km_tusin = ?,"
					  "km_hokenryo = ?,"
					  "km_zappi = ?,"
					  "km_sonota = ?,"
					  "km_corins = ?,"
					  "km_kaigihi = ?,"
					  "km_kaihi = ?,"
					  "km_anzen = ?,"
					  "km_kousai = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuno = ?,"
					  "km_syouhizei = ?,"
					  "km_mitsumori = ?,"
					  "km_ritsu = ?,"
					  "km_ukeoi = ?,"
					  "km_ten = ?,"
					  "kai00 = ?,"
					  "Kai01 = ?,"
					  "Kai02 = ?,"
					  "Kai03 = ?,"
					  "Kai04 = ?,"
					  "Kai05 = ?,"
					  "Kai06 = ?,"
					  "Kai07 = ?,"
					  "Kai08 = ?,"
					  "Kai09 = ?,"
					  "Kai10 = ?,"
					  "Kai11 = ?,"
					  "Kai12 = ?";

		m_SqlDELETE = "DELETE v_ukeoi ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_tsuika", "9", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_goukei", "10", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_keidate", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kaisi", "14", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_owari", "15", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_tyakou", "16", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kansei", "17", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kensa", "18", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_syoken", "19", "", "YES", "ntext", "1073741823", "2147483646", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_zai00", "20", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_zai01", "21", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_zai02", "22", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_zai03", "23", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_zai04", "24", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_rou01", "25", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_rou02", "26", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_rou03", "27", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_rou04", "28", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_gai01", "29", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_gai02", "30", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_gai03", "31", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_gai04", "32", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kik01", "33", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kik02", "34", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kik03", "35", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kik04", "36", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kas01", "37", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kas02", "38", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kas03", "39", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kas04", "40", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyuyo01", "41", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyuyo02", "42", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyuyo03", "43", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyuyo04", "44", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_tyo01", "45", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_tyo02", "46", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_tyo03", "47", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_tyo04", "48", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kan01", "49", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kan02", "50", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_gou01", "51", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_gou02", "52", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_gou03", "53", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_gou04", "54", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_yos01", "55", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_yos02", "56", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_yos03", "57", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_yos04", "58", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_ipn01", "59", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_ipn02", "60", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_yosankei", "61", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_zisekikei", "62", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_rie01", "63", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_rie02", "64", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_rie03", "65", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_rie04", "66", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_hok01", "67", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_hok02", "68", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_nen", "69", "", "YES", "smallint", "0", "0", "5", "0", "0", "", "",
					 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_tuk", "70", "", "YES", "smallint", "0", "0", "5", "0", "0", "", "",
					 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_sya011", "71", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_sya012", "72", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_sya021", "73", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_sya022", "74", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_sya031", "75", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_sya032", "76", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_nendo", "77", "", "YES", "smallint", "0", "0", "5", "0", "0", "",
					 "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kei01", "78", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kei02", "79", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_man01", "80", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_man02", "81", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_man03", "82", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_man04", "83", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_man05", "84", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_wom01", "85", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_wom02", "86", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_wom03", "87", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_wom04", "88", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_wom05", "89", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_syoteate", "90", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_tingin", "91", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_syaho01", "92", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_koyou01", "93", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyosai01", "94", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_fukuri01", "95", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu011", "96", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu012", "97", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu013", "98", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu021", "99", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu022", "100", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu023", "101", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu031", "102", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu032", "103", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu033", "104", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu014", "105", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu015", "106", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu016", "107", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu024", "108", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu025", "109", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu026", "110", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu034", "111", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu035", "112", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyu036", "113", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyuyokei", "114", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_syaho02", "115", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_koyou02", "116", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyosai02", "117", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_fukuri02", "118", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kyuyosou", "119", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_rousaihoken", "120", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kks01", "121", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kks02", "122", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kks03", "123", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kks04", "124", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_chidai", "125", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kukakin", "126", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_tusin", "127", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_hokenryo", "128", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_zappi", "129", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_sonota", "130", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_corins", "131", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kaigihi", "132", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kaihi", "133", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_anzen", "134", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_kousai", "135", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_hat030", "136", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_hat040", "137", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_hat050", "138", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_nyuudat", "139", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_sw", "140", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_bikou1", "141", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_bikou2", "142", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_nyuno", "143", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_syouhizei", "144", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_mitsumori", "145", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_ritsu", "146", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_ukeoi", "147", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "km_ten", "148", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "kai00", "149", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai01", "150", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai02", "151", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai03", "152", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai04", "153", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai05", "154", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai06", "155", "", "YES", "nvarchar", "30", "60", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai07", "156", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai08", "157", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai09", "158", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai10", "159", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai11", "160", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_ukeoi", "Kai12", "161", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_ukeoi() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_syoken = new char[MAXBUF];
		char *km_sya012 = new char[81];
		char *km_sya022 = new char[81];
		char *km_sya032 = new char[81];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		char *Kai01 = new char[101];
		char *Kai02 = new char[101];
		char *Kai03 = new char[101];
		char *Kai04 = new char[41];
		char *Kai05 = new char[101];
		char *Kai06 = new char[61];
		char *Kai07 = new char[41];
		char *Kai08 = new char[41];
		char *Kai09 = new char[101];
		char *Kai10 = new char[101];
		char *Kai11 = new char[101];
		char *Kai12 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_ukeoi rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				com->GetData(8, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.km_keidate, sizeof(rec.km_keidate), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.km_kaisi, sizeof(rec.km_kaisi), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.km_owari, sizeof(rec.km_owari), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.km_tyakou, sizeof(rec.km_tyakou), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.km_kansei, sizeof(rec.km_kansei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.km_kensa, sizeof(rec.km_kensa), 0);
				memset(km_syoken, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, km_syoken, 1048576, 0);
				rec.km_syoken = (char *)km_syoken;
				com->GetData(20, SQL_C_DOUBLE, &rec.km_zai00, sizeof(rec.km_zai00), 0);
				com->GetData(21, SQL_C_DOUBLE, &rec.km_zai01, sizeof(rec.km_zai01), 0);
				com->GetData(22, SQL_C_DOUBLE, &rec.km_zai02, sizeof(rec.km_zai02), 0);
				com->GetData(23, SQL_C_DOUBLE, &rec.km_zai03, sizeof(rec.km_zai03), 0);
				com->GetData(24, SQL_C_DOUBLE, &rec.km_zai04, sizeof(rec.km_zai04), 0);
				com->GetData(25, SQL_C_DOUBLE, &rec.km_rou01, sizeof(rec.km_rou01), 0);
				com->GetData(26, SQL_C_DOUBLE, &rec.km_rou02, sizeof(rec.km_rou02), 0);
				com->GetData(27, SQL_C_DOUBLE, &rec.km_rou03, sizeof(rec.km_rou03), 0);
				com->GetData(28, SQL_C_DOUBLE, &rec.km_rou04, sizeof(rec.km_rou04), 0);
				com->GetData(29, SQL_C_DOUBLE, &rec.km_gai01, sizeof(rec.km_gai01), 0);
				com->GetData(30, SQL_C_DOUBLE, &rec.km_gai02, sizeof(rec.km_gai02), 0);
				com->GetData(31, SQL_C_DOUBLE, &rec.km_gai03, sizeof(rec.km_gai03), 0);
				com->GetData(32, SQL_C_DOUBLE, &rec.km_gai04, sizeof(rec.km_gai04), 0);
				com->GetData(33, SQL_C_DOUBLE, &rec.km_kik01, sizeof(rec.km_kik01), 0);
				com->GetData(34, SQL_C_DOUBLE, &rec.km_kik02, sizeof(rec.km_kik02), 0);
				com->GetData(35, SQL_C_DOUBLE, &rec.km_kik03, sizeof(rec.km_kik03), 0);
				com->GetData(36, SQL_C_DOUBLE, &rec.km_kik04, sizeof(rec.km_kik04), 0);
				com->GetData(37, SQL_C_DOUBLE, &rec.km_kas01, sizeof(rec.km_kas01), 0);
				com->GetData(38, SQL_C_DOUBLE, &rec.km_kas02, sizeof(rec.km_kas02), 0);
				com->GetData(39, SQL_C_DOUBLE, &rec.km_kas03, sizeof(rec.km_kas03), 0);
				com->GetData(40, SQL_C_DOUBLE, &rec.km_kas04, sizeof(rec.km_kas04), 0);
				com->GetData(41, SQL_C_DOUBLE, &rec.km_kyuyo01, sizeof(rec.km_kyuyo01), 0);
				com->GetData(42, SQL_C_DOUBLE, &rec.km_kyuyo02, sizeof(rec.km_kyuyo02), 0);
				com->GetData(43, SQL_C_DOUBLE, &rec.km_kyuyo03, sizeof(rec.km_kyuyo03), 0);
				com->GetData(44, SQL_C_DOUBLE, &rec.km_kyuyo04, sizeof(rec.km_kyuyo04), 0);
				com->GetData(45, SQL_C_DOUBLE, &rec.km_tyo01, sizeof(rec.km_tyo01), 0);
				com->GetData(46, SQL_C_DOUBLE, &rec.km_tyo02, sizeof(rec.km_tyo02), 0);
				com->GetData(47, SQL_C_DOUBLE, &rec.km_tyo03, sizeof(rec.km_tyo03), 0);
				com->GetData(48, SQL_C_DOUBLE, &rec.km_tyo04, sizeof(rec.km_tyo04), 0);
				com->GetData(49, SQL_C_DOUBLE, &rec.km_kan01, sizeof(rec.km_kan01), 0);
				com->GetData(50, SQL_C_DOUBLE, &rec.km_kan02, sizeof(rec.km_kan02), 0);
				com->GetData(51, SQL_C_DOUBLE, &rec.km_gou01, sizeof(rec.km_gou01), 0);
				com->GetData(52, SQL_C_DOUBLE, &rec.km_gou02, sizeof(rec.km_gou02), 0);
				com->GetData(53, SQL_C_DOUBLE, &rec.km_gou03, sizeof(rec.km_gou03), 0);
				com->GetData(54, SQL_C_DOUBLE, &rec.km_gou04, sizeof(rec.km_gou04), 0);
				com->GetData(55, SQL_C_DOUBLE, &rec.km_yos01, sizeof(rec.km_yos01), 0);
				com->GetData(56, SQL_C_DOUBLE, &rec.km_yos02, sizeof(rec.km_yos02), 0);
				com->GetData(57, SQL_C_DOUBLE, &rec.km_yos03, sizeof(rec.km_yos03), 0);
				com->GetData(58, SQL_C_DOUBLE, &rec.km_yos04, sizeof(rec.km_yos04), 0);
				com->GetData(59, SQL_C_DOUBLE, &rec.km_ipn01, sizeof(rec.km_ipn01), 0);
				com->GetData(60, SQL_C_DOUBLE, &rec.km_ipn02, sizeof(rec.km_ipn02), 0);
				com->GetData(61, SQL_C_DOUBLE, &rec.km_yosankei, sizeof(rec.km_yosankei), 0);
				com->GetData(62, SQL_C_DOUBLE, &rec.km_zisekikei, sizeof(rec.km_zisekikei), 0);
				com->GetData(63, SQL_C_DOUBLE, &rec.km_rie01, sizeof(rec.km_rie01), 0);
				com->GetData(64, SQL_C_DOUBLE, &rec.km_rie02, sizeof(rec.km_rie02), 0);
				com->GetData(65, SQL_C_DOUBLE, &rec.km_rie03, sizeof(rec.km_rie03), 0);
				com->GetData(66, SQL_C_DOUBLE, &rec.km_rie04, sizeof(rec.km_rie04), 0);
				com->GetData(67, SQL_C_DOUBLE, &rec.km_hok01, sizeof(rec.km_hok01), 0);
				com->GetData(68, SQL_C_DOUBLE, &rec.km_hok02, sizeof(rec.km_hok02), 0);
				com->GetData(69, SQL_C_SHORT, &rec.km_nen, sizeof(rec.km_nen), 0);
				com->GetData(70, SQL_C_SHORT, &rec.km_tuk, sizeof(rec.km_tuk), 0);
				com->GetData(71, SQL_C_LONG, &rec.km_sya011, sizeof(rec.km_sya011), 0);
				memset(km_sya012, 0, 81);
				com->GetData(72, SQL_C_CHAR, km_sya012, 81, 0);
				rec.km_sya012 = (char *)km_sya012;
				com->GetData(73, SQL_C_LONG, &rec.km_sya021, sizeof(rec.km_sya021), 0);
				memset(km_sya022, 0, 81);
				com->GetData(74, SQL_C_CHAR, km_sya022, 81, 0);
				rec.km_sya022 = (char *)km_sya022;
				com->GetData(75, SQL_C_LONG, &rec.km_sya031, sizeof(rec.km_sya031), 0);
				memset(km_sya032, 0, 81);
				com->GetData(76, SQL_C_CHAR, km_sya032, 81, 0);
				rec.km_sya032 = (char *)km_sya032;
				com->GetData(77, SQL_C_SHORT, &rec.km_nendo, sizeof(rec.km_nendo), 0);
				com->GetData(78, SQL_C_DOUBLE, &rec.km_kei01, sizeof(rec.km_kei01), 0);
				com->GetData(79, SQL_C_DOUBLE, &rec.km_kei02, sizeof(rec.km_kei02), 0);
				com->GetData(80, SQL_C_DOUBLE, &rec.km_man01, sizeof(rec.km_man01), 0);
				com->GetData(81, SQL_C_DOUBLE, &rec.km_man02, sizeof(rec.km_man02), 0);
				com->GetData(82, SQL_C_DOUBLE, &rec.km_man03, sizeof(rec.km_man03), 0);
				com->GetData(83, SQL_C_DOUBLE, &rec.km_man04, sizeof(rec.km_man04), 0);
				com->GetData(84, SQL_C_DOUBLE, &rec.km_man05, sizeof(rec.km_man05), 0);
				com->GetData(85, SQL_C_DOUBLE, &rec.km_wom01, sizeof(rec.km_wom01), 0);
				com->GetData(86, SQL_C_DOUBLE, &rec.km_wom02, sizeof(rec.km_wom02), 0);
				com->GetData(87, SQL_C_DOUBLE, &rec.km_wom03, sizeof(rec.km_wom03), 0);
				com->GetData(88, SQL_C_DOUBLE, &rec.km_wom04, sizeof(rec.km_wom04), 0);
				com->GetData(89, SQL_C_DOUBLE, &rec.km_wom05, sizeof(rec.km_wom05), 0);
				com->GetData(90, SQL_C_DOUBLE, &rec.km_syoteate, sizeof(rec.km_syoteate), 0);
				com->GetData(91, SQL_C_DOUBLE, &rec.km_tingin, sizeof(rec.km_tingin), 0);
				com->GetData(92, SQL_C_DOUBLE, &rec.km_syaho01, sizeof(rec.km_syaho01), 0);
				com->GetData(93, SQL_C_DOUBLE, &rec.km_koyou01, sizeof(rec.km_koyou01), 0);
				com->GetData(94, SQL_C_DOUBLE, &rec.km_kyosai01, sizeof(rec.km_kyosai01), 0);
				com->GetData(95, SQL_C_DOUBLE, &rec.km_fukuri01, sizeof(rec.km_fukuri01), 0);
				com->GetData(96, SQL_C_DOUBLE, &rec.km_kyu011, sizeof(rec.km_kyu011), 0);
				com->GetData(97, SQL_C_DOUBLE, &rec.km_kyu012, sizeof(rec.km_kyu012), 0);
				com->GetData(98, SQL_C_DOUBLE, &rec.km_kyu013, sizeof(rec.km_kyu013), 0);
				com->GetData(99, SQL_C_DOUBLE, &rec.km_kyu021, sizeof(rec.km_kyu021), 0);
				com->GetData(100, SQL_C_DOUBLE, &rec.km_kyu022, sizeof(rec.km_kyu022), 0);
				com->GetData(101, SQL_C_DOUBLE, &rec.km_kyu023, sizeof(rec.km_kyu023), 0);
				com->GetData(102, SQL_C_DOUBLE, &rec.km_kyu031, sizeof(rec.km_kyu031), 0);
				com->GetData(103, SQL_C_DOUBLE, &rec.km_kyu032, sizeof(rec.km_kyu032), 0);
				com->GetData(104, SQL_C_DOUBLE, &rec.km_kyu033, sizeof(rec.km_kyu033), 0);
				com->GetData(105, SQL_C_DOUBLE, &rec.km_kyu014, sizeof(rec.km_kyu014), 0);
				com->GetData(106, SQL_C_DOUBLE, &rec.km_kyu015, sizeof(rec.km_kyu015), 0);
				com->GetData(107, SQL_C_DOUBLE, &rec.km_kyu016, sizeof(rec.km_kyu016), 0);
				com->GetData(108, SQL_C_DOUBLE, &rec.km_kyu024, sizeof(rec.km_kyu024), 0);
				com->GetData(109, SQL_C_DOUBLE, &rec.km_kyu025, sizeof(rec.km_kyu025), 0);
				com->GetData(110, SQL_C_DOUBLE, &rec.km_kyu026, sizeof(rec.km_kyu026), 0);
				com->GetData(111, SQL_C_DOUBLE, &rec.km_kyu034, sizeof(rec.km_kyu034), 0);
				com->GetData(112, SQL_C_DOUBLE, &rec.km_kyu035, sizeof(rec.km_kyu035), 0);
				com->GetData(113, SQL_C_DOUBLE, &rec.km_kyu036, sizeof(rec.km_kyu036), 0);
				com->GetData(114, SQL_C_DOUBLE, &rec.km_kyuyokei, sizeof(rec.km_kyuyokei), 0);
				com->GetData(115, SQL_C_DOUBLE, &rec.km_syaho02, sizeof(rec.km_syaho02), 0);
				com->GetData(116, SQL_C_DOUBLE, &rec.km_koyou02, sizeof(rec.km_koyou02), 0);
				com->GetData(117, SQL_C_DOUBLE, &rec.km_kyosai02, sizeof(rec.km_kyosai02), 0);
				com->GetData(118, SQL_C_DOUBLE, &rec.km_fukuri02, sizeof(rec.km_fukuri02), 0);
				com->GetData(119, SQL_C_DOUBLE, &rec.km_kyuyosou, sizeof(rec.km_kyuyosou), 0);
				com->GetData(120, SQL_C_DOUBLE, &rec.km_rousaihoken, sizeof(rec.km_rousaihoken), 0);
				com->GetData(121, SQL_C_DOUBLE, &rec.km_kks01, sizeof(rec.km_kks01), 0);
				com->GetData(122, SQL_C_DOUBLE, &rec.km_kks02, sizeof(rec.km_kks02), 0);
				com->GetData(123, SQL_C_DOUBLE, &rec.km_kks03, sizeof(rec.km_kks03), 0);
				com->GetData(124, SQL_C_DOUBLE, &rec.km_kks04, sizeof(rec.km_kks04), 0);
				com->GetData(125, SQL_C_DOUBLE, &rec.km_chidai, sizeof(rec.km_chidai), 0);
				com->GetData(126, SQL_C_DOUBLE, &rec.km_kukakin, sizeof(rec.km_kukakin), 0);
				com->GetData(127, SQL_C_DOUBLE, &rec.km_tusin, sizeof(rec.km_tusin), 0);
				com->GetData(128, SQL_C_DOUBLE, &rec.km_hokenryo, sizeof(rec.km_hokenryo), 0);
				com->GetData(129, SQL_C_DOUBLE, &rec.km_zappi, sizeof(rec.km_zappi), 0);
				com->GetData(130, SQL_C_DOUBLE, &rec.km_sonota, sizeof(rec.km_sonota), 0);
				com->GetData(131, SQL_C_DOUBLE, &rec.km_corins, sizeof(rec.km_corins), 0);
				com->GetData(132, SQL_C_DOUBLE, &rec.km_kaigihi, sizeof(rec.km_kaigihi), 0);
				com->GetData(133, SQL_C_DOUBLE, &rec.km_kaihi, sizeof(rec.km_kaihi), 0);
				com->GetData(134, SQL_C_DOUBLE, &rec.km_anzen, sizeof(rec.km_anzen), 0);
				com->GetData(135, SQL_C_DOUBLE, &rec.km_kousai, sizeof(rec.km_kousai), 0);
				memset(km_hat030, 0, 101);
				com->GetData(136, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(137, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(138, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				com->GetData(139, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(140, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_bikou1, 0, 511);
				com->GetData(141, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(142, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				memset(km_nyuno, 0, 101);
				com->GetData(143, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				com->GetData(144, SQL_C_DOUBLE, &rec.km_syouhizei, sizeof(rec.km_syouhizei), 0);
				com->GetData(145, SQL_C_TYPE_TIMESTAMP, &rec.km_mitsumori, sizeof(rec.km_mitsumori), 0);
				com->GetData(146, SQL_C_DOUBLE, &rec.km_ritsu, sizeof(rec.km_ritsu), 0);
				com->GetData(147, SQL_C_LONG, &rec.km_ukeoi, sizeof(rec.km_ukeoi), 0);
				com->GetData(148, SQL_C_LONG, &rec.km_ten, sizeof(rec.km_ten), 0);
				com->GetData(149, SQL_C_LONG, &rec.kai00, sizeof(rec.kai00), 0);
				memset(Kai01, 0, 101);
				com->GetData(150, SQL_C_CHAR, Kai01, 101, 0);
				rec.Kai01 = (char *)Kai01;
				memset(Kai02, 0, 101);
				com->GetData(151, SQL_C_CHAR, Kai02, 101, 0);
				rec.Kai02 = (char *)Kai02;
				memset(Kai03, 0, 101);
				com->GetData(152, SQL_C_CHAR, Kai03, 101, 0);
				rec.Kai03 = (char *)Kai03;
				memset(Kai04, 0, 41);
				com->GetData(153, SQL_C_CHAR, Kai04, 41, 0);
				rec.Kai04 = (char *)Kai04;
				memset(Kai05, 0, 101);
				com->GetData(154, SQL_C_CHAR, Kai05, 101, 0);
				rec.Kai05 = (char *)Kai05;
				memset(Kai06, 0, 61);
				com->GetData(155, SQL_C_CHAR, Kai06, 61, 0);
				rec.Kai06 = (char *)Kai06;
				memset(Kai07, 0, 41);
				com->GetData(156, SQL_C_CHAR, Kai07, 41, 0);
				rec.Kai07 = (char *)Kai07;
				memset(Kai08, 0, 41);
				com->GetData(157, SQL_C_CHAR, Kai08, 41, 0);
				rec.Kai08 = (char *)Kai08;
				memset(Kai09, 0, 101);
				com->GetData(158, SQL_C_CHAR, Kai09, 101, 0);
				rec.Kai09 = (char *)Kai09;
				memset(Kai10, 0, 101);
				com->GetData(159, SQL_C_CHAR, Kai10, 101, 0);
				rec.Kai10 = (char *)Kai10;
				memset(Kai11, 0, 101);
				com->GetData(160, SQL_C_CHAR, Kai11, 101, 0);
				rec.Kai11 = (char *)Kai11;
				memset(Kai12, 0, 101);
				com->GetData(161, SQL_C_CHAR, Kai12, 101, 0);
				rec.Kai12 = (char *)Kai12;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_syoken;
		delete[] km_sya012;
		delete[] km_sya022;
		delete[] km_sya032;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		delete[] Kai01;
		delete[] Kai02;
		delete[] Kai03;
		delete[] Kai04;
		delete[] Kai05;
		delete[] Kai06;
		delete[] Kai07;
		delete[] Kai08;
		delete[] Kai09;
		delete[] Kai10;
		delete[] Kai11;
		delete[] Kai12;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_ukeoi operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_ukeoi &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_ukeoi rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_ukeoi> m_Data;
};
class CR_t_koukeireki : public COdbcRecord {
public:
	CR_t_koukeireki() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_koukeireki() {}

	void Initialize() {
		kr_index = 0;
		kr_syacd = 0;
		kr_nengo = "";
		kr_nendo = 0;
		kr_tuki = 0;
		kr_kouji = 0;
		kr_name = "";
		kr_no = "";
		kr_hat = "";
		kr_syozoku = "";
		kr_motouke = "";
		kr_syokumu = "";
		kr_bikou1 = "";
	}

public:
	SQLINTEGER kr_index;
	SQLINTEGER kr_syacd;
	std::string kr_nengo;
	SQLINTEGER kr_nendo;
	SQLINTEGER kr_tuki;
	SQLINTEGER kr_kouji;
	std::string kr_name;
	std::string kr_no;
	TIMESTAMP_STRUCT kr_kaisi;
	TIMESTAMP_STRUCT kr_owari;
	std::string kr_hat;
	std::string kr_syozoku;
	std::string kr_motouke;
	std::string kr_syokumu;
	std::string kr_bikou1;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kr_index;
		} break;
		case 1: {
			ss << this->kr_syacd;
		} break;
		case 2: {
			ss << this->kr_nengo;
		} break;
		case 3: {
			ss << this->kr_nendo;
		} break;
		case 4: {
			ss << this->kr_tuki;
		} break;
		case 5: {
			ss << this->kr_kouji;
		} break;
		case 6: {
			ss << this->kr_name;
		} break;
		case 7: {
			ss << this->kr_no;
		} break;
		case 8: {
			COdbcDateTime date(&this->kr_kaisi);
			ss << date.to_string();
		} break;
		case 9: {
			COdbcDateTime date(&this->kr_owari);
			ss << date.to_string();
		} break;
		case 10: {
			ss << this->kr_hat;
		} break;
		case 11: {
			ss << this->kr_syozoku;
		} break;
		case 12: {
			ss << this->kr_motouke;
		} break;
		case 13: {
			ss << this->kr_syokumu;
		} break;
		case 14: {
			ss << this->kr_bikou1;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_koukeireki : public COdbcTable {
public:
	CT_t_koukeireki() : COdbcTable() {
		m_TableName = "t_koukeireki";
		m_SqlSELECT = "SELECT "
					  "kr_index,"
					  "kr_syacd,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_tuki,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1"
					  " FROM t_koukeireki";
		m_SqlINSERT = "INSERT INTO t_koukeireki ("
					  "kr_syacd,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_tuki,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_koukeireki SET "
					  "kr_syacd = ?,"
					  "kr_nengo = ?,"
					  "kr_nendo = ?,"
					  "kr_tuki = ?,"
					  "kr_kouji = ?,"
					  "kr_name = ?,"
					  "kr_no = ?,"
					  "kr_kaisi = ?,"
					  "kr_owari = ?,"
					  "kr_hat = ?,"
					  "kr_syozoku = ?,"
					  "kr_motouke = ?,"
					  "kr_syokumu = ?,"
					  "kr_bikou1 = ?";

		m_SqlDELETE = "DELETE t_koukeireki ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 1, _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_syacd", "2", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_nengo", "3", "", "NO", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_nendo", "4", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_tuki", "5", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_kouji", "6", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_name", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_no", "8", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_kaisi", "9", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_owari", "10", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_hat", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_syozoku", "12", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_motouke", "13", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_syokumu", "14", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koukeireki", "kr_bikou1", "15", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_koukeireki", "kr_index", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_koukeireki() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *kr_nengo = new char[101];
		char *kr_name = new char[511];
		char *kr_no = new char[511];
		char *kr_hat = new char[511];
		char *kr_syozoku = new char[511];
		char *kr_motouke = new char[101];
		char *kr_syokumu = new char[101];
		char *kr_bikou1 = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_koukeireki rec;
				com->GetData(1, SQL_C_LONG, &rec.kr_index, sizeof(rec.kr_index), 0);
				com->GetData(2, SQL_C_LONG, &rec.kr_syacd, sizeof(rec.kr_syacd), 0);
				memset(kr_nengo, 0, 101);
				com->GetData(3, SQL_C_CHAR, kr_nengo, 101, 0);
				rec.kr_nengo = (char *)kr_nengo;
				com->GetData(4, SQL_C_LONG, &rec.kr_nendo, sizeof(rec.kr_nendo), 0);
				com->GetData(5, SQL_C_LONG, &rec.kr_tuki, sizeof(rec.kr_tuki), 0);
				com->GetData(6, SQL_C_LONG, &rec.kr_kouji, sizeof(rec.kr_kouji), 0);
				memset(kr_name, 0, 511);
				com->GetData(7, SQL_C_CHAR, kr_name, 511, 0);
				rec.kr_name = (char *)kr_name;
				memset(kr_no, 0, 511);
				com->GetData(8, SQL_C_CHAR, kr_no, 511, 0);
				rec.kr_no = (char *)kr_no;
				com->GetData(9, SQL_C_TYPE_TIMESTAMP, &rec.kr_kaisi, sizeof(rec.kr_kaisi), 0);
				com->GetData(10, SQL_C_TYPE_TIMESTAMP, &rec.kr_owari, sizeof(rec.kr_owari), 0);
				memset(kr_hat, 0, 511);
				com->GetData(11, SQL_C_CHAR, kr_hat, 511, 0);
				rec.kr_hat = (char *)kr_hat;
				memset(kr_syozoku, 0, 511);
				com->GetData(12, SQL_C_CHAR, kr_syozoku, 511, 0);
				rec.kr_syozoku = (char *)kr_syozoku;
				memset(kr_motouke, 0, 101);
				com->GetData(13, SQL_C_CHAR, kr_motouke, 101, 0);
				rec.kr_motouke = (char *)kr_motouke;
				memset(kr_syokumu, 0, 101);
				com->GetData(14, SQL_C_CHAR, kr_syokumu, 101, 0);
				rec.kr_syokumu = (char *)kr_syokumu;
				memset(kr_bikou1, 0, 511);
				com->GetData(15, SQL_C_CHAR, kr_bikou1, 511, 0);
				rec.kr_bikou1 = (char *)kr_bikou1;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] kr_nengo;
		delete[] kr_name;
		delete[] kr_no;
		delete[] kr_hat;
		delete[] kr_syozoku;
		delete[] kr_motouke;
		delete[] kr_syokumu;
		delete[] kr_bikou1;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_koukeireki operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_koukeireki &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_koukeireki rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_koukeireki> m_Data;
};
class CR_t_koujiyobi_b : public COdbcRecord {
public:
	CR_t_koujiyobi_b() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_koujiyobi_b() {}

	void Initialize() {
		yo_工事コード = 0;
		yo_工事名 = "";
		yo_工事番号 = "";
		yo_工種ｺｰﾄﾞ = 0;
		yo_工事種別 = "";
		yo_発注元ｺｰﾄﾞ = 0;
		yo_発注元 = "";
		yo_契約金額 = 0.0;
		yo_追加金額 = 0.0;
		yo_合計金額 = 0.0;
		yo_実行予算 = 0.0;
		yo_実際原価 = 0.0;
		yo_現場代理人所見 = "";
		yo_営業所見 = "";
		yo_HAT030 = "";
		yo_HAT040 = "";
		yo_HAT050 = "";
		yo_sw = 0;
		yo_bikou1 = "";
		yo_bikou2 = "";
		yo_nyuno = "";
		yo_type = 0;
		yo_sya011 = 0;
		yo_sya012 = "";
		memset(&yo_yoteinuki, 0, sizeof(yo_yoteinuki));
		memset(&yo_yoteikomi, 0, sizeof(yo_yoteikomi));
	}

public:
	SQLINTEGER yo_工事コード;
	std::string yo_工事名;
	std::string yo_工事番号;
	SQLINTEGER yo_工種ｺｰﾄﾞ;
	std::string yo_工事種別;
	SQLINTEGER yo_発注元ｺｰﾄﾞ;
	std::string yo_発注元;
	SQLFLOAT yo_契約金額;
	SQLFLOAT yo_追加金額;
	SQLFLOAT yo_合計金額;
	SQLFLOAT yo_実行予算;
	SQLFLOAT yo_実際原価;
	TIMESTAMP_STRUCT yo_契約日付;
	TIMESTAMP_STRUCT yo_工期;
	TIMESTAMP_STRUCT yo_工期終了;
	TIMESTAMP_STRUCT yo_着工日付;
	TIMESTAMP_STRUCT yo_完成日付;
	TIMESTAMP_STRUCT yo_検査引渡日;
	std::string yo_現場代理人所見;
	std::string yo_営業所見;
	std::string yo_HAT030;
	std::string yo_HAT040;
	std::string yo_HAT050;
	TIMESTAMP_STRUCT yo_nyuudat;
	SQLCHAR yo_sw;
	std::string yo_bikou1;
	std::string yo_bikou2;
	std::string yo_nyuno;
	TIMESTAMP_STRUCT yo_sinsadat;
	TIMESTAMP_STRUCT yo_mitsumori;
	SQLINTEGER yo_type;
	SQLINTEGER yo_sya011;
	std::string yo_sya012;
	TIMESTAMP_STRUCT yo_koukoku;
	SQL_NUMERIC_STRUCT yo_yoteinuki;
	SQL_NUMERIC_STRUCT yo_yoteikomi;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->yo_工事コード;
		} break;
		case 1: {
			ss << this->yo_工事名;
		} break;
		case 2: {
			ss << this->yo_工事番号;
		} break;
		case 3: {
			ss << this->yo_工種ｺｰﾄﾞ;
		} break;
		case 4: {
			ss << this->yo_工事種別;
		} break;
		case 5: {
			ss << this->yo_発注元ｺｰﾄﾞ;
		} break;
		case 6: {
			ss << this->yo_発注元;
		} break;
		case 7: {
			ss << this->yo_契約金額;
		} break;
		case 8: {
			ss << this->yo_追加金額;
		} break;
		case 9: {
			ss << this->yo_合計金額;
		} break;
		case 10: {
			ss << this->yo_実行予算;
		} break;
		case 11: {
			ss << this->yo_実際原価;
		} break;
		case 12: {
			COdbcDateTime date(&this->yo_契約日付);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->yo_工期);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->yo_工期終了);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->yo_着工日付);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->yo_完成日付);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->yo_検査引渡日);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->yo_現場代理人所見;
		} break;
		case 19: {
			ss << this->yo_営業所見;
		} break;
		case 20: {
			ss << this->yo_HAT030;
		} break;
		case 21: {
			ss << this->yo_HAT040;
		} break;
		case 22: {
			ss << this->yo_HAT050;
		} break;
		case 23: {
			COdbcDateTime date(&this->yo_nyuudat);
			ss << date.to_string();
		} break;
		case 24: {
			ss << this->yo_sw;
		} break;
		case 25: {
			ss << this->yo_bikou1;
		} break;
		case 26: {
			ss << this->yo_bikou2;
		} break;
		case 27: {
			ss << this->yo_nyuno;
		} break;
		case 28: {
			COdbcDateTime date(&this->yo_sinsadat);
			ss << date.to_string();
		} break;
		case 29: {
			COdbcDateTime date(&this->yo_mitsumori);
			ss << date.to_string();
		} break;
		case 30: {
			ss << this->yo_type;
		} break;
		case 31: {
			ss << this->yo_sya011;
		} break;
		case 32: {
			ss << this->yo_sya012;
		} break;
		case 33: {
			COdbcDateTime date(&this->yo_koukoku);
			ss << date.to_string();
		} break;
		case 34: {
			ss << COdbcColumn::NumericToString(&this->yo_yoteinuki);
		} break;
		case 35: {
			ss << COdbcColumn::NumericToString(&this->yo_yoteikomi);
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_koujiyobi_b : public COdbcTable {
public:
	CT_t_koujiyobi_b() : COdbcTable() {
		m_TableName = "t_koujiyobi_b";
		m_SqlSELECT = "SELECT "
					  "yo_工事コード,"
					  "yo_工事名,"
					  "yo_工事番号,"
					  "yo_工種ｺｰﾄﾞ,"
					  "yo_工事種別,"
					  "yo_発注元ｺｰﾄﾞ,"
					  "yo_発注元,"
					  "yo_契約金額,"
					  "yo_追加金額,"
					  "yo_合計金額,"
					  "yo_実行予算,"
					  "yo_実際原価,"
					  "yo_契約日付,"
					  "yo_工期,"
					  "yo_工期終了,"
					  "yo_着工日付,"
					  "yo_完成日付,"
					  "yo_検査引渡日,"
					  "yo_現場代理人所見,"
					  "yo_営業所見,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012,"
					  "yo_koukoku,"
					  "yo_yoteinuki,"
					  "yo_yoteikomi"
					  " FROM t_koujiyobi_b";
		m_SqlINSERT = "INSERT INTO t_koujiyobi_b ("
					  "yo_工事コード,"
					  "yo_工事名,"
					  "yo_工事番号,"
					  "yo_工種ｺｰﾄﾞ,"
					  "yo_工事種別,"
					  "yo_発注元ｺｰﾄﾞ,"
					  "yo_発注元,"
					  "yo_契約金額,"
					  "yo_追加金額,"
					  "yo_合計金額,"
					  "yo_実行予算,"
					  "yo_実際原価,"
					  "yo_契約日付,"
					  "yo_工期,"
					  "yo_工期終了,"
					  "yo_着工日付,"
					  "yo_完成日付,"
					  "yo_検査引渡日,"
					  "yo_現場代理人所見,"
					  "yo_営業所見,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012,"
					  "yo_koukoku,"
					  "yo_yoteinuki,"
					  "yo_yoteikomi)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_koujiyobi_b SET "
					  "yo_工事名 = ?,"
					  "yo_工事番号 = ?,"
					  "yo_工種ｺｰﾄﾞ = ?,"
					  "yo_工事種別 = ?,"
					  "yo_発注元ｺｰﾄﾞ = ?,"
					  "yo_発注元 = ?,"
					  "yo_契約金額 = ?,"
					  "yo_追加金額 = ?,"
					  "yo_合計金額 = ?,"
					  "yo_実行予算 = ?,"
					  "yo_実際原価 = ?,"
					  "yo_契約日付 = ?,"
					  "yo_工期 = ?,"
					  "yo_工期終了 = ?,"
					  "yo_着工日付 = ?,"
					  "yo_完成日付 = ?,"
					  "yo_検査引渡日 = ?,"
					  "yo_現場代理人所見 = ?,"
					  "yo_営業所見 = ?,"
					  "yo_HAT030 = ?,"
					  "yo_HAT040 = ?,"
					  "yo_HAT050 = ?,"
					  "yo_nyuudat = ?,"
					  "yo_sw = ?,"
					  "yo_bikou1 = ?,"
					  "yo_bikou2 = ?,"
					  "yo_nyuno = ?,"
					  "yo_sinsadat = ?,"
					  "yo_mitsumori = ?,"
					  "yo_type = ?,"
					  "yo_sya011 = ?,"
					  "yo_sya012 = ?,"
					  "yo_koukoku = ?,"
					  "yo_yoteinuki = ?,"
					  "yo_yoteikomi = ?";

		m_SqlDELETE = "DELETE t_koujiyobi_b ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_工事コード", "1", "", "NO", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_工事名", "2", "", "NO", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_工事番号", "3", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_工種ｺｰﾄﾞ", "4", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_工事種別", "5", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_発注元ｺｰﾄﾞ", "6", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_発注元", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_契約金額", "8", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_追加金額", "9", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_合計金額", "10", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_実行予算", "11", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_実際原価", "12", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_契約日付", "13", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_工期", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_工期終了", "15", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_着工日付", "16", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_完成日付", "17", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_検査引渡日", "18", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_現場代理人所見", "19", "", "YES", "ntext", "1073741823",
					 "2147483646", "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_営業所見", "20", "", "YES", "ntext", "1073741823",
					 "2147483646", "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_HAT030", "21", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_HAT040", "22", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_HAT050", "23", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_nyuudat", "24", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_sw", "25", "", "NO", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_bikou1", "26", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_bikou2", "27", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_nyuno", "28", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_sinsadat", "29", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_mitsumori", "30", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_type", "31", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_sya011", "32", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_sya012", "33", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_koukoku", "34", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_yoteinuki", "35", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi_b", "yo_yoteikomi", "36", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_koujiyobi_b", "yo_工事コード", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_koujiyobi_b() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *yo_工事名 = new char[511];
		char *yo_工事番号 = new char[511];
		char *yo_工事種別 = new char[101];
		char *yo_発注元 = new char[511];
		char *yo_現場代理人所見 = new char[MAXBUF];
		char *yo_営業所見 = new char[MAXBUF];
		char *yo_HAT030 = new char[101];
		char *yo_HAT040 = new char[101];
		char *yo_HAT050 = new char[101];
		char *yo_bikou1 = new char[511];
		char *yo_bikou2 = new char[511];
		char *yo_nyuno = new char[101];
		char *yo_sya012 = new char[81];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_koujiyobi_b rec;
				com->GetData(1, SQL_C_LONG, &rec.yo_工事コード, sizeof(rec.yo_工事コード), 0);
				memset(yo_工事名, 0, 511);
				com->GetData(2, SQL_C_CHAR, yo_工事名, 511, 0);
				rec.yo_工事名 = (char *)yo_工事名;
				memset(yo_工事番号, 0, 511);
				com->GetData(3, SQL_C_CHAR, yo_工事番号, 511, 0);
				rec.yo_工事番号 = (char *)yo_工事番号;
				com->GetData(4, SQL_C_LONG, &rec.yo_工種ｺｰﾄﾞ, sizeof(rec.yo_工種ｺｰﾄﾞ), 0);
				memset(yo_工事種別, 0, 101);
				com->GetData(5, SQL_C_CHAR, yo_工事種別, 101, 0);
				rec.yo_工事種別 = (char *)yo_工事種別;
				com->GetData(6, SQL_C_LONG, &rec.yo_発注元ｺｰﾄﾞ, sizeof(rec.yo_発注元ｺｰﾄﾞ), 0);
				memset(yo_発注元, 0, 511);
				com->GetData(7, SQL_C_CHAR, yo_発注元, 511, 0);
				rec.yo_発注元 = (char *)yo_発注元;
				com->GetData(8, SQL_C_DOUBLE, &rec.yo_契約金額, sizeof(rec.yo_契約金額), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.yo_追加金額, sizeof(rec.yo_追加金額), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.yo_合計金額, sizeof(rec.yo_合計金額), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.yo_実行予算, sizeof(rec.yo_実行予算), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.yo_実際原価, sizeof(rec.yo_実際原価), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.yo_契約日付, sizeof(rec.yo_契約日付), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期, sizeof(rec.yo_工期), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期終了, sizeof(rec.yo_工期終了), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.yo_着工日付, sizeof(rec.yo_着工日付), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.yo_完成日付, sizeof(rec.yo_完成日付), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.yo_検査引渡日, sizeof(rec.yo_検査引渡日), 0);
				memset(yo_現場代理人所見, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, yo_現場代理人所見, 1048576, 0);
				rec.yo_現場代理人所見 = (char *)yo_現場代理人所見;
				memset(yo_営業所見, 0, 1048576);
				com->GetData(20, SQL_C_CHAR, yo_営業所見, 1048576, 0);
				rec.yo_営業所見 = (char *)yo_営業所見;
				memset(yo_HAT030, 0, 101);
				com->GetData(21, SQL_C_CHAR, yo_HAT030, 101, 0);
				rec.yo_HAT030 = (char *)yo_HAT030;
				memset(yo_HAT040, 0, 101);
				com->GetData(22, SQL_C_CHAR, yo_HAT040, 101, 0);
				rec.yo_HAT040 = (char *)yo_HAT040;
				memset(yo_HAT050, 0, 101);
				com->GetData(23, SQL_C_CHAR, yo_HAT050, 101, 0);
				rec.yo_HAT050 = (char *)yo_HAT050;
				com->GetData(24, SQL_C_TYPE_TIMESTAMP, &rec.yo_nyuudat, sizeof(rec.yo_nyuudat), 0);
				com->GetData(25, SQL_C_CHAR, &rec.yo_sw, sizeof(rec.yo_sw), 0);
				memset(yo_bikou1, 0, 511);
				com->GetData(26, SQL_C_CHAR, yo_bikou1, 511, 0);
				rec.yo_bikou1 = (char *)yo_bikou1;
				memset(yo_bikou2, 0, 511);
				com->GetData(27, SQL_C_CHAR, yo_bikou2, 511, 0);
				rec.yo_bikou2 = (char *)yo_bikou2;
				memset(yo_nyuno, 0, 101);
				com->GetData(28, SQL_C_CHAR, yo_nyuno, 101, 0);
				rec.yo_nyuno = (char *)yo_nyuno;
				com->GetData(29, SQL_C_TYPE_TIMESTAMP, &rec.yo_sinsadat, sizeof(rec.yo_sinsadat), 0);
				com->GetData(30, SQL_C_TYPE_TIMESTAMP, &rec.yo_mitsumori, sizeof(rec.yo_mitsumori), 0);
				com->GetData(31, SQL_C_LONG, &rec.yo_type, sizeof(rec.yo_type), 0);
				com->GetData(32, SQL_C_LONG, &rec.yo_sya011, sizeof(rec.yo_sya011), 0);
				memset(yo_sya012, 0, 81);
				com->GetData(33, SQL_C_CHAR, yo_sya012, 81, 0);
				rec.yo_sya012 = (char *)yo_sya012;
				com->GetData(34, SQL_C_TYPE_TIMESTAMP, &rec.yo_koukoku, sizeof(rec.yo_koukoku), 0);
				com->GetData(35, SQL_C_NUMERIC, &rec.yo_yoteinuki, sizeof(rec.yo_yoteinuki), 0);
				com->GetData(36, SQL_C_NUMERIC, &rec.yo_yoteikomi, sizeof(rec.yo_yoteikomi), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] yo_工事名;
		delete[] yo_工事番号;
		delete[] yo_工事種別;
		delete[] yo_発注元;
		delete[] yo_現場代理人所見;
		delete[] yo_営業所見;
		delete[] yo_HAT030;
		delete[] yo_HAT040;
		delete[] yo_HAT050;
		delete[] yo_bikou1;
		delete[] yo_bikou2;
		delete[] yo_nyuno;
		delete[] yo_sya012;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_koujiyobi_b operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_koujiyobi_b &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_koujiyobi_b rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_koujiyobi_b> m_Data;
};
class CR_t_meisaib : public COdbcRecord {
public:
	CR_t_meisaib() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_meisaib() {}

	void Initialize() {
		mes_id = 0;
		mes_kouji = 0;
		mes_gyo = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		mes_syukei = 0;
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	SQLINTEGER mes_gyo;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQLINTEGER mes_syukei;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_id;
		} break;
		case 1: {
			ss << this->mes_kouji;
		} break;
		case 2: {
			ss << this->mes_gyo;
		} break;
		case 3: {
			ss << this->mes_name;
		} break;
		case 4: {
			ss << this->mes_kikaku;
		} break;
		case 5: {
			ss << this->mes_suu;
		} break;
		case 6: {
			ss << this->mes_tani;
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 8: {
			ss << this->mes_syukei;
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 10: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_meisaib : public COdbcTable {
public:
	CT_t_meisaib() : COdbcTable() {
		m_TableName = "t_meisaib";
		m_SqlSELECT = "SELECT "
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM t_meisaib";
		m_SqlINSERT = "INSERT INTO t_meisaib ("
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_meisaib SET "
					  "mes_kouji = ?,"
					  "mes_gyo = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_syukei = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE t_meisaib ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_name", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_kikaku", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_suu", "6", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_tani", "7", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_tanka", "8", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_syukei", "9", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_kingaku", "10", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisaib", "mes_tekiyou", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_meisaib_1", "mes_id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_meisaib() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_meisaib rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				memset(mes_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(5, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(6, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(7, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(8, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(9, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_meisaib operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_meisaib &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_meisaib rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_meisaib> m_Data;
};
class CR_bk_meisai : public COdbcRecord {
public:
	CR_bk_meisai() : COdbcRecord() { Initialize(); }
	virtual ~CR_bk_meisai() {}

	void Initialize() {
		mes_id = 0;
		mes_kouji = 0;
		mes_gyo = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		mes_syukei = 0;
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	SQLINTEGER mes_gyo;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQLINTEGER mes_syukei;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_id;
		} break;
		case 1: {
			ss << this->mes_kouji;
		} break;
		case 2: {
			ss << this->mes_gyo;
		} break;
		case 3: {
			ss << this->mes_name;
		} break;
		case 4: {
			ss << this->mes_kikaku;
		} break;
		case 5: {
			ss << this->mes_suu;
		} break;
		case 6: {
			ss << this->mes_tani;
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 8: {
			ss << this->mes_syukei;
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 10: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_bk_meisai : public COdbcTable {
public:
	CT_bk_meisai() : COdbcTable() {
		m_TableName = "bk_meisai";
		m_SqlSELECT = "SELECT "
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM bk_meisai";
		m_SqlINSERT = "INSERT INTO bk_meisai ("
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE bk_meisai SET "
					  "mes_id = ?,"
					  "mes_kouji = ?,"
					  "mes_gyo = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_syukei = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE bk_meisai ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_name", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_kikaku", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_suu", "6", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_tani", "7", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_tanka", "8", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_syukei", "9", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_kingaku", "10", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "bk_meisai", "mes_tekiyou", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_bk_meisai() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_bk_meisai rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				memset(mes_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(5, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(6, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(7, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(8, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(9, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_bk_meisai operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_bk_meisai &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_bk_meisai rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_bk_meisai> m_Data;
};
class CR_dtproperties : public COdbcRecord {
public:
	CR_dtproperties() : COdbcRecord() { Initialize(); }
	virtual ~CR_dtproperties() {}

	void Initialize() {
		id = 0;
		objectid = 0;
		property = "";
		value = "";
		uvalue = "";
		version = 0;
	}

public:
	SQLINTEGER id;
	SQLINTEGER objectid;
	std::string property;
	std::string value;
	std::string uvalue;
	SQLINTEGER version;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->id;
		} break;
		case 1: {
			ss << this->objectid;
		} break;
		case 2: {
			ss << this->property;
		} break;
		case 3: {
			ss << this->value;
		} break;
		case 4: {
			ss << this->uvalue;
		} break;
		case 5: {
			ss << this->value;
		} break;
		case 6: {
			ss << this->version;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_dtproperties : public COdbcTable {
public:
	CT_dtproperties() : COdbcTable() {
		m_TableName = "dtproperties";
		m_SqlSELECT = "SELECT "
					  "id,"
					  "objectid,"
					  "property,"
					  "value,"
					  "uvalue,"
					  "lvalue,"
					  "version"
					  " FROM dtproperties";
		m_SqlINSERT = "INSERT INTO dtproperties ("
					  "id,"
					  "objectid,"
					  "property,"
					  "value,"
					  "uvalue,"
					  "lvalue,"
					  "version)"
					  " VALUES ( ?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE dtproperties SET "
					  "id = ?,"
					  "objectid = ?,"
					  "property = ?,"
					  "value = ?,"
					  "uvalue = ?,"
					  "lvalue = ?,"
					  "version = ?";

		m_SqlDELETE = "DELETE dtproperties ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "dtproperties", "id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "dtproperties", "objectid", "2", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "dtproperties", "property", "3", "", "NO", "varchar", "64", "64", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "dtproperties", "value", "4", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "dtproperties", "uvalue", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "dtproperties", "lvalue", "6", "", "YES", "image", "2147483647", "2147483647",
					 "0", "0", "0", "", "", 0, _unknown, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "dtproperties", "version", "7", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_dtproperties() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *property = new char[65];
		char *value = new char[256];
		char *uvalue = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_dtproperties rec;
				com->GetData(1, SQL_C_LONG, &rec.id, sizeof(rec.id), 0);
				com->GetData(2, SQL_C_LONG, &rec.objectid, sizeof(rec.objectid), 0);
				memset(property, 0, 65);
				com->GetData(3, SQL_C_CHAR, property, 65, 0);
				rec.property = (char *)property;
				memset(value, 0, 256);
				com->GetData(4, SQL_C_CHAR, value, 256, 0);
				rec.value = (char *)value;
				memset(uvalue, 0, 511);
				com->GetData(5, SQL_C_CHAR, uvalue, 511, 0);
				rec.uvalue = (char *)uvalue;
				com->GetData(7, SQL_C_LONG, &rec.version, sizeof(rec.version), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] property;
		delete[] value;
		delete[] uvalue;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_dtproperties operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_dtproperties &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_dtproperties rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_dtproperties> m_Data;
};
/*
class CR_Switchboard_Items : public COdbcRecord {
public:
	CR_Switchboard_Items() : COdbcRecord() { Initialize(); }
	virtual ~CR_Switchboard_Items() {}

	void Initialize() {
		SwitchboardID = 0;
		ItemNumber = 0;
		ItemText = "";
		Command = 0;
		Argument = "";
	}

public:
	SQLINTEGER SwitchboardID;
	SQLSMALLINT ItemNumber;
	std::string ItemText;
	SQLSMALLINT Command;
	std::string Argument;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->SwitchboardID;
		} break;
		case 1: {
			ss << this->ItemNumber;
		} break;
		case 2: {
			ss << this->ItemText;
		} break;
		case 3: {
			ss << this->Command;
		} break;
		case 4: {
			ss << this->Argument;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_Switchboard_Items : public COdbcTable {
public:
	CT_Switchboard_Items() : COdbcTable() {
		m_TableName = "Switchboard Items";
		m_SqlSELECT = "SELECT "
					  "SwitchboardID,"
					  "ItemNumber,"
					  "ItemText,"
					  "Command,"
					  "Argument"
					  " FROM Switchboard Items";
		m_SqlINSERT = "INSERT INTO Switchboard Items ("
					  "SwitchboardID,"
					  "ItemNumber,"
					  "ItemText,"
					  "Command,"
					  "Argument)"
					  " VALUES ( ?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE Switchboard Items SET "
					  "ItemText = ?,"
					  "Command = ?,"
					  "Argument = ?";

		m_SqlDELETE = "DELETE Switchboard Items ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "Switchboard Items", "SwitchboardID", "1", "", "NO", "int", "0", "0", "10", "0",
					 "0", "", "", 0, _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "Switchboard Items", "ItemNumber", "2", "", "NO", "smallint", "0", "0", "5", "0",
					 "0", "", "", 0, _smallint, 1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "Switchboard Items", "ItemText", "3", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "Switchboard Items", "Command", "4", "", "YES", "smallint", "0", "0", "5", "0",
					 "0", "", "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "Switchboard Items", "Argument", "5", "", "YES", "nvarchar", "50", "100", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_Switchboard Items", "SwitchboardID", 1);
		m_Key.push_back(key);
		key.Set_Value("PK_Switchboard Items", "ItemNumber", 2);
		m_Key.push_back(key);
	}
	virtual ~CT_Switchboard_Items() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *ItemText = new char[511];
		char *Argument = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_Switchboard_Items rec;
				com->GetData(1, SQL_C_LONG, &rec.SwitchboardID, sizeof(rec.SwitchboardID), 0);
				com->GetData(2, SQL_C_SHORT, &rec.ItemNumber, sizeof(rec.ItemNumber), 0);
				memset(ItemText, 0, 511);
				com->GetData(3, SQL_C_CHAR, ItemText, 511, 0);
				rec.ItemText = (char *)ItemText;
				com->GetData(4, SQL_C_SHORT, &rec.Command, sizeof(rec.Command), 0);
				memset(Argument, 0, 101);
				com->GetData(5, SQL_C_CHAR, Argument, 101, 0);
				rec.Argument = (char *)Argument;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] ItemText;
		delete[] Argument;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_Switchboard_Items operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_Switchboard_Items &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_Switchboard_Items rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_Switchboard_Items> m_Data;
};
class CR_sysdiagrams : public COdbcRecord {
public:
	CR_sysdiagrams() : COdbcRecord() { Initialize(); }
	virtual ~CR_sysdiagrams() {}

	void Initialize() {
		name = "";
		principal_id = 0;
		diagram_id = 0;
		version = 0;
	}

public:
	std::string name;
	SQLINTEGER principal_id;
	SQLINTEGER diagram_id;
	SQLINTEGER version;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->name;
		} break;
		case 1: {
			ss << this->principal_id;
		} break;
		case 2: {
			ss << this->diagram_id;
		} break;
		case 3: {
			ss << this->version;
		} break;
		case 4: {
			ss << this->definition;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_sysdiagrams : public COdbcTable {
public:
	CT_sysdiagrams() : COdbcTable() {
		m_TableName = "sysdiagrams";
		m_SqlSELECT = "SELECT "
					  "name,"
					  "principal_id,"
					  "diagram_id,"
					  "version,"
					  "definition"
					  " FROM sysdiagrams";
		m_SqlINSERT = "INSERT INTO sysdiagrams ("
					  "name,"
					  "principal_id,"
					  "diagram_id,"
					  "version,"
					  "definition)"
					  " VALUES ( ?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE sysdiagrams SET "
					  "name = ?,"
					  "principal_id = ?,"
					  "diagram_id = ?,"
					  "version = ?,"
					  "definition = ?";

		m_SqlDELETE = "DELETE sysdiagrams ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "sysdiagrams", "name", "1", "", "NO", "nvarchar", "128", "256", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "sysdiagrams", "principal_id", "2", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "sysdiagrams", "diagram_id", "3", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "sysdiagrams", "version", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "sysdiagrams", "definition", "5", "", "YES", "varbinary", "-1", "-1", "0", "0",
					 "0", "", "", 0, _unknown, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_sysdiagrams() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *name = new char[257];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_sysdiagrams rec;
				memset(name, 0, 257);
				com->GetData(1, SQL_C_CHAR, name, 257, 0);
				rec.name = (char *)name;
				com->GetData(2, SQL_C_LONG, &rec.principal_id, sizeof(rec.principal_id), 0);
				com->GetData(3, SQL_C_LONG, &rec.diagram_id, sizeof(rec.diagram_id), 0);
				com->GetData(4, SQL_C_LONG, &rec.version, sizeof(rec.version), 0);
				com->GetData(5, SQL_C_CHAR, &rec.definition, sizeof(rec.definition), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] name;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_sysdiagrams operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_sysdiagrams &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_sysdiagrams rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_sysdiagrams> m_Data;
};
*/
class CR_t_daibunrui : public COdbcRecord {
public:
	CR_t_daibunrui() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_daibunrui() {}

	void Initialize() {
		dai_index = 0;
		dai_name = "";
	}

public:
	SQLINTEGER dai_index;
	std::string dai_name;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->dai_index;
		} break;
		case 1: {
			ss << this->dai_name;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_daibunrui : public COdbcTable {
public:
	CT_t_daibunrui() : COdbcTable() {
		m_TableName = "t_daibunrui";
		m_SqlSELECT = "SELECT "
					  "dai_index,"
					  "dai_name"
					  " FROM t_daibunrui";
		m_SqlINSERT = "INSERT INTO t_daibunrui ("
					  "dai_index,"
					  "dai_name)"
					  " VALUES ( ?,?)";
		m_SqlUPDATE = "UPDATE t_daibunrui SET "
					  "dai_name = ?";

		m_SqlDELETE = "DELETE t_daibunrui ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_daibunrui", "dai_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_daibunrui", "dai_name", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_daibunrui", "dai_index", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_daibunrui() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *dai_name = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_daibunrui rec;
				com->GetData(1, SQL_C_LONG, &rec.dai_index, sizeof(rec.dai_index), 0);
				memset(dai_name, 0, 101);
				com->GetData(2, SQL_C_CHAR, dai_name, 101, 0);
				rec.dai_name = (char *)dai_name;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] dai_name;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_daibunrui operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_daibunrui &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_daibunrui rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_daibunrui> m_Data;
};
class CR_t_gyosya : public COdbcRecord {
public:
	CR_t_gyosya() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_gyosya() {}

	void Initialize() {
		gyo_id = 0;
		gyo_name = "";
		gyo_ten = "";
		gyo_katagaki = "";
		gyo_shimei = "";
		gyo_zip = "";
		gyo_zyusyo1 = "";
		gyo_zyusyo2 = "";
		gyo_tel = "";
		gyo_fax = "";
	}

public:
	SQLINTEGER gyo_id;
	std::string gyo_name;
	std::string gyo_ten;
	std::string gyo_katagaki;
	std::string gyo_shimei;
	std::string gyo_zip;
	std::string gyo_zyusyo1;
	std::string gyo_zyusyo2;
	std::string gyo_tel;
	std::string gyo_fax;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->gyo_id;
		} break;
		case 1: {
			ss << this->gyo_name;
		} break;
		case 2: {
			ss << this->gyo_ten;
		} break;
		case 3: {
			ss << this->gyo_katagaki;
		} break;
		case 4: {
			ss << this->gyo_shimei;
		} break;
		case 5: {
			ss << this->gyo_zip;
		} break;
		case 6: {
			ss << this->gyo_zyusyo1;
		} break;
		case 7: {
			ss << this->gyo_zyusyo2;
		} break;
		case 8: {
			ss << this->gyo_tel;
		} break;
		case 9: {
			ss << this->gyo_fax;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_gyosya : public COdbcTable {
public:
	CT_t_gyosya() : COdbcTable() {
		m_TableName = "t_gyosya";
		m_SqlSELECT = "SELECT "
					  "gyo_id,"
					  "gyo_name,"
					  "gyo_ten,"
					  "gyo_katagaki,"
					  "gyo_shimei,"
					  "gyo_zip,"
					  "gyo_zyusyo1,"
					  "gyo_zyusyo2,"
					  "gyo_tel,"
					  "gyo_fax"
					  " FROM t_gyosya";
		m_SqlINSERT = "INSERT INTO t_gyosya ("
					  "gyo_id,"
					  "gyo_name,"
					  "gyo_ten,"
					  "gyo_katagaki,"
					  "gyo_shimei,"
					  "gyo_zip,"
					  "gyo_zyusyo1,"
					  "gyo_zyusyo2,"
					  "gyo_tel,"
					  "gyo_fax)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_gyosya SET "
					  "gyo_name = ?,"
					  "gyo_ten = ?,"
					  "gyo_katagaki = ?,"
					  "gyo_shimei = ?,"
					  "gyo_zip = ?,"
					  "gyo_zyusyo1 = ?,"
					  "gyo_zyusyo2 = ?,"
					  "gyo_tel = ?,"
					  "gyo_fax = ?";

		m_SqlDELETE = "DELETE t_gyosya ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_name", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_ten", "3", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_katagaki", "4", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_shimei", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_zip", "6", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_zyusyo1", "7", "", "YES", "nvarchar", "100", "200", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_zyusyo2", "8", "", "YES", "nvarchar", "100", "200", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_tel", "9", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyosya", "gyo_fax", "10", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_gyosya", "gyo_id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_gyosya() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *gyo_name = new char[101];
		char *gyo_ten = new char[101];
		char *gyo_katagaki = new char[101];
		char *gyo_shimei = new char[101];
		char *gyo_zip = new char[41];
		char *gyo_zyusyo1 = new char[201];
		char *gyo_zyusyo2 = new char[201];
		char *gyo_tel = new char[41];
		char *gyo_fax = new char[41];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_gyosya rec;
				com->GetData(1, SQL_C_LONG, &rec.gyo_id, sizeof(rec.gyo_id), 0);
				memset(gyo_name, 0, 101);
				com->GetData(2, SQL_C_CHAR, gyo_name, 101, 0);
				rec.gyo_name = (char *)gyo_name;
				memset(gyo_ten, 0, 101);
				com->GetData(3, SQL_C_CHAR, gyo_ten, 101, 0);
				rec.gyo_ten = (char *)gyo_ten;
				memset(gyo_katagaki, 0, 101);
				com->GetData(4, SQL_C_CHAR, gyo_katagaki, 101, 0);
				rec.gyo_katagaki = (char *)gyo_katagaki;
				memset(gyo_shimei, 0, 101);
				com->GetData(5, SQL_C_CHAR, gyo_shimei, 101, 0);
				rec.gyo_shimei = (char *)gyo_shimei;
				memset(gyo_zip, 0, 41);
				com->GetData(6, SQL_C_CHAR, gyo_zip, 41, 0);
				rec.gyo_zip = (char *)gyo_zip;
				memset(gyo_zyusyo1, 0, 201);
				com->GetData(7, SQL_C_CHAR, gyo_zyusyo1, 201, 0);
				rec.gyo_zyusyo1 = (char *)gyo_zyusyo1;
				memset(gyo_zyusyo2, 0, 201);
				com->GetData(8, SQL_C_CHAR, gyo_zyusyo2, 201, 0);
				rec.gyo_zyusyo2 = (char *)gyo_zyusyo2;
				memset(gyo_tel, 0, 41);
				com->GetData(9, SQL_C_CHAR, gyo_tel, 41, 0);
				rec.gyo_tel = (char *)gyo_tel;
				memset(gyo_fax, 0, 41);
				com->GetData(10, SQL_C_CHAR, gyo_fax, 41, 0);
				rec.gyo_fax = (char *)gyo_fax;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] gyo_name;
		delete[] gyo_ten;
		delete[] gyo_katagaki;
		delete[] gyo_shimei;
		delete[] gyo_zip;
		delete[] gyo_zyusyo1;
		delete[] gyo_zyusyo2;
		delete[] gyo_tel;
		delete[] gyo_fax;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_gyosya operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_gyosya &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_gyosya rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_gyosya> m_Data;
};
class CR_t_gyousya : public COdbcRecord {
public:
	CR_t_gyousya() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_gyousya() {}

	void Initialize() {
		gyo_id = 0;
		gyo_name = "";
		gyo_zip = "";
		gyo_address1 = "";
		gyo_address2 = "";
		gyo_position = "";
		gyo_represent = "";
		gyo_tel = "";
		gyo_fax = "";
	}

public:
	SQLINTEGER gyo_id;
	std::string gyo_name;
	std::string gyo_zip;
	std::string gyo_address1;
	std::string gyo_address2;
	std::string gyo_position;
	std::string gyo_represent;
	std::string gyo_tel;
	std::string gyo_fax;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->gyo_id;
		} break;
		case 1: {
			ss << this->gyo_name;
		} break;
		case 2: {
			ss << this->gyo_zip;
		} break;
		case 3: {
			ss << this->gyo_address1;
		} break;
		case 4: {
			ss << this->gyo_address2;
		} break;
		case 5: {
			ss << this->gyo_position;
		} break;
		case 6: {
			ss << this->gyo_represent;
		} break;
		case 7: {
			ss << this->gyo_tel;
		} break;
		case 8: {
			ss << this->gyo_fax;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_gyousya : public COdbcTable {
public:
	CT_t_gyousya() : COdbcTable() {
		m_TableName = "t_gyousya";
		m_SqlSELECT = "SELECT "
					  "gyo_id,"
					  "gyo_name,"
					  "gyo_zip,"
					  "gyo_address1,"
					  "gyo_address2,"
					  "gyo_position,"
					  "gyo_represent,"
					  "gyo_tel,"
					  "gyo_fax"
					  " FROM t_gyousya";
		m_SqlINSERT = "INSERT INTO t_gyousya ("
					  "gyo_id,"
					  "gyo_name,"
					  "gyo_zip,"
					  "gyo_address1,"
					  "gyo_address2,"
					  "gyo_position,"
					  "gyo_represent,"
					  "gyo_tel,"
					  "gyo_fax)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_gyousya SET "
					  "gyo_name = ?,"
					  "gyo_zip = ?,"
					  "gyo_address1 = ?,"
					  "gyo_address2 = ?,"
					  "gyo_position = ?,"
					  "gyo_represent = ?,"
					  "gyo_tel = ?,"
					  "gyo_fax = ?";

		m_SqlDELETE = "DELETE t_gyousya ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_gyousya", "gyo_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyousya", "gyo_name", "2", "", "NO", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyousya", "gyo_zip", "3", "", "YES", "nvarchar", "10", "20", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyousya", "gyo_address1", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyousya", "gyo_address2", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyousya", "gyo_position", "6", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyousya", "gyo_represent", "7", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyousya", "gyo_tel", "8", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_gyousya", "gyo_fax", "9", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_gyousya", "gyo_id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_gyousya() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *gyo_name = new char[511];
		char *gyo_zip = new char[21];
		char *gyo_address1 = new char[511];
		char *gyo_address2 = new char[511];
		char *gyo_position = new char[101];
		char *gyo_represent = new char[101];
		char *gyo_tel = new char[41];
		char *gyo_fax = new char[41];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_gyousya rec;
				com->GetData(1, SQL_C_LONG, &rec.gyo_id, sizeof(rec.gyo_id), 0);
				memset(gyo_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, gyo_name, 511, 0);
				rec.gyo_name = (char *)gyo_name;
				memset(gyo_zip, 0, 21);
				com->GetData(3, SQL_C_CHAR, gyo_zip, 21, 0);
				rec.gyo_zip = (char *)gyo_zip;
				memset(gyo_address1, 0, 511);
				com->GetData(4, SQL_C_CHAR, gyo_address1, 511, 0);
				rec.gyo_address1 = (char *)gyo_address1;
				memset(gyo_address2, 0, 511);
				com->GetData(5, SQL_C_CHAR, gyo_address2, 511, 0);
				rec.gyo_address2 = (char *)gyo_address2;
				memset(gyo_position, 0, 101);
				com->GetData(6, SQL_C_CHAR, gyo_position, 101, 0);
				rec.gyo_position = (char *)gyo_position;
				memset(gyo_represent, 0, 101);
				com->GetData(7, SQL_C_CHAR, gyo_represent, 101, 0);
				rec.gyo_represent = (char *)gyo_represent;
				memset(gyo_tel, 0, 41);
				com->GetData(8, SQL_C_CHAR, gyo_tel, 41, 0);
				rec.gyo_tel = (char *)gyo_tel;
				memset(gyo_fax, 0, 41);
				com->GetData(9, SQL_C_CHAR, gyo_fax, 41, 0);
				rec.gyo_fax = (char *)gyo_fax;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] gyo_name;
		delete[] gyo_zip;
		delete[] gyo_address1;
		delete[] gyo_address2;
		delete[] gyo_position;
		delete[] gyo_represent;
		delete[] gyo_tel;
		delete[] gyo_fax;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_gyousya operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_gyousya &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_gyousya rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_gyousya> m_Data;
};
class CR_t_hat : public COdbcRecord {
public:
	CR_t_hat() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_hat() {}

	void Initialize() {
		HAT010 = 0;
		HAT020 = "";
		HAT030 = "";
		HAT040 = "";
		HAT050 = "";
	}

public:
	SQLINTEGER HAT010;
	std::string HAT020;
	std::string HAT030;
	std::string HAT040;
	std::string HAT050;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->HAT010;
		} break;
		case 1: {
			ss << this->HAT020;
		} break;
		case 2: {
			ss << this->HAT030;
		} break;
		case 3: {
			ss << this->HAT040;
		} break;
		case 4: {
			ss << this->HAT050;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_hat : public COdbcTable {
public:
	CT_t_hat() : COdbcTable() {
		m_TableName = "t_hat";
		m_SqlSELECT = "SELECT "
					  "HAT010,"
					  "HAT020,"
					  "HAT030,"
					  "HAT040,"
					  "HAT050"
					  " FROM t_hat";
		m_SqlINSERT = "INSERT INTO t_hat ("
					  "HAT010,"
					  "HAT020,"
					  "HAT030,"
					  "HAT040,"
					  "HAT050)"
					  " VALUES ( ?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_hat SET "
					  "HAT010 = ?,"
					  "HAT020 = ?,"
					  "HAT030 = ?,"
					  "HAT040 = ?,"
					  "HAT050 = ?";

		m_SqlDELETE = "DELETE t_hat ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_hat", "HAT010", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_hat", "HAT020", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_hat", "HAT030", "3", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_hat", "HAT040", "4", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_hat", "HAT050", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_hat() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *HAT020 = new char[101];
		char *HAT030 = new char[101];
		char *HAT040 = new char[101];
		char *HAT050 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_hat rec;
				com->GetData(1, SQL_C_LONG, &rec.HAT010, sizeof(rec.HAT010), 0);
				memset(HAT020, 0, 101);
				com->GetData(2, SQL_C_CHAR, HAT020, 101, 0);
				rec.HAT020 = (char *)HAT020;
				memset(HAT030, 0, 101);
				com->GetData(3, SQL_C_CHAR, HAT030, 101, 0);
				rec.HAT030 = (char *)HAT030;
				memset(HAT040, 0, 101);
				com->GetData(4, SQL_C_CHAR, HAT040, 101, 0);
				rec.HAT040 = (char *)HAT040;
				memset(HAT050, 0, 101);
				com->GetData(5, SQL_C_CHAR, HAT050, 101, 0);
				rec.HAT050 = (char *)HAT050;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] HAT020;
		delete[] HAT030;
		delete[] HAT040;
		delete[] HAT050;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_hat operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_hat &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_hat rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_hat> m_Data;
};
class CR_v_koujinosyurui : public COdbcRecord {
public:
	CR_v_koujinosyurui() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_koujinosyurui() {}

	void Initialize() {
		sy_id = 0;
		sy_name = "";
		sy_onoff = 0;
	}

public:
	SQLINTEGER sy_id;
	std::string sy_name;
	SQLCHAR sy_onoff;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->sy_id;
		} break;
		case 1: {
			ss << this->sy_name;
		} break;
		case 2: {
			ss << this->sy_onoff;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_koujinosyurui : public COdbcTable {
public:
	CT_v_koujinosyurui() : COdbcTable() {
		m_TableName = "v_koujinosyurui";
		m_SqlSELECT = "SELECT "
					  "sy_id,"
					  "sy_name,"
					  "sy_onoff"
					  " FROM v_koujinosyurui";
		m_SqlINSERT = "INSERT INTO v_koujinosyurui ("
					  "sy_id,"
					  "sy_name,"
					  "sy_onoff)"
					  " VALUES ( ?,?,?)";
		m_SqlUPDATE = "UPDATE v_koujinosyurui SET "
					  "sy_id = ?,"
					  "sy_name = ?,"
					  "sy_onoff = ?";

		m_SqlDELETE = "DELETE v_koujinosyurui ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_koujinosyurui", "sy_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujinosyurui", "sy_name", "2", "", "YES", "varchar", "255", "255", "0", "0",
					 "0", "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujinosyurui", "sy_onoff", "3", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_koujinosyurui() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *sy_name = new char[256];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_koujinosyurui rec;
				com->GetData(1, SQL_C_LONG, &rec.sy_id, sizeof(rec.sy_id), 0);
				memset(sy_name, 0, 256);
				com->GetData(2, SQL_C_CHAR, sy_name, 256, 0);
				rec.sy_name = (char *)sy_name;
				com->GetData(3, SQL_C_CHAR, &rec.sy_onoff, sizeof(rec.sy_onoff), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] sy_name;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_koujinosyurui operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_koujinosyurui &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_koujinosyurui rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_koujinosyurui> m_Data;
};
class CR_t_jv : public COdbcRecord {
public:
	CR_t_jv() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_jv() {}

	void Initialize() {
		Kdtid = 0;
		KdtKaiid = 0;
		Kdtksdid = 0;
		Kdtflg = 0;
		Kdtritsu = 0.0;
	}

public:
	SQLINTEGER Kdtid;
	SQLINTEGER KdtKaiid;
	SQLINTEGER Kdtksdid;
	SQLCHAR Kdtflg;
	SQLFLOAT Kdtritsu;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->Kdtid;
		} break;
		case 1: {
			ss << this->KdtKaiid;
		} break;
		case 2: {
			ss << this->Kdtksdid;
		} break;
		case 3: {
			ss << this->Kdtflg;
		} break;
		case 4: {
			ss << this->Kdtritsu;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_jv : public COdbcTable {
public:
	CT_t_jv() : COdbcTable() {
		m_TableName = "t_jv";
		m_SqlSELECT = "SELECT "
					  "Kdtid,"
					  "KdtKaiid,"
					  "Kdtksdid,"
					  "Kdtflg,"
					  "Kdtritsu"
					  " FROM t_jv";
		m_SqlINSERT = "INSERT INTO t_jv ("
					  "Kdtid,"
					  "KdtKaiid,"
					  "Kdtksdid,"
					  "Kdtflg,"
					  "Kdtritsu)"
					  " VALUES ( ?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_jv SET "
					  "Kdtid = ?,"
					  "KdtKaiid = ?,"
					  "Kdtksdid = ?,"
					  "Kdtflg = ?,"
					  "Kdtritsu = ?";

		m_SqlDELETE = "DELETE t_jv ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_jv", "Kdtid", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0, _int,
					 -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jv", "KdtKaiid", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jv", "Kdtksdid", "3", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jv", "Kdtflg", "4", "", "NO", "bit", "0", "0", "0", "0", "0", "", "", 0, _bit,
					 -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jv", "Kdtritsu", "5", "", "NO", "float", "0", "0", "53", "0", "0", "", "", 0,
					 _float, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_jv() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_jv rec;
				com->GetData(1, SQL_C_LONG, &rec.Kdtid, sizeof(rec.Kdtid), 0);
				com->GetData(2, SQL_C_LONG, &rec.KdtKaiid, sizeof(rec.KdtKaiid), 0);
				com->GetData(3, SQL_C_LONG, &rec.Kdtksdid, sizeof(rec.Kdtksdid), 0);
				com->GetData(4, SQL_C_CHAR, &rec.Kdtflg, sizeof(rec.Kdtflg), 0);
				com->GetData(5, SQL_C_DOUBLE, &rec.Kdtritsu, sizeof(rec.Kdtritsu), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_jv operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_jv &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_jv rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_jv> m_Data;
};
class CR_t_request : public COdbcRecord {
public:
	CR_t_request() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_request() {}

	void Initialize() {
		req_id = 0;
		req_kouji = 0;
		req_syaid = 0;
		req_result = 0;
		req_locate = "";
	}

public:
	SQLINTEGER req_id;
	SQLINTEGER req_kouji;
	SQLINTEGER req_syaid;
	SQLINTEGER req_result;
	std::string req_locate;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->req_id;
		} break;
		case 1: {
			ss << this->req_kouji;
		} break;
		case 2: {
			ss << this->req_syaid;
		} break;
		case 3: {
			ss << this->req_result;
		} break;
		case 4: {
			ss << this->req_locate;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_request : public COdbcTable {
public:
	CT_t_request() : COdbcTable() {
		m_TableName = "t_request";
		m_SqlSELECT = "SELECT "
					  "req_id,"
					  "req_kouji,"
					  "req_syaid,"
					  "req_result,"
					  "req_locate"
					  " FROM t_request";
		m_SqlINSERT = "INSERT INTO t_request ("
					  "req_kouji,"
					  "req_syaid,"
					  "req_result,"
					  "req_locate)"
					  " VALUES ( ?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_request SET "
					  "req_kouji = ?,"
					  "req_syaid = ?,"
					  "req_result = ?,"
					  "req_locate = ?";

		m_SqlDELETE = "DELETE t_request ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_request", "req_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_request", "req_kouji", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_request", "req_syaid", "3", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_request", "req_result", "4", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_request", "req_locate", "5", "", "YES", "nvarchar", "-1", "-1", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_request", "req_id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_request() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *req_locate = new char[0];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_request rec;
				com->GetData(1, SQL_C_LONG, &rec.req_id, sizeof(rec.req_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.req_kouji, sizeof(rec.req_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.req_syaid, sizeof(rec.req_syaid), 0);
				com->GetData(4, SQL_C_LONG, &rec.req_result, sizeof(rec.req_result), 0);
				memset(req_locate, 0, 0);
				com->GetData(5, SQL_C_CHAR, req_locate, 0, 0);
				rec.req_locate = (char *)req_locate;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] req_locate;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_request operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_request &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_request rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_request> m_Data;
};
class CR_t_jyoukyou : public COdbcRecord {
public:
	CR_t_jyoukyou() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_jyoukyou() {}

	void Initialize() {
		jyo_kouji = 0;
		jyo_t_flg = 0;
		jyo_n_flg = 0;
		jyo_k_flg = 0;
		jyo_rakusatsu = "";
	}

public:
	SQLINTEGER jyo_kouji;
	TIMESTAMP_STRUCT jyo_t_kaishi;
	TIMESTAMP_STRUCT jyo_t_owari;
	SQLCHAR jyo_t_flg;
	TIMESTAMP_STRUCT jyo_n_kaishi;
	TIMESTAMP_STRUCT jyo_n_owari;
	SQLCHAR jyo_n_flg;
	TIMESTAMP_STRUCT jyo_kaisatsu;
	SQLCHAR jyo_k_flg;
	std::string jyo_rakusatsu;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->jyo_kouji;
		} break;
		case 1: {
			COdbcDateTime date(&this->jyo_t_kaishi);
			ss << date.to_string();
		} break;
		case 2: {
			COdbcDateTime date(&this->jyo_t_owari);
			ss << date.to_string();
		} break;
		case 3: {
			ss << this->jyo_t_flg;
		} break;
		case 4: {
			COdbcDateTime date(&this->jyo_n_kaishi);
			ss << date.to_string();
		} break;
		case 5: {
			COdbcDateTime date(&this->jyo_n_owari);
			ss << date.to_string();
		} break;
		case 6: {
			ss << this->jyo_n_flg;
		} break;
		case 7: {
			COdbcDateTime date(&this->jyo_kaisatsu);
			ss << date.to_string();
		} break;
		case 8: {
			ss << this->jyo_k_flg;
		} break;
		case 9: {
			ss << this->jyo_rakusatsu;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_jyoukyou : public COdbcTable {
public:
	CT_t_jyoukyou() : COdbcTable() {
		m_TableName = "t_jyoukyou";
		m_SqlSELECT = "SELECT "
					  "jyo_kouji,"
					  "jyo_t_kaishi,"
					  "jyo_t_owari,"
					  "jyo_t_flg,"
					  "jyo_n_kaishi,"
					  "jyo_n_owari,"
					  "jyo_n_flg,"
					  "jyo_kaisatsu,"
					  "jyo_k_flg,"
					  "jyo_rakusatsu"
					  " FROM t_jyoukyou";
		m_SqlINSERT = "INSERT INTO t_jyoukyou ("
					  "jyo_kouji,"
					  "jyo_t_kaishi,"
					  "jyo_t_owari,"
					  "jyo_t_flg,"
					  "jyo_n_kaishi,"
					  "jyo_n_owari,"
					  "jyo_n_flg,"
					  "jyo_kaisatsu,"
					  "jyo_k_flg,"
					  "jyo_rakusatsu)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_jyoukyou SET "
					  "jyo_kouji = ?,"
					  "jyo_t_kaishi = ?,"
					  "jyo_t_owari = ?,"
					  "jyo_t_flg = ?,"
					  "jyo_n_kaishi = ?,"
					  "jyo_n_owari = ?,"
					  "jyo_n_flg = ?,"
					  "jyo_kaisatsu = ?,"
					  "jyo_k_flg = ?,"
					  "jyo_rakusatsu = ?";

		m_SqlDELETE = "DELETE t_jyoukyou ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_kouji", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_t_kaishi", "2", "", "YES", "datetime", "0", "0", "0", "0", "3",
					 "", "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_t_owari", "3", "", "YES", "datetime", "0", "0", "0", "0", "3",
					 "", "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_t_flg", "4", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_n_kaishi", "5", "", "YES", "datetime", "0", "0", "0", "0", "3",
					 "", "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_n_owari", "6", "", "YES", "datetime", "0", "0", "0", "0", "3",
					 "", "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_n_flg", "7", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_kaisatsu", "8", "", "YES", "datetime", "0", "0", "0", "0", "3",
					 "", "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_k_flg", "9", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_jyoukyou", "jyo_rakusatsu", "10", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_jyoukyou() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *jyo_rakusatsu = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_jyoukyou rec;
				com->GetData(1, SQL_C_LONG, &rec.jyo_kouji, sizeof(rec.jyo_kouji), 0);
				com->GetData(2, SQL_C_TYPE_TIMESTAMP, &rec.jyo_t_kaishi, sizeof(rec.jyo_t_kaishi), 0);
				com->GetData(3, SQL_C_TYPE_TIMESTAMP, &rec.jyo_t_owari, sizeof(rec.jyo_t_owari), 0);
				com->GetData(4, SQL_C_CHAR, &rec.jyo_t_flg, sizeof(rec.jyo_t_flg), 0);
				com->GetData(5, SQL_C_TYPE_TIMESTAMP, &rec.jyo_n_kaishi, sizeof(rec.jyo_n_kaishi), 0);
				com->GetData(6, SQL_C_TYPE_TIMESTAMP, &rec.jyo_n_owari, sizeof(rec.jyo_n_owari), 0);
				com->GetData(7, SQL_C_CHAR, &rec.jyo_n_flg, sizeof(rec.jyo_n_flg), 0);
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.jyo_kaisatsu, sizeof(rec.jyo_kaisatsu), 0);
				com->GetData(9, SQL_C_CHAR, &rec.jyo_k_flg, sizeof(rec.jyo_k_flg), 0);
				memset(jyo_rakusatsu, 0, 511);
				com->GetData(10, SQL_C_CHAR, jyo_rakusatsu, 511, 0);
				rec.jyo_rakusatsu = (char *)jyo_rakusatsu;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] jyo_rakusatsu;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_jyoukyou operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_jyoukyou &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_jyoukyou rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_jyoukyou> m_Data;
};
class CR_t_kaisya : public COdbcRecord {
public:
	CR_t_kaisya() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kaisya() {}

	void Initialize() {
		Kai00 = 0;
		Kai01 = "";
		Kai02 = "";
		Kai03 = "";
		Kai04 = "";
		Kai05 = "";
		Kai06 = "";
		Kai07 = "";
		Kai08 = "";
	}

public:
	SQLINTEGER Kai00;
	std::string Kai01;
	std::string Kai02;
	std::string Kai03;
	std::string Kai04;
	std::string Kai05;
	std::string Kai06;
	std::string Kai07;
	std::string Kai08;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->Kai00;
		} break;
		case 1: {
			ss << this->Kai01;
		} break;
		case 2: {
			ss << this->Kai02;
		} break;
		case 3: {
			ss << this->Kai03;
		} break;
		case 4: {
			ss << this->Kai04;
		} break;
		case 5: {
			ss << this->Kai05;
		} break;
		case 6: {
			ss << this->Kai06;
		} break;
		case 7: {
			ss << this->Kai07;
		} break;
		case 8: {
			ss << this->Kai08;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kaisya : public COdbcTable {
public:
	CT_t_kaisya() : COdbcTable() {
		m_TableName = "t_kaisya";
		m_SqlSELECT = "SELECT "
					  "Kai00,"
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08"
					  " FROM t_kaisya";
		m_SqlINSERT = "INSERT INTO t_kaisya ("
					  "Kai00,"
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_kaisya SET "
					  "Kai00 = ?,"
					  "Kai01 = ?,"
					  "Kai02 = ?,"
					  "Kai03 = ?,"
					  "Kai04 = ?,"
					  "Kai05 = ?,"
					  "Kai06 = ?,"
					  "Kai07 = ?,"
					  "Kai08 = ?";

		m_SqlDELETE = "DELETE t_kaisya ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kaisya", "Kai00", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kaisya", "Kai01", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kaisya", "Kai02", "3", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kaisya", "Kai03", "4", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kaisya", "Kai04", "5", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kaisya", "Kai05", "6", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kaisya", "Kai06", "7", "", "YES", "nvarchar", "30", "60", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kaisya", "Kai07", "8", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kaisya", "Kai08", "9", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_kaisya() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *Kai01 = new char[101];
		char *Kai02 = new char[101];
		char *Kai03 = new char[101];
		char *Kai04 = new char[41];
		char *Kai05 = new char[101];
		char *Kai06 = new char[61];
		char *Kai07 = new char[41];
		char *Kai08 = new char[41];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kaisya rec;
				com->GetData(1, SQL_C_LONG, &rec.Kai00, sizeof(rec.Kai00), 0);
				memset(Kai01, 0, 101);
				com->GetData(2, SQL_C_CHAR, Kai01, 101, 0);
				rec.Kai01 = (char *)Kai01;
				memset(Kai02, 0, 101);
				com->GetData(3, SQL_C_CHAR, Kai02, 101, 0);
				rec.Kai02 = (char *)Kai02;
				memset(Kai03, 0, 101);
				com->GetData(4, SQL_C_CHAR, Kai03, 101, 0);
				rec.Kai03 = (char *)Kai03;
				memset(Kai04, 0, 41);
				com->GetData(5, SQL_C_CHAR, Kai04, 41, 0);
				rec.Kai04 = (char *)Kai04;
				memset(Kai05, 0, 101);
				com->GetData(6, SQL_C_CHAR, Kai05, 101, 0);
				rec.Kai05 = (char *)Kai05;
				memset(Kai06, 0, 61);
				com->GetData(7, SQL_C_CHAR, Kai06, 61, 0);
				rec.Kai06 = (char *)Kai06;
				memset(Kai07, 0, 41);
				com->GetData(8, SQL_C_CHAR, Kai07, 41, 0);
				rec.Kai07 = (char *)Kai07;
				memset(Kai08, 0, 41);
				com->GetData(9, SQL_C_CHAR, Kai08, 41, 0);
				rec.Kai08 = (char *)Kai08;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] Kai01;
		delete[] Kai02;
		delete[] Kai03;
		delete[] Kai04;
		delete[] Kai05;
		delete[] Kai06;
		delete[] Kai07;
		delete[] Kai08;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kaisya operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kaisya &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kaisya rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kaisya> m_Data;
};
class CR_v_request01 : public COdbcRecord {
public:
	CR_v_request01() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_request01() {}

	void Initialize() {
		yo_工事コード = 0;
		yo_工事名 = "";
		yo_工事番号 = "";
		yo_工種ｺｰﾄﾞ = 0;
		yo_工事種別 = "";
		yo_発注元ｺｰﾄﾞ = 0;
		yo_発注元 = "";
		yo_契約金額 = 0.0;
		yo_追加金額 = 0.0;
		yo_合計金額 = 0.0;
		yo_実行予算 = 0.0;
		yo_実際原価 = 0.0;
		yo_現場代理人所見 = "";
		yo_営業所見 = "";
		yo_HAT030 = "";
		yo_HAT040 = "";
		yo_HAT050 = "";
		yo_sw = 0;
		yo_bikou1 = "";
		yo_bikou2 = "";
		yo_nyuno = "";
		yo_type = 0;
		yo_sya011 = 0;
		yo_sya012 = "";
		memset(&yo_yoteinuki, 0, sizeof(yo_yoteinuki));
		memset(&yo_yoteikomi, 0, sizeof(yo_yoteikomi));
		req_id = 0;
		req_kouji = 0;
		req_syaid = 0;
		req_result = 0;
		req_locate = "";
		MBR010 = 0;
		MBR020 = "";
		MBR030 = 0.0;
		MBR040 = 0.0;
		MBR050 = 0.0;
		MBR060 = "";
		MBR070 = "";
		MBR090 = "";
		MBR100 = "";
		MBR110 = "";
		MBR120 = "";
		MBR130 = "";
		km_name = "";
		km_no = "";
	}

public:
	SQLINTEGER yo_工事コード;
	std::string yo_工事名;
	std::string yo_工事番号;
	SQLINTEGER yo_工種ｺｰﾄﾞ;
	std::string yo_工事種別;
	SQLINTEGER yo_発注元ｺｰﾄﾞ;
	std::string yo_発注元;
	SQLFLOAT yo_契約金額;
	SQLFLOAT yo_追加金額;
	SQLFLOAT yo_合計金額;
	SQLFLOAT yo_実行予算;
	SQLFLOAT yo_実際原価;
	TIMESTAMP_STRUCT yo_契約日付;
	TIMESTAMP_STRUCT yo_工期;
	TIMESTAMP_STRUCT yo_工期終了;
	TIMESTAMP_STRUCT yo_着工日付;
	TIMESTAMP_STRUCT yo_完成日付;
	TIMESTAMP_STRUCT yo_検査引渡日;
	std::string yo_現場代理人所見;
	std::string yo_営業所見;
	std::string yo_HAT030;
	std::string yo_HAT040;
	std::string yo_HAT050;
	TIMESTAMP_STRUCT yo_nyuudat;
	SQLCHAR yo_sw;
	std::string yo_bikou1;
	std::string yo_bikou2;
	std::string yo_nyuno;
	TIMESTAMP_STRUCT yo_sinsadat;
	TIMESTAMP_STRUCT yo_mitsumori;
	SQLINTEGER yo_type;
	SQLINTEGER yo_sya011;
	std::string yo_sya012;
	TIMESTAMP_STRUCT yo_koukoku;
	SQL_NUMERIC_STRUCT yo_yoteinuki;
	SQL_NUMERIC_STRUCT yo_yoteikomi;
	SQLINTEGER req_id;
	SQLINTEGER req_kouji;
	SQLINTEGER req_syaid;
	SQLINTEGER req_result;
	std::string req_locate;
	SQLINTEGER MBR010;
	std::string MBR020;
	SQLFLOAT MBR030;
	SQLFLOAT MBR040;
	SQLFLOAT MBR050;
	std::string MBR060;
	std::string MBR070;
	TIMESTAMP_STRUCT MBR080;
	std::string MBR090;
	std::string MBR100;
	std::string MBR110;
	std::string MBR120;
	std::string MBR130;
	std::string km_name;
	std::string km_no;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->yo_工事コード;
		} break;
		case 1: {
			ss << this->yo_工事名;
		} break;
		case 2: {
			ss << this->yo_工事番号;
		} break;
		case 3: {
			ss << this->yo_工種ｺｰﾄﾞ;
		} break;
		case 4: {
			ss << this->yo_工事種別;
		} break;
		case 5: {
			ss << this->yo_発注元ｺｰﾄﾞ;
		} break;
		case 6: {
			ss << this->yo_発注元;
		} break;
		case 7: {
			ss << this->yo_契約金額;
		} break;
		case 8: {
			ss << this->yo_追加金額;
		} break;
		case 9: {
			ss << this->yo_合計金額;
		} break;
		case 10: {
			ss << this->yo_実行予算;
		} break;
		case 11: {
			ss << this->yo_実際原価;
		} break;
		case 12: {
			COdbcDateTime date(&this->yo_契約日付);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->yo_工期);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->yo_工期終了);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->yo_着工日付);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->yo_完成日付);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->yo_検査引渡日);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->yo_現場代理人所見;
		} break;
		case 19: {
			ss << this->yo_営業所見;
		} break;
		case 20: {
			ss << this->yo_HAT030;
		} break;
		case 21: {
			ss << this->yo_HAT040;
		} break;
		case 22: {
			ss << this->yo_HAT050;
		} break;
		case 23: {
			COdbcDateTime date(&this->yo_nyuudat);
			ss << date.to_string();
		} break;
		case 24: {
			ss << this->yo_sw;
		} break;
		case 25: {
			ss << this->yo_bikou1;
		} break;
		case 26: {
			ss << this->yo_bikou2;
		} break;
		case 27: {
			ss << this->yo_nyuno;
		} break;
		case 28: {
			COdbcDateTime date(&this->yo_sinsadat);
			ss << date.to_string();
		} break;
		case 29: {
			COdbcDateTime date(&this->yo_mitsumori);
			ss << date.to_string();
		} break;
		case 30: {
			ss << this->yo_type;
		} break;
		case 31: {
			ss << this->yo_sya011;
		} break;
		case 32: {
			ss << this->yo_sya012;
		} break;
		case 33: {
			COdbcDateTime date(&this->yo_koukoku);
			ss << date.to_string();
		} break;
		case 34: {
			ss << COdbcColumn::NumericToString(&this->yo_yoteinuki);
		} break;
		case 35: {
			ss << COdbcColumn::NumericToString(&this->yo_yoteikomi);
		} break;
		case 36: {
			ss << this->req_id;
		} break;
		case 37: {
			ss << this->req_kouji;
		} break;
		case 38: {
			ss << this->req_syaid;
		} break;
		case 39: {
			ss << this->req_result;
		} break;
		case 40: {
			ss << this->req_locate;
		} break;
		case 41: {
			ss << this->MBR010;
		} break;
		case 42: {
			ss << this->MBR020;
		} break;
		case 43: {
			ss << this->MBR030;
		} break;
		case 44: {
			ss << this->MBR040;
		} break;
		case 45: {
			ss << this->MBR050;
		} break;
		case 46: {
			ss << this->MBR060;
		} break;
		case 47: {
			ss << this->MBR070;
		} break;
		case 48: {
			COdbcDateTime date(&this->MBR080);
			ss << date.to_string();
		} break;
		case 49: {
			ss << this->MBR090;
		} break;
		case 50: {
			ss << this->MBR100;
		} break;
		case 51: {
			ss << this->MBR110;
		} break;
		case 52: {
			ss << this->MBR120;
		} break;
		case 53: {
			ss << this->MBR130;
		} break;
		case 54: {
			ss << this->km_name;
		} break;
		case 55: {
			ss << this->km_no;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_request01 : public COdbcTable {
public:
	CT_v_request01() : COdbcTable() {
		m_TableName = "v_request01";
		m_SqlSELECT = "SELECT "
					  "yo_工事コード,"
					  "yo_工事名,"
					  "yo_工事番号,"
					  "yo_工種ｺｰﾄﾞ,"
					  "yo_工事種別,"
					  "yo_発注元ｺｰﾄﾞ,"
					  "yo_発注元,"
					  "yo_契約金額,"
					  "yo_追加金額,"
					  "yo_合計金額,"
					  "yo_実行予算,"
					  "yo_実際原価,"
					  "yo_契約日付,"
					  "yo_工期,"
					  "yo_工期終了,"
					  "yo_着工日付,"
					  "yo_完成日付,"
					  "yo_検査引渡日,"
					  "yo_現場代理人所見,"
					  "yo_営業所見,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012,"
					  "yo_koukoku,"
					  "yo_yoteinuki,"
					  "yo_yoteikomi,"
					  "req_id,"
					  "req_kouji,"
					  "req_syaid,"
					  "req_result,"
					  "req_locate,"
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130,"
					  "km_name,"
					  "km_no"
					  " FROM v_request01";
		m_SqlINSERT = "INSERT INTO v_request01 ("
					  "yo_工事コード,"
					  "yo_工事名,"
					  "yo_工事番号,"
					  "yo_工種ｺｰﾄﾞ,"
					  "yo_工事種別,"
					  "yo_発注元ｺｰﾄﾞ,"
					  "yo_発注元,"
					  "yo_契約金額,"
					  "yo_追加金額,"
					  "yo_合計金額,"
					  "yo_実行予算,"
					  "yo_実際原価,"
					  "yo_契約日付,"
					  "yo_工期,"
					  "yo_工期終了,"
					  "yo_着工日付,"
					  "yo_完成日付,"
					  "yo_検査引渡日,"
					  "yo_現場代理人所見,"
					  "yo_営業所見,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012,"
					  "yo_koukoku,"
					  "yo_yoteinuki,"
					  "yo_yoteikomi,"
					  "req_id,"
					  "req_kouji,"
					  "req_syaid,"
					  "req_result,"
					  "req_locate,"
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130,"
					  "km_name,"
					  "km_no)"
					  " VALUES ( "
					  "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
					  "?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_request01 SET "
					  "yo_工事コード = ?,"
					  "yo_工事名 = ?,"
					  "yo_工事番号 = ?,"
					  "yo_工種ｺｰﾄﾞ = ?,"
					  "yo_工事種別 = ?,"
					  "yo_発注元ｺｰﾄﾞ = ?,"
					  "yo_発注元 = ?,"
					  "yo_契約金額 = ?,"
					  "yo_追加金額 = ?,"
					  "yo_合計金額 = ?,"
					  "yo_実行予算 = ?,"
					  "yo_実際原価 = ?,"
					  "yo_契約日付 = ?,"
					  "yo_工期 = ?,"
					  "yo_工期終了 = ?,"
					  "yo_着工日付 = ?,"
					  "yo_完成日付 = ?,"
					  "yo_検査引渡日 = ?,"
					  "yo_現場代理人所見 = ?,"
					  "yo_営業所見 = ?,"
					  "yo_HAT030 = ?,"
					  "yo_HAT040 = ?,"
					  "yo_HAT050 = ?,"
					  "yo_nyuudat = ?,"
					  "yo_sw = ?,"
					  "yo_bikou1 = ?,"
					  "yo_bikou2 = ?,"
					  "yo_nyuno = ?,"
					  "yo_sinsadat = ?,"
					  "yo_mitsumori = ?,"
					  "yo_type = ?,"
					  "yo_sya011 = ?,"
					  "yo_sya012 = ?,"
					  "yo_koukoku = ?,"
					  "yo_yoteinuki = ?,"
					  "yo_yoteikomi = ?,"
					  "req_id = ?,"
					  "req_kouji = ?,"
					  "req_syaid = ?,"
					  "req_result = ?,"
					  "req_locate = ?,"
					  "MBR010 = ?,"
					  "MBR020 = ?,"
					  "MBR030 = ?,"
					  "MBR040 = ?,"
					  "MBR050 = ?,"
					  "MBR060 = ?,"
					  "MBR070 = ?,"
					  "MBR080 = ?,"
					  "MBR090 = ?,"
					  "MBR100 = ?,"
					  "MBR110 = ?,"
					  "MBR120 = ?,"
					  "MBR130 = ?,"
					  "km_name = ?,"
					  "km_no = ?";

		m_SqlDELETE = "DELETE v_request01 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_request01", "yo_工事コード", "1", "", "NO", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_工事名", "2", "", "NO", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_工事番号", "3", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_工種ｺｰﾄﾞ", "4", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_工事種別", "5", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_発注元ｺｰﾄﾞ", "6", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_発注元", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_契約金額", "8", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_追加金額", "9", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_合計金額", "10", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_実行予算", "11", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_実際原価", "12", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_契約日付", "13", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_工期", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_工期終了", "15", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_着工日付", "16", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_完成日付", "17", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_検査引渡日", "18", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_現場代理人所見", "19", "", "YES", "ntext", "1073741823",
					 "2147483646", "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_営業所見", "20", "", "YES", "ntext", "1073741823",
					 "2147483646", "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_HAT030", "21", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_HAT040", "22", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_HAT050", "23", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_nyuudat", "24", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_sw", "25", "", "NO", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_bikou1", "26", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_bikou2", "27", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_nyuno", "28", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_sinsadat", "29", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_mitsumori", "30", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_type", "31", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_sya011", "32", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_sya012", "33", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_koukoku", "34", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_yoteinuki", "35", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "yo_yoteikomi", "36", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "req_id", "37", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "req_kouji", "38", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "req_syaid", "39", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "req_result", "40", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "req_locate", "41", "", "YES", "nvarchar", "-1", "-1", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR010", "42", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR020", "43", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR030", "44", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR040", "45", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR050", "46", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR060", "47", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR070", "48", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR080", "49", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR090", "50", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR100", "51", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR110", "52", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR120", "53", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "MBR130", "54", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "km_name", "55", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_request01", "km_no", "56", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_request01() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *yo_工事名 = new char[511];
		char *yo_工事番号 = new char[511];
		char *yo_工事種別 = new char[101];
		char *yo_発注元 = new char[511];
		char *yo_現場代理人所見 = new char[MAXBUF];
		char *yo_営業所見 = new char[MAXBUF];
		char *yo_HAT030 = new char[101];
		char *yo_HAT040 = new char[101];
		char *yo_HAT050 = new char[101];
		char *yo_bikou1 = new char[511];
		char *yo_bikou2 = new char[511];
		char *yo_nyuno = new char[101];
		char *yo_sya012 = new char[81];
		char *req_locate = new char[0];
		char *MBR020 = new char[101];
		char *MBR060 = new char[511];
		char *MBR070 = new char[511];
		char *MBR090 = new char[511];
		char *MBR100 = new char[511];
		char *MBR110 = new char[511];
		char *MBR120 = new char[41];
		char *MBR130 = new char[101];
		char *km_name = new char[511];
		char *km_no = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_request01 rec;
				com->GetData(1, SQL_C_LONG, &rec.yo_工事コード, sizeof(rec.yo_工事コード), 0);
				memset(yo_工事名, 0, 511);
				com->GetData(2, SQL_C_CHAR, yo_工事名, 511, 0);
				rec.yo_工事名 = (char *)yo_工事名;
				memset(yo_工事番号, 0, 511);
				com->GetData(3, SQL_C_CHAR, yo_工事番号, 511, 0);
				rec.yo_工事番号 = (char *)yo_工事番号;
				com->GetData(4, SQL_C_LONG, &rec.yo_工種ｺｰﾄﾞ, sizeof(rec.yo_工種ｺｰﾄﾞ), 0);
				memset(yo_工事種別, 0, 101);
				com->GetData(5, SQL_C_CHAR, yo_工事種別, 101, 0);
				rec.yo_工事種別 = (char *)yo_工事種別;
				com->GetData(6, SQL_C_LONG, &rec.yo_発注元ｺｰﾄﾞ, sizeof(rec.yo_発注元ｺｰﾄﾞ), 0);
				memset(yo_発注元, 0, 511);
				com->GetData(7, SQL_C_CHAR, yo_発注元, 511, 0);
				rec.yo_発注元 = (char *)yo_発注元;
				com->GetData(8, SQL_C_DOUBLE, &rec.yo_契約金額, sizeof(rec.yo_契約金額), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.yo_追加金額, sizeof(rec.yo_追加金額), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.yo_合計金額, sizeof(rec.yo_合計金額), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.yo_実行予算, sizeof(rec.yo_実行予算), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.yo_実際原価, sizeof(rec.yo_実際原価), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.yo_契約日付, sizeof(rec.yo_契約日付), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期, sizeof(rec.yo_工期), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期終了, sizeof(rec.yo_工期終了), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.yo_着工日付, sizeof(rec.yo_着工日付), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.yo_完成日付, sizeof(rec.yo_完成日付), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.yo_検査引渡日, sizeof(rec.yo_検査引渡日), 0);
				memset(yo_現場代理人所見, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, yo_現場代理人所見, 1048576, 0);
				rec.yo_現場代理人所見 = (char *)yo_現場代理人所見;
				memset(yo_営業所見, 0, 1048576);
				com->GetData(20, SQL_C_CHAR, yo_営業所見, 1048576, 0);
				rec.yo_営業所見 = (char *)yo_営業所見;
				memset(yo_HAT030, 0, 101);
				com->GetData(21, SQL_C_CHAR, yo_HAT030, 101, 0);
				rec.yo_HAT030 = (char *)yo_HAT030;
				memset(yo_HAT040, 0, 101);
				com->GetData(22, SQL_C_CHAR, yo_HAT040, 101, 0);
				rec.yo_HAT040 = (char *)yo_HAT040;
				memset(yo_HAT050, 0, 101);
				com->GetData(23, SQL_C_CHAR, yo_HAT050, 101, 0);
				rec.yo_HAT050 = (char *)yo_HAT050;
				com->GetData(24, SQL_C_TYPE_TIMESTAMP, &rec.yo_nyuudat, sizeof(rec.yo_nyuudat), 0);
				com->GetData(25, SQL_C_CHAR, &rec.yo_sw, sizeof(rec.yo_sw), 0);
				memset(yo_bikou1, 0, 511);
				com->GetData(26, SQL_C_CHAR, yo_bikou1, 511, 0);
				rec.yo_bikou1 = (char *)yo_bikou1;
				memset(yo_bikou2, 0, 511);
				com->GetData(27, SQL_C_CHAR, yo_bikou2, 511, 0);
				rec.yo_bikou2 = (char *)yo_bikou2;
				memset(yo_nyuno, 0, 101);
				com->GetData(28, SQL_C_CHAR, yo_nyuno, 101, 0);
				rec.yo_nyuno = (char *)yo_nyuno;
				com->GetData(29, SQL_C_TYPE_TIMESTAMP, &rec.yo_sinsadat, sizeof(rec.yo_sinsadat), 0);
				com->GetData(30, SQL_C_TYPE_TIMESTAMP, &rec.yo_mitsumori, sizeof(rec.yo_mitsumori), 0);
				com->GetData(31, SQL_C_LONG, &rec.yo_type, sizeof(rec.yo_type), 0);
				com->GetData(32, SQL_C_LONG, &rec.yo_sya011, sizeof(rec.yo_sya011), 0);
				memset(yo_sya012, 0, 81);
				com->GetData(33, SQL_C_CHAR, yo_sya012, 81, 0);
				rec.yo_sya012 = (char *)yo_sya012;
				com->GetData(34, SQL_C_TYPE_TIMESTAMP, &rec.yo_koukoku, sizeof(rec.yo_koukoku), 0);
				com->GetData(35, SQL_C_NUMERIC, &rec.yo_yoteinuki, sizeof(rec.yo_yoteinuki), 0);
				com->GetData(36, SQL_C_NUMERIC, &rec.yo_yoteikomi, sizeof(rec.yo_yoteikomi), 0);
				com->GetData(37, SQL_C_LONG, &rec.req_id, sizeof(rec.req_id), 0);
				com->GetData(38, SQL_C_LONG, &rec.req_kouji, sizeof(rec.req_kouji), 0);
				com->GetData(39, SQL_C_LONG, &rec.req_syaid, sizeof(rec.req_syaid), 0);
				com->GetData(40, SQL_C_LONG, &rec.req_result, sizeof(rec.req_result), 0);
				memset(req_locate, 0, 0);
				com->GetData(41, SQL_C_CHAR, req_locate, 0, 0);
				rec.req_locate = (char *)req_locate;
				com->GetData(42, SQL_C_LONG, &rec.MBR010, sizeof(rec.MBR010), 0);
				memset(MBR020, 0, 101);
				com->GetData(43, SQL_C_CHAR, MBR020, 101, 0);
				rec.MBR020 = (char *)MBR020;
				com->GetData(44, SQL_C_DOUBLE, &rec.MBR030, sizeof(rec.MBR030), 0);
				com->GetData(45, SQL_C_DOUBLE, &rec.MBR040, sizeof(rec.MBR040), 0);
				com->GetData(46, SQL_C_DOUBLE, &rec.MBR050, sizeof(rec.MBR050), 0);
				memset(MBR060, 0, 511);
				com->GetData(47, SQL_C_CHAR, MBR060, 511, 0);
				rec.MBR060 = (char *)MBR060;
				memset(MBR070, 0, 511);
				com->GetData(48, SQL_C_CHAR, MBR070, 511, 0);
				rec.MBR070 = (char *)MBR070;
				com->GetData(49, SQL_C_TYPE_TIMESTAMP, &rec.MBR080, sizeof(rec.MBR080), 0);
				memset(MBR090, 0, 511);
				com->GetData(50, SQL_C_CHAR, MBR090, 511, 0);
				rec.MBR090 = (char *)MBR090;
				memset(MBR100, 0, 511);
				com->GetData(51, SQL_C_CHAR, MBR100, 511, 0);
				rec.MBR100 = (char *)MBR100;
				memset(MBR110, 0, 511);
				com->GetData(52, SQL_C_CHAR, MBR110, 511, 0);
				rec.MBR110 = (char *)MBR110;
				memset(MBR120, 0, 41);
				com->GetData(53, SQL_C_CHAR, MBR120, 41, 0);
				rec.MBR120 = (char *)MBR120;
				memset(MBR130, 0, 101);
				com->GetData(54, SQL_C_CHAR, MBR130, 101, 0);
				rec.MBR130 = (char *)MBR130;
				memset(km_name, 0, 511);
				com->GetData(55, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(56, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] yo_工事名;
		delete[] yo_工事番号;
		delete[] yo_工事種別;
		delete[] yo_発注元;
		delete[] yo_現場代理人所見;
		delete[] yo_営業所見;
		delete[] yo_HAT030;
		delete[] yo_HAT040;
		delete[] yo_HAT050;
		delete[] yo_bikou1;
		delete[] yo_bikou2;
		delete[] yo_nyuno;
		delete[] yo_sya012;
		delete[] req_locate;
		delete[] MBR020;
		delete[] MBR060;
		delete[] MBR070;
		delete[] MBR090;
		delete[] MBR100;
		delete[] MBR110;
		delete[] MBR120;
		delete[] MBR130;
		delete[] km_name;
		delete[] km_no;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_request01 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_request01 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_request01 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_request01> m_Data;
};
class CR_t_keireki : public COdbcRecord {
public:
	CR_t_keireki() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_keireki() {}

	void Initialize() {
		kr_index = 0;
		kr_syacd = 0;
		kr_nengo = "";
		kr_nendo = 0;
		kr_kouji = 0;
		kr_name = "";
		kr_no = "";
		kr_hat = "";
		kr_syozoku = "";
		kr_motouke = "";
		kr_syokumu = "";
		kr_bikou1 = "";
	}

public:
	SQLINTEGER kr_index;
	SQLINTEGER kr_syacd;
	std::string kr_nengo;
	SQLINTEGER kr_nendo;
	SQLINTEGER kr_kouji;
	std::string kr_name;
	std::string kr_no;
	TIMESTAMP_STRUCT kr_kaisi;
	TIMESTAMP_STRUCT kr_owari;
	std::string kr_hat;
	std::string kr_syozoku;
	std::string kr_motouke;
	std::string kr_syokumu;
	std::string kr_bikou1;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kr_index;
		} break;
		case 1: {
			ss << this->kr_syacd;
		} break;
		case 2: {
			ss << this->kr_nengo;
		} break;
		case 3: {
			ss << this->kr_nendo;
		} break;
		case 4: {
			ss << this->kr_kouji;
		} break;
		case 5: {
			ss << this->kr_name;
		} break;
		case 6: {
			ss << this->kr_no;
		} break;
		case 7: {
			COdbcDateTime date(&this->kr_kaisi);
			ss << date.to_string();
		} break;
		case 8: {
			COdbcDateTime date(&this->kr_owari);
			ss << date.to_string();
		} break;
		case 9: {
			ss << this->kr_hat;
		} break;
		case 10: {
			ss << this->kr_syozoku;
		} break;
		case 11: {
			ss << this->kr_motouke;
		} break;
		case 12: {
			ss << this->kr_syokumu;
		} break;
		case 13: {
			ss << this->kr_bikou1;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_keireki : public COdbcTable {
public:
	CT_t_keireki() : COdbcTable() {
		m_TableName = "t_keireki";
		m_SqlSELECT = "SELECT "
					  "kr_index,"
					  "kr_syacd,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1"
					  " FROM t_keireki";
		m_SqlINSERT = "INSERT INTO t_keireki ("
					  "kr_index,"
					  "kr_syacd,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_keireki SET "
					  "kr_index = ?,"
					  "kr_syacd = ?,"
					  "kr_nengo = ?,"
					  "kr_nendo = ?,"
					  "kr_kouji = ?,"
					  "kr_name = ?,"
					  "kr_no = ?,"
					  "kr_kaisi = ?,"
					  "kr_owari = ?,"
					  "kr_hat = ?,"
					  "kr_syozoku = ?,"
					  "kr_motouke = ?,"
					  "kr_syokumu = ?,"
					  "kr_bikou1 = ?";

		m_SqlDELETE = "DELETE t_keireki ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_syacd", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_nengo", "3", "", "NO", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_nendo", "4", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_kouji", "5", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_name", "6", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_no", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_kaisi", "8", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_owari", "9", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_hat", "10", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_syozoku", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_motouke", "12", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_syokumu", "13", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_keireki", "kr_bikou1", "14", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_keireki() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *kr_nengo = new char[101];
		char *kr_name = new char[511];
		char *kr_no = new char[511];
		char *kr_hat = new char[511];
		char *kr_syozoku = new char[511];
		char *kr_motouke = new char[101];
		char *kr_syokumu = new char[101];
		char *kr_bikou1 = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_keireki rec;
				com->GetData(1, SQL_C_LONG, &rec.kr_index, sizeof(rec.kr_index), 0);
				com->GetData(2, SQL_C_LONG, &rec.kr_syacd, sizeof(rec.kr_syacd), 0);
				memset(kr_nengo, 0, 101);
				com->GetData(3, SQL_C_CHAR, kr_nengo, 101, 0);
				rec.kr_nengo = (char *)kr_nengo;
				com->GetData(4, SQL_C_LONG, &rec.kr_nendo, sizeof(rec.kr_nendo), 0);
				com->GetData(5, SQL_C_LONG, &rec.kr_kouji, sizeof(rec.kr_kouji), 0);
				memset(kr_name, 0, 511);
				com->GetData(6, SQL_C_CHAR, kr_name, 511, 0);
				rec.kr_name = (char *)kr_name;
				memset(kr_no, 0, 511);
				com->GetData(7, SQL_C_CHAR, kr_no, 511, 0);
				rec.kr_no = (char *)kr_no;
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.kr_kaisi, sizeof(rec.kr_kaisi), 0);
				com->GetData(9, SQL_C_TYPE_TIMESTAMP, &rec.kr_owari, sizeof(rec.kr_owari), 0);
				memset(kr_hat, 0, 511);
				com->GetData(10, SQL_C_CHAR, kr_hat, 511, 0);
				rec.kr_hat = (char *)kr_hat;
				memset(kr_syozoku, 0, 511);
				com->GetData(11, SQL_C_CHAR, kr_syozoku, 511, 0);
				rec.kr_syozoku = (char *)kr_syozoku;
				memset(kr_motouke, 0, 101);
				com->GetData(12, SQL_C_CHAR, kr_motouke, 101, 0);
				rec.kr_motouke = (char *)kr_motouke;
				memset(kr_syokumu, 0, 101);
				com->GetData(13, SQL_C_CHAR, kr_syokumu, 101, 0);
				rec.kr_syokumu = (char *)kr_syokumu;
				memset(kr_bikou1, 0, 511);
				com->GetData(14, SQL_C_CHAR, kr_bikou1, 511, 0);
				rec.kr_bikou1 = (char *)kr_bikou1;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] kr_nengo;
		delete[] kr_name;
		delete[] kr_no;
		delete[] kr_hat;
		delete[] kr_syozoku;
		delete[] kr_motouke;
		delete[] kr_syokumu;
		delete[] kr_bikou1;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_keireki operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_keireki &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_keireki rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_keireki> m_Data;
};
class CR_t_kikai : public COdbcRecord {
public:
	CR_t_kikai() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kikai() {}

	void Initialize() {
		kicode = 0;
		kiname = "";
		kikana = "";
		kikikaku = "";
		kitani = "";
		kitanka = 0.0;
	}

public:
	SQLINTEGER kicode;
	std::string kiname;
	std::string kikana;
	std::string kikikaku;
	std::string kitani;
	SQLFLOAT kitanka;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kicode;
		} break;
		case 1: {
			ss << this->kiname;
		} break;
		case 2: {
			ss << this->kikana;
		} break;
		case 3: {
			ss << this->kikikaku;
		} break;
		case 4: {
			ss << this->kitani;
		} break;
		case 5: {
			ss << this->kitanka;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kikai : public COdbcTable {
public:
	CT_t_kikai() : COdbcTable() {
		m_TableName = "t_kikai";
		m_SqlSELECT = "SELECT "
					  "kicode,"
					  "kiname,"
					  "kikana,"
					  "kikikaku,"
					  "kitani,"
					  "kitanka"
					  " FROM t_kikai";
		m_SqlINSERT = "INSERT INTO t_kikai ("
					  "kicode,"
					  "kiname,"
					  "kikana,"
					  "kikikaku,"
					  "kitani,"
					  "kitanka)"
					  " VALUES ( ?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_kikai SET "
					  "kicode = ?,"
					  "kiname = ?,"
					  "kikana = ?,"
					  "kikikaku = ?,"
					  "kitani = ?,"
					  "kitanka = ?";

		m_SqlDELETE = "DELETE t_kikai ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kikai", "kicode", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kikai", "kiname", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kikai", "kikana", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kikai", "kikikaku", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kikai", "kitani", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kikai", "kitanka", "6", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_kikai() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *kiname = new char[511];
		char *kikana = new char[511];
		char *kikikaku = new char[511];
		char *kitani = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kikai rec;
				com->GetData(1, SQL_C_LONG, &rec.kicode, sizeof(rec.kicode), 0);
				memset(kiname, 0, 511);
				com->GetData(2, SQL_C_CHAR, kiname, 511, 0);
				rec.kiname = (char *)kiname;
				memset(kikana, 0, 511);
				com->GetData(3, SQL_C_CHAR, kikana, 511, 0);
				rec.kikana = (char *)kikana;
				memset(kikikaku, 0, 511);
				com->GetData(4, SQL_C_CHAR, kikikaku, 511, 0);
				rec.kikikaku = (char *)kikikaku;
				memset(kitani, 0, 511);
				com->GetData(5, SQL_C_CHAR, kitani, 511, 0);
				rec.kitani = (char *)kitani;
				com->GetData(6, SQL_C_DOUBLE, &rec.kitanka, sizeof(rec.kitanka), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] kiname;
		delete[] kikana;
		delete[] kikikaku;
		delete[] kitani;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kikai operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kikai &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kikai rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kikai> m_Data;
};
class CR_t_kojin : public COdbcRecord {
public:
	CR_t_kojin() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kojin() {}

	void Initialize() {
		code = 0;
		name = "";
		kana = "";
		sex = 0;
		zip = "";
		adr1 = "";
		adr2 = "";
		tel = "";
		mob = "";
		type1 = "";
		type2 = "";
		mail1 = "";
		mail2 = "";
		sikaku = "";
		zyouhou = 0;
		volunt = 0;
		syoku = "";
	}

public:
	SQLINTEGER code;
	std::string name;
	std::string kana;
	SQLINTEGER sex;
	TIMESTAMP_STRUCT seinen;
	TIMESTAMP_STRUCT nyusya;
	std::string zip;
	std::string adr1;
	std::string adr2;
	std::string tel;
	std::string mob;
	std::string type1;
	std::string type2;
	std::string mail1;
	std::string mail2;
	std::string sikaku;
	TIMESTAMP_STRUCT kkei;
	TIMESTAMP_STRUCT saigai;
	SQLINTEGER zyouhou;
	SQLCHAR volunt;
	std::string syoku;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->code;
		} break;
		case 1: {
			ss << this->name;
		} break;
		case 2: {
			ss << this->kana;
		} break;
		case 3: {
			ss << this->sex;
		} break;
		case 4: {
			COdbcDateTime date(&this->seinen);
			ss << date.to_string();
		} break;
		case 5: {
			COdbcDateTime date(&this->nyusya);
			ss << date.to_string();
		} break;
		case 6: {
			ss << this->zip;
		} break;
		case 7: {
			ss << this->adr1;
		} break;
		case 8: {
			ss << this->adr2;
		} break;
		case 9: {
			ss << this->tel;
		} break;
		case 10: {
			ss << this->mob;
		} break;
		case 11: {
			ss << this->type1;
		} break;
		case 12: {
			ss << this->type2;
		} break;
		case 13: {
			ss << this->mail1;
		} break;
		case 14: {
			ss << this->mail2;
		} break;
		case 15: {
			ss << this->sikaku;
		} break;
		case 16: {
			COdbcDateTime date(&this->kkei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->saigai);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->zyouhou;
		} break;
		case 19: {
			ss << this->volunt;
		} break;
		case 20: {
			ss << this->syoku;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kojin : public COdbcTable {
public:
	CT_t_kojin() : COdbcTable() {
		m_TableName = "t_kojin";
		m_SqlSELECT = "SELECT "
					  "code,"
					  "name,"
					  "kana,"
					  "sex,"
					  "seinen,"
					  "nyusya,"
					  "zip,"
					  "adr1,"
					  "adr2,"
					  "tel,"
					  "mob,"
					  "type1,"
					  "type2,"
					  "mail1,"
					  "mail2,"
					  "sikaku,"
					  "kkei,"
					  "saigai,"
					  "zyouhou,"
					  "volunt,"
					  "syoku"
					  " FROM t_kojin";
		m_SqlINSERT = "INSERT INTO t_kojin ("
					  "code,"
					  "name,"
					  "kana,"
					  "sex,"
					  "seinen,"
					  "nyusya,"
					  "zip,"
					  "adr1,"
					  "adr2,"
					  "tel,"
					  "mob,"
					  "type1,"
					  "type2,"
					  "mail1,"
					  "mail2,"
					  "sikaku,"
					  "kkei,"
					  "saigai,"
					  "zyouhou,"
					  "volunt,"
					  "syoku)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_kojin SET "
					  "code = ?,"
					  "name = ?,"
					  "kana = ?,"
					  "sex = ?,"
					  "seinen = ?,"
					  "nyusya = ?,"
					  "zip = ?,"
					  "adr1 = ?,"
					  "adr2 = ?,"
					  "tel = ?,"
					  "mob = ?,"
					  "type1 = ?,"
					  "type2 = ?,"
					  "mail1 = ?,"
					  "mail2 = ?,"
					  "sikaku = ?,"
					  "kkei = ?,"
					  "saigai = ?,"
					  "zyouhou = ?,"
					  "volunt = ?,"
					  "syoku = ?";

		m_SqlDELETE = "DELETE t_kojin ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kojin", "code", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "name", "2", "", "YES", "varchar", "50", "50", "0", "0", "0", "cp932",
					 "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "kana", "3", "", "YES", "varchar", "50", "50", "0", "0", "0", "cp932",
					 "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "sex", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "seinen", "5", "", "YES", "datetime", "0", "0", "0", "0", "3", "", "",
					 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "nyusya", "6", "", "YES", "datetime", "0", "0", "0", "0", "3", "", "",
					 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "zip", "7", "", "YES", "varchar", "50", "50", "0", "0", "0", "cp932",
					 "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "adr1", "8", "", "YES", "varchar", "250", "250", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "adr2", "9", "", "YES", "varchar", "250", "250", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "tel", "10", "", "YES", "varchar", "50", "50", "0", "0", "0", "cp932",
					 "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "mob", "11", "", "YES", "varchar", "50", "50", "0", "0", "0", "cp932",
					 "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "type1", "12", "", "YES", "varchar", "50", "50", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "type2", "13", "", "YES", "varchar", "50", "50", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "mail1", "14", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "mail2", "15", "", "YES", "varchar", "50", "50", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "sikaku", "16", "", "YES", "varchar", "100", "100", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "kkei", "17", "", "YES", "datetime", "0", "0", "0", "0", "3", "", "",
					 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "saigai", "18", "", "YES", "datetime", "0", "0", "0", "0", "3", "", "",
					 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "zyouhou", "19", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "volunt", "20", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kojin", "syoku", "21", "", "YES", "varchar", "50", "50", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_kojin() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *name = new char[51];
		char *kana = new char[51];
		char *zip = new char[51];
		char *adr1 = new char[251];
		char *adr2 = new char[251];
		char *tel = new char[51];
		char *mob = new char[51];
		char *type1 = new char[51];
		char *type2 = new char[51];
		char *mail1 = new char[101];
		char *mail2 = new char[51];
		char *sikaku = new char[101];
		char *syoku = new char[51];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kojin rec;
				com->GetData(1, SQL_C_LONG, &rec.code, sizeof(rec.code), 0);
				memset(name, 0, 51);
				com->GetData(2, SQL_C_CHAR, name, 51, 0);
				rec.name = (char *)name;
				memset(kana, 0, 51);
				com->GetData(3, SQL_C_CHAR, kana, 51, 0);
				rec.kana = (char *)kana;
				com->GetData(4, SQL_C_LONG, &rec.sex, sizeof(rec.sex), 0);
				com->GetData(5, SQL_C_TYPE_TIMESTAMP, &rec.seinen, sizeof(rec.seinen), 0);
				com->GetData(6, SQL_C_TYPE_TIMESTAMP, &rec.nyusya, sizeof(rec.nyusya), 0);
				memset(zip, 0, 51);
				com->GetData(7, SQL_C_CHAR, zip, 51, 0);
				rec.zip = (char *)zip;
				memset(adr1, 0, 251);
				com->GetData(8, SQL_C_CHAR, adr1, 251, 0);
				rec.adr1 = (char *)adr1;
				memset(adr2, 0, 251);
				com->GetData(9, SQL_C_CHAR, adr2, 251, 0);
				rec.adr2 = (char *)adr2;
				memset(tel, 0, 51);
				com->GetData(10, SQL_C_CHAR, tel, 51, 0);
				rec.tel = (char *)tel;
				memset(mob, 0, 51);
				com->GetData(11, SQL_C_CHAR, mob, 51, 0);
				rec.mob = (char *)mob;
				memset(type1, 0, 51);
				com->GetData(12, SQL_C_CHAR, type1, 51, 0);
				rec.type1 = (char *)type1;
				memset(type2, 0, 51);
				com->GetData(13, SQL_C_CHAR, type2, 51, 0);
				rec.type2 = (char *)type2;
				memset(mail1, 0, 101);
				com->GetData(14, SQL_C_CHAR, mail1, 101, 0);
				rec.mail1 = (char *)mail1;
				memset(mail2, 0, 51);
				com->GetData(15, SQL_C_CHAR, mail2, 51, 0);
				rec.mail2 = (char *)mail2;
				memset(sikaku, 0, 101);
				com->GetData(16, SQL_C_CHAR, sikaku, 101, 0);
				rec.sikaku = (char *)sikaku;
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.kkei, sizeof(rec.kkei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.saigai, sizeof(rec.saigai), 0);
				com->GetData(19, SQL_C_LONG, &rec.zyouhou, sizeof(rec.zyouhou), 0);
				com->GetData(20, SQL_C_CHAR, &rec.volunt, sizeof(rec.volunt), 0);
				memset(syoku, 0, 51);
				com->GetData(21, SQL_C_CHAR, syoku, 51, 0);
				rec.syoku = (char *)syoku;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] name;
		delete[] kana;
		delete[] zip;
		delete[] adr1;
		delete[] adr2;
		delete[] tel;
		delete[] mob;
		delete[] type1;
		delete[] type2;
		delete[] mail1;
		delete[] mail2;
		delete[] sikaku;
		delete[] syoku;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kojin operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kojin &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kojin rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kojin> m_Data;
};
class CR_t_kouji : public COdbcRecord {
public:
	CR_t_kouji() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kouji() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		km_syoken = "";
		km_zai00 = 0.0;
		km_zai01 = 0.0;
		km_zai02 = 0.0;
		km_zai03 = 0.0;
		km_zai04 = 0.0;
		km_rou01 = 0.0;
		km_rou02 = 0.0;
		km_rou03 = 0.0;
		km_rou04 = 0.0;
		km_gai01 = 0.0;
		km_gai02 = 0.0;
		km_gai03 = 0.0;
		km_gai04 = 0.0;
		km_kik01 = 0.0;
		km_kik02 = 0.0;
		km_kik03 = 0.0;
		km_kik04 = 0.0;
		km_kas01 = 0.0;
		km_kas02 = 0.0;
		km_kas03 = 0.0;
		km_kas04 = 0.0;
		km_kyuyo01 = 0.0;
		km_kyuyo02 = 0.0;
		km_kyuyo03 = 0.0;
		km_kyuyo04 = 0.0;
		km_tyo01 = 0.0;
		km_tyo02 = 0.0;
		km_tyo03 = 0.0;
		km_tyo04 = 0.0;
		km_kan01 = 0.0;
		km_kan02 = 0.0;
		km_gou01 = 0.0;
		km_gou02 = 0.0;
		km_gou03 = 0.0;
		km_gou04 = 0.0;
		km_yos01 = 0.0;
		km_yos02 = 0.0;
		km_yos03 = 0.0;
		km_yos04 = 0.0;
		km_ipn01 = 0.0;
		km_ipn02 = 0.0;
		km_yosankei = 0.0;
		km_zisekikei = 0.0;
		km_rie01 = 0.0;
		km_rie02 = 0.0;
		km_rie03 = 0.0;
		km_rie04 = 0.0;
		km_hok01 = 0.0;
		km_hok02 = 0.0;
		km_nen = 0;
		km_tuk = 0;
		km_sya011 = 0;
		km_sya012 = "";
		km_sya021 = 0;
		km_sya022 = "";
		km_sya031 = 0;
		km_sya032 = "";
		km_nendo = 0;
		km_kei01 = 0.0;
		km_kei02 = 0.0;
		km_man01 = 0.0;
		km_man02 = 0.0;
		km_man03 = 0.0;
		km_man04 = 0.0;
		km_man05 = 0.0;
		km_wom01 = 0.0;
		km_wom02 = 0.0;
		km_wom03 = 0.0;
		km_wom04 = 0.0;
		km_wom05 = 0.0;
		km_syoteate = 0.0;
		km_tingin = 0.0;
		km_syaho01 = 0.0;
		km_koyou01 = 0.0;
		km_kyosai01 = 0.0;
		km_fukuri01 = 0.0;
		km_kyu011 = 0.0;
		km_kyu012 = 0.0;
		km_kyu013 = 0.0;
		km_kyu021 = 0.0;
		km_kyu022 = 0.0;
		km_kyu023 = 0.0;
		km_kyu031 = 0.0;
		km_kyu032 = 0.0;
		km_kyu033 = 0.0;
		km_kyu014 = 0.0;
		km_kyu015 = 0.0;
		km_kyu016 = 0.0;
		km_kyu024 = 0.0;
		km_kyu025 = 0.0;
		km_kyu026 = 0.0;
		km_kyu034 = 0.0;
		km_kyu035 = 0.0;
		km_kyu036 = 0.0;
		km_kyuyokei = 0.0;
		km_syaho02 = 0.0;
		km_koyou02 = 0.0;
		km_kyosai02 = 0.0;
		km_fukuri02 = 0.0;
		km_kyuyosou = 0.0;
		km_rousaihoken = 0.0;
		km_kks01 = 0.0;
		km_kks02 = 0.0;
		km_kks03 = 0.0;
		km_kks04 = 0.0;
		km_chidai = 0.0;
		km_kukakin = 0.0;
		km_tusin = 0.0;
		km_hokenryo = 0.0;
		km_zappi = 0.0;
		km_sonota = 0.0;
		km_corins = 0.0;
		km_kaigihi = 0.0;
		km_kaihi = 0.0;
		km_anzen = 0.0;
		km_kousai = 0.0;
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_sw = 0;
		km_bikou1 = "";
		km_bikou2 = "";
		km_nyuno = "";
		km_syouhizei = 0.0;
		km_ritsu = 0.0;
		km_ukeoi = 0;
		km_ten = 0;
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	TIMESTAMP_STRUCT km_keidate;
	TIMESTAMP_STRUCT km_kaisi;
	TIMESTAMP_STRUCT km_owari;
	TIMESTAMP_STRUCT km_tyakou;
	TIMESTAMP_STRUCT km_kansei;
	TIMESTAMP_STRUCT km_kensa;
	std::string km_syoken;
	SQLFLOAT km_zai00;
	SQLFLOAT km_zai01;
	SQLFLOAT km_zai02;
	SQLFLOAT km_zai03;
	SQLFLOAT km_zai04;
	SQLFLOAT km_rou01;
	SQLFLOAT km_rou02;
	SQLFLOAT km_rou03;
	SQLFLOAT km_rou04;
	SQLFLOAT km_gai01;
	SQLFLOAT km_gai02;
	SQLFLOAT km_gai03;
	SQLFLOAT km_gai04;
	SQLFLOAT km_kik01;
	SQLFLOAT km_kik02;
	SQLFLOAT km_kik03;
	SQLFLOAT km_kik04;
	SQLFLOAT km_kas01;
	SQLFLOAT km_kas02;
	SQLFLOAT km_kas03;
	SQLFLOAT km_kas04;
	SQLFLOAT km_kyuyo01;
	SQLFLOAT km_kyuyo02;
	SQLFLOAT km_kyuyo03;
	SQLFLOAT km_kyuyo04;
	SQLFLOAT km_tyo01;
	SQLFLOAT km_tyo02;
	SQLFLOAT km_tyo03;
	SQLFLOAT km_tyo04;
	SQLFLOAT km_kan01;
	SQLFLOAT km_kan02;
	SQLFLOAT km_gou01;
	SQLFLOAT km_gou02;
	SQLFLOAT km_gou03;
	SQLFLOAT km_gou04;
	SQLFLOAT km_yos01;
	SQLFLOAT km_yos02;
	SQLFLOAT km_yos03;
	SQLFLOAT km_yos04;
	SQLFLOAT km_ipn01;
	SQLFLOAT km_ipn02;
	SQLFLOAT km_yosankei;
	SQLFLOAT km_zisekikei;
	SQLFLOAT km_rie01;
	SQLFLOAT km_rie02;
	SQLFLOAT km_rie03;
	SQLFLOAT km_rie04;
	SQLFLOAT km_hok01;
	SQLFLOAT km_hok02;
	SQLSMALLINT km_nen;
	SQLSMALLINT km_tuk;
	SQLINTEGER km_sya011;
	std::string km_sya012;
	SQLINTEGER km_sya021;
	std::string km_sya022;
	SQLINTEGER km_sya031;
	std::string km_sya032;
	SQLSMALLINT km_nendo;
	SQLFLOAT km_kei01;
	SQLFLOAT km_kei02;
	SQLFLOAT km_man01;
	SQLFLOAT km_man02;
	SQLFLOAT km_man03;
	SQLFLOAT km_man04;
	SQLFLOAT km_man05;
	SQLFLOAT km_wom01;
	SQLFLOAT km_wom02;
	SQLFLOAT km_wom03;
	SQLFLOAT km_wom04;
	SQLFLOAT km_wom05;
	SQLFLOAT km_syoteate;
	SQLFLOAT km_tingin;
	SQLFLOAT km_syaho01;
	SQLFLOAT km_koyou01;
	SQLFLOAT km_kyosai01;
	SQLFLOAT km_fukuri01;
	SQLFLOAT km_kyu011;
	SQLFLOAT km_kyu012;
	SQLFLOAT km_kyu013;
	SQLFLOAT km_kyu021;
	SQLFLOAT km_kyu022;
	SQLFLOAT km_kyu023;
	SQLFLOAT km_kyu031;
	SQLFLOAT km_kyu032;
	SQLFLOAT km_kyu033;
	SQLFLOAT km_kyu014;
	SQLFLOAT km_kyu015;
	SQLFLOAT km_kyu016;
	SQLFLOAT km_kyu024;
	SQLFLOAT km_kyu025;
	SQLFLOAT km_kyu026;
	SQLFLOAT km_kyu034;
	SQLFLOAT km_kyu035;
	SQLFLOAT km_kyu036;
	SQLFLOAT km_kyuyokei;
	SQLFLOAT km_syaho02;
	SQLFLOAT km_koyou02;
	SQLFLOAT km_kyosai02;
	SQLFLOAT km_fukuri02;
	SQLFLOAT km_kyuyosou;
	SQLFLOAT km_rousaihoken;
	SQLFLOAT km_kks01;
	SQLFLOAT km_kks02;
	SQLFLOAT km_kks03;
	SQLFLOAT km_kks04;
	SQLFLOAT km_chidai;
	SQLFLOAT km_kukakin;
	SQLFLOAT km_tusin;
	SQLFLOAT km_hokenryo;
	SQLFLOAT km_zappi;
	SQLFLOAT km_sonota;
	SQLFLOAT km_corins;
	SQLFLOAT km_kaigihi;
	SQLFLOAT km_kaihi;
	SQLFLOAT km_anzen;
	SQLFLOAT km_kousai;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_bikou1;
	std::string km_bikou2;
	std::string km_nyuno;
	SQLFLOAT km_syouhizei;
	TIMESTAMP_STRUCT km_mitsumori;
	SQLFLOAT km_ritsu;
	SQLINTEGER km_ukeoi;
	SQLINTEGER km_ten;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_keiyaku;
		} break;
		case 8: {
			ss << this->km_tsuika;
		} break;
		case 9: {
			ss << this->km_goukei;
		} break;
		case 10: {
			ss << this->km_yosan;
		} break;
		case 11: {
			ss << this->km_genka;
		} break;
		case 12: {
			COdbcDateTime date(&this->km_keidate);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->km_kaisi);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->km_owari);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->km_tyakou);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->km_kansei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->km_kensa);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->km_syoken;
		} break;
		case 19: {
			ss << this->km_zai00;
		} break;
		case 20: {
			ss << this->km_zai01;
		} break;
		case 21: {
			ss << this->km_zai02;
		} break;
		case 22: {
			ss << this->km_zai03;
		} break;
		case 23: {
			ss << this->km_zai04;
		} break;
		case 24: {
			ss << this->km_rou01;
		} break;
		case 25: {
			ss << this->km_rou02;
		} break;
		case 26: {
			ss << this->km_rou03;
		} break;
		case 27: {
			ss << this->km_rou04;
		} break;
		case 28: {
			ss << this->km_gai01;
		} break;
		case 29: {
			ss << this->km_gai02;
		} break;
		case 30: {
			ss << this->km_gai03;
		} break;
		case 31: {
			ss << this->km_gai04;
		} break;
		case 32: {
			ss << this->km_kik01;
		} break;
		case 33: {
			ss << this->km_kik02;
		} break;
		case 34: {
			ss << this->km_kik03;
		} break;
		case 35: {
			ss << this->km_kik04;
		} break;
		case 36: {
			ss << this->km_kas01;
		} break;
		case 37: {
			ss << this->km_kas02;
		} break;
		case 38: {
			ss << this->km_kas03;
		} break;
		case 39: {
			ss << this->km_kas04;
		} break;
		case 40: {
			ss << this->km_kyuyo01;
		} break;
		case 41: {
			ss << this->km_kyuyo02;
		} break;
		case 42: {
			ss << this->km_kyuyo03;
		} break;
		case 43: {
			ss << this->km_kyuyo04;
		} break;
		case 44: {
			ss << this->km_tyo01;
		} break;
		case 45: {
			ss << this->km_tyo02;
		} break;
		case 46: {
			ss << this->km_tyo03;
		} break;
		case 47: {
			ss << this->km_tyo04;
		} break;
		case 48: {
			ss << this->km_kan01;
		} break;
		case 49: {
			ss << this->km_kan02;
		} break;
		case 50: {
			ss << this->km_gou01;
		} break;
		case 51: {
			ss << this->km_gou02;
		} break;
		case 52: {
			ss << this->km_gou03;
		} break;
		case 53: {
			ss << this->km_gou04;
		} break;
		case 54: {
			ss << this->km_yos01;
		} break;
		case 55: {
			ss << this->km_yos02;
		} break;
		case 56: {
			ss << this->km_yos03;
		} break;
		case 57: {
			ss << this->km_yos04;
		} break;
		case 58: {
			ss << this->km_ipn01;
		} break;
		case 59: {
			ss << this->km_ipn02;
		} break;
		case 60: {
			ss << this->km_yosankei;
		} break;
		case 61: {
			ss << this->km_zisekikei;
		} break;
		case 62: {
			ss << this->km_rie01;
		} break;
		case 63: {
			ss << this->km_rie02;
		} break;
		case 64: {
			ss << this->km_rie03;
		} break;
		case 65: {
			ss << this->km_rie04;
		} break;
		case 66: {
			ss << this->km_hok01;
		} break;
		case 67: {
			ss << this->km_hok02;
		} break;
		case 68: {
			ss << this->km_nen;
		} break;
		case 69: {
			ss << this->km_tuk;
		} break;
		case 70: {
			ss << this->km_sya011;
		} break;
		case 71: {
			ss << this->km_sya012;
		} break;
		case 72: {
			ss << this->km_sya021;
		} break;
		case 73: {
			ss << this->km_sya022;
		} break;
		case 74: {
			ss << this->km_sya031;
		} break;
		case 75: {
			ss << this->km_sya032;
		} break;
		case 76: {
			ss << this->km_nendo;
		} break;
		case 77: {
			ss << this->km_kei01;
		} break;
		case 78: {
			ss << this->km_kei02;
		} break;
		case 79: {
			ss << this->km_man01;
		} break;
		case 80: {
			ss << this->km_man02;
		} break;
		case 81: {
			ss << this->km_man03;
		} break;
		case 82: {
			ss << this->km_man04;
		} break;
		case 83: {
			ss << this->km_man05;
		} break;
		case 84: {
			ss << this->km_wom01;
		} break;
		case 85: {
			ss << this->km_wom02;
		} break;
		case 86: {
			ss << this->km_wom03;
		} break;
		case 87: {
			ss << this->km_wom04;
		} break;
		case 88: {
			ss << this->km_wom05;
		} break;
		case 89: {
			ss << this->km_syoteate;
		} break;
		case 90: {
			ss << this->km_tingin;
		} break;
		case 91: {
			ss << this->km_syaho01;
		} break;
		case 92: {
			ss << this->km_koyou01;
		} break;
		case 93: {
			ss << this->km_kyosai01;
		} break;
		case 94: {
			ss << this->km_fukuri01;
		} break;
		case 95: {
			ss << this->km_kyu011;
		} break;
		case 96: {
			ss << this->km_kyu012;
		} break;
		case 97: {
			ss << this->km_kyu013;
		} break;
		case 98: {
			ss << this->km_kyu021;
		} break;
		case 99: {
			ss << this->km_kyu022;
		} break;
		case 100: {
			ss << this->km_kyu023;
		} break;
		case 101: {
			ss << this->km_kyu031;
		} break;
		case 102: {
			ss << this->km_kyu032;
		} break;
		case 103: {
			ss << this->km_kyu033;
		} break;
		case 104: {
			ss << this->km_kyu014;
		} break;
		case 105: {
			ss << this->km_kyu015;
		} break;
		case 106: {
			ss << this->km_kyu016;
		} break;
		case 107: {
			ss << this->km_kyu024;
		} break;
		case 108: {
			ss << this->km_kyu025;
		} break;
		case 109: {
			ss << this->km_kyu026;
		} break;
		case 110: {
			ss << this->km_kyu034;
		} break;
		case 111: {
			ss << this->km_kyu035;
		} break;
		case 112: {
			ss << this->km_kyu036;
		} break;
		case 113: {
			ss << this->km_kyuyokei;
		} break;
		case 114: {
			ss << this->km_syaho02;
		} break;
		case 115: {
			ss << this->km_koyou02;
		} break;
		case 116: {
			ss << this->km_kyosai02;
		} break;
		case 117: {
			ss << this->km_fukuri02;
		} break;
		case 118: {
			ss << this->km_kyuyosou;
		} break;
		case 119: {
			ss << this->km_rousaihoken;
		} break;
		case 120: {
			ss << this->km_kks01;
		} break;
		case 121: {
			ss << this->km_kks02;
		} break;
		case 122: {
			ss << this->km_kks03;
		} break;
		case 123: {
			ss << this->km_kks04;
		} break;
		case 124: {
			ss << this->km_chidai;
		} break;
		case 125: {
			ss << this->km_kukakin;
		} break;
		case 126: {
			ss << this->km_tusin;
		} break;
		case 127: {
			ss << this->km_hokenryo;
		} break;
		case 128: {
			ss << this->km_zappi;
		} break;
		case 129: {
			ss << this->km_sonota;
		} break;
		case 130: {
			ss << this->km_corins;
		} break;
		case 131: {
			ss << this->km_kaigihi;
		} break;
		case 132: {
			ss << this->km_kaihi;
		} break;
		case 133: {
			ss << this->km_anzen;
		} break;
		case 134: {
			ss << this->km_kousai;
		} break;
		case 135: {
			ss << this->km_hat030;
		} break;
		case 136: {
			ss << this->km_hat040;
		} break;
		case 137: {
			ss << this->km_hat050;
		} break;
		case 138: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 139: {
			ss << this->km_sw;
		} break;
		case 140: {
			ss << this->km_bikou1;
		} break;
		case 141: {
			ss << this->km_bikou2;
		} break;
		case 142: {
			ss << this->km_nyuno;
		} break;
		case 143: {
			ss << this->km_syouhizei;
		} break;
		case 144: {
			COdbcDateTime date(&this->km_mitsumori);
			ss << date.to_string();
		} break;
		case 145: {
			ss << this->km_ritsu;
		} break;
		case 146: {
			ss << this->km_ukeoi;
		} break;
		case 147: {
			ss << this->km_ten;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kouji : public COdbcTable {
public:
	CT_t_kouji() : COdbcTable() {
		m_TableName = "t_kouji";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "km_syoken,"
					  "km_zai00,"
					  "km_zai01,"
					  "km_zai02,"
					  "km_zai03,"
					  "km_zai04,"
					  "km_rou01,"
					  "km_rou02,"
					  "km_rou03,"
					  "km_rou04,"
					  "km_gai01,"
					  "km_gai02,"
					  "km_gai03,"
					  "km_gai04,"
					  "km_kik01,"
					  "km_kik02,"
					  "km_kik03,"
					  "km_kik04,"
					  "km_kas01,"
					  "km_kas02,"
					  "km_kas03,"
					  "km_kas04,"
					  "km_kyuyo01,"
					  "km_kyuyo02,"
					  "km_kyuyo03,"
					  "km_kyuyo04,"
					  "km_tyo01,"
					  "km_tyo02,"
					  "km_tyo03,"
					  "km_tyo04,"
					  "km_kan01,"
					  "km_kan02,"
					  "km_gou01,"
					  "km_gou02,"
					  "km_gou03,"
					  "km_gou04,"
					  "km_yos01,"
					  "km_yos02,"
					  "km_yos03,"
					  "km_yos04,"
					  "km_ipn01,"
					  "km_ipn02,"
					  "km_yosankei,"
					  "km_zisekikei,"
					  "km_rie01,"
					  "km_rie02,"
					  "km_rie03,"
					  "km_rie04,"
					  "km_hok01,"
					  "km_hok02,"
					  "km_nen,"
					  "km_tuk,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_sya031,"
					  "km_sya032,"
					  "km_nendo,"
					  "km_kei01,"
					  "km_kei02,"
					  "km_man01,"
					  "km_man02,"
					  "km_man03,"
					  "km_man04,"
					  "km_man05,"
					  "km_wom01,"
					  "km_wom02,"
					  "km_wom03,"
					  "km_wom04,"
					  "km_wom05,"
					  "km_syoteate,"
					  "km_tingin,"
					  "km_syaho01,"
					  "km_koyou01,"
					  "km_kyosai01,"
					  "km_fukuri01,"
					  "km_kyu011,"
					  "km_kyu012,"
					  "km_kyu013,"
					  "km_kyu021,"
					  "km_kyu022,"
					  "km_kyu023,"
					  "km_kyu031,"
					  "km_kyu032,"
					  "km_kyu033,"
					  "km_kyu014,"
					  "km_kyu015,"
					  "km_kyu016,"
					  "km_kyu024,"
					  "km_kyu025,"
					  "km_kyu026,"
					  "km_kyu034,"
					  "km_kyu035,"
					  "km_kyu036,"
					  "km_kyuyokei,"
					  "km_syaho02,"
					  "km_koyou02,"
					  "km_kyosai02,"
					  "km_fukuri02,"
					  "km_kyuyosou,"
					  "km_rousaihoken,"
					  "km_kks01,"
					  "km_kks02,"
					  "km_kks03,"
					  "km_kks04,"
					  "km_chidai,"
					  "km_kukakin,"
					  "km_tusin,"
					  "km_hokenryo,"
					  "km_zappi,"
					  "km_sonota,"
					  "km_corins,"
					  "km_kaigihi,"
					  "km_kaihi,"
					  "km_anzen,"
					  "km_kousai,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu,"
					  "km_ukeoi,"
					  "km_ten"
					  " FROM t_kouji";
		m_SqlINSERT =
			"INSERT INTO t_kouji ("
			"km_index,"
			"km_name,"
			"km_no,"
			"km_syucd,"
			"km_kosyu,"
			"km_hatcd,"
			"km_hat02,"
			"km_keiyaku,"
			"km_tsuika,"
			"km_goukei,"
			"km_yosan,"
			"km_genka,"
			"km_keidate,"
			"km_kaisi,"
			"km_owari,"
			"km_tyakou,"
			"km_kansei,"
			"km_kensa,"
			"km_syoken,"
			"km_zai00,"
			"km_zai01,"
			"km_zai02,"
			"km_zai03,"
			"km_zai04,"
			"km_rou01,"
			"km_rou02,"
			"km_rou03,"
			"km_rou04,"
			"km_gai01,"
			"km_gai02,"
			"km_gai03,"
			"km_gai04,"
			"km_kik01,"
			"km_kik02,"
			"km_kik03,"
			"km_kik04,"
			"km_kas01,"
			"km_kas02,"
			"km_kas03,"
			"km_kas04,"
			"km_kyuyo01,"
			"km_kyuyo02,"
			"km_kyuyo03,"
			"km_kyuyo04,"
			"km_tyo01,"
			"km_tyo02,"
			"km_tyo03,"
			"km_tyo04,"
			"km_kan01,"
			"km_kan02,"
			"km_gou01,"
			"km_gou02,"
			"km_gou03,"
			"km_gou04,"
			"km_yos01,"
			"km_yos02,"
			"km_yos03,"
			"km_yos04,"
			"km_ipn01,"
			"km_ipn02,"
			"km_yosankei,"
			"km_zisekikei,"
			"km_rie01,"
			"km_rie02,"
			"km_rie03,"
			"km_rie04,"
			"km_hok01,"
			"km_hok02,"
			"km_nen,"
			"km_tuk,"
			"km_sya011,"
			"km_sya012,"
			"km_sya021,"
			"km_sya022,"
			"km_sya031,"
			"km_sya032,"
			"km_nendo,"
			"km_kei01,"
			"km_kei02,"
			"km_man01,"
			"km_man02,"
			"km_man03,"
			"km_man04,"
			"km_man05,"
			"km_wom01,"
			"km_wom02,"
			"km_wom03,"
			"km_wom04,"
			"km_wom05,"
			"km_syoteate,"
			"km_tingin,"
			"km_syaho01,"
			"km_koyou01,"
			"km_kyosai01,"
			"km_fukuri01,"
			"km_kyu011,"
			"km_kyu012,"
			"km_kyu013,"
			"km_kyu021,"
			"km_kyu022,"
			"km_kyu023,"
			"km_kyu031,"
			"km_kyu032,"
			"km_kyu033,"
			"km_kyu014,"
			"km_kyu015,"
			"km_kyu016,"
			"km_kyu024,"
			"km_kyu025,"
			"km_kyu026,"
			"km_kyu034,"
			"km_kyu035,"
			"km_kyu036,"
			"km_kyuyokei,"
			"km_syaho02,"
			"km_koyou02,"
			"km_kyosai02,"
			"km_fukuri02,"
			"km_kyuyosou,"
			"km_rousaihoken,"
			"km_kks01,"
			"km_kks02,"
			"km_kks03,"
			"km_kks04,"
			"km_chidai,"
			"km_kukakin,"
			"km_tusin,"
			"km_hokenryo,"
			"km_zappi,"
			"km_sonota,"
			"km_corins,"
			"km_kaigihi,"
			"km_kaihi,"
			"km_anzen,"
			"km_kousai,"
			"km_hat030,"
			"km_hat040,"
			"km_hat050,"
			"km_nyuudat,"
			"km_sw,"
			"km_bikou1,"
			"km_bikou2,"
			"km_nyuno,"
			"km_syouhizei,"
			"km_mitsumori,"
			"km_ritsu,"
			"km_ukeoi,"
			"km_ten)"
			" VALUES ( "
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_kouji SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_kensa = ?,"
					  "km_syoken = ?,"
					  "km_zai00 = ?,"
					  "km_zai01 = ?,"
					  "km_zai02 = ?,"
					  "km_zai03 = ?,"
					  "km_zai04 = ?,"
					  "km_rou01 = ?,"
					  "km_rou02 = ?,"
					  "km_rou03 = ?,"
					  "km_rou04 = ?,"
					  "km_gai01 = ?,"
					  "km_gai02 = ?,"
					  "km_gai03 = ?,"
					  "km_gai04 = ?,"
					  "km_kik01 = ?,"
					  "km_kik02 = ?,"
					  "km_kik03 = ?,"
					  "km_kik04 = ?,"
					  "km_kas01 = ?,"
					  "km_kas02 = ?,"
					  "km_kas03 = ?,"
					  "km_kas04 = ?,"
					  "km_kyuyo01 = ?,"
					  "km_kyuyo02 = ?,"
					  "km_kyuyo03 = ?,"
					  "km_kyuyo04 = ?,"
					  "km_tyo01 = ?,"
					  "km_tyo02 = ?,"
					  "km_tyo03 = ?,"
					  "km_tyo04 = ?,"
					  "km_kan01 = ?,"
					  "km_kan02 = ?,"
					  "km_gou01 = ?,"
					  "km_gou02 = ?,"
					  "km_gou03 = ?,"
					  "km_gou04 = ?,"
					  "km_yos01 = ?,"
					  "km_yos02 = ?,"
					  "km_yos03 = ?,"
					  "km_yos04 = ?,"
					  "km_ipn01 = ?,"
					  "km_ipn02 = ?,"
					  "km_yosankei = ?,"
					  "km_zisekikei = ?,"
					  "km_rie01 = ?,"
					  "km_rie02 = ?,"
					  "km_rie03 = ?,"
					  "km_rie04 = ?,"
					  "km_hok01 = ?,"
					  "km_hok02 = ?,"
					  "km_nen = ?,"
					  "km_tuk = ?,"
					  "km_sya011 = ?,"
					  "km_sya012 = ?,"
					  "km_sya021 = ?,"
					  "km_sya022 = ?,"
					  "km_sya031 = ?,"
					  "km_sya032 = ?,"
					  "km_nendo = ?,"
					  "km_kei01 = ?,"
					  "km_kei02 = ?,"
					  "km_man01 = ?,"
					  "km_man02 = ?,"
					  "km_man03 = ?,"
					  "km_man04 = ?,"
					  "km_man05 = ?,"
					  "km_wom01 = ?,"
					  "km_wom02 = ?,"
					  "km_wom03 = ?,"
					  "km_wom04 = ?,"
					  "km_wom05 = ?,"
					  "km_syoteate = ?,"
					  "km_tingin = ?,"
					  "km_syaho01 = ?,"
					  "km_koyou01 = ?,"
					  "km_kyosai01 = ?,"
					  "km_fukuri01 = ?,"
					  "km_kyu011 = ?,"
					  "km_kyu012 = ?,"
					  "km_kyu013 = ?,"
					  "km_kyu021 = ?,"
					  "km_kyu022 = ?,"
					  "km_kyu023 = ?,"
					  "km_kyu031 = ?,"
					  "km_kyu032 = ?,"
					  "km_kyu033 = ?,"
					  "km_kyu014 = ?,"
					  "km_kyu015 = ?,"
					  "km_kyu016 = ?,"
					  "km_kyu024 = ?,"
					  "km_kyu025 = ?,"
					  "km_kyu026 = ?,"
					  "km_kyu034 = ?,"
					  "km_kyu035 = ?,"
					  "km_kyu036 = ?,"
					  "km_kyuyokei = ?,"
					  "km_syaho02 = ?,"
					  "km_koyou02 = ?,"
					  "km_kyosai02 = ?,"
					  "km_fukuri02 = ?,"
					  "km_kyuyosou = ?,"
					  "km_rousaihoken = ?,"
					  "km_kks01 = ?,"
					  "km_kks02 = ?,"
					  "km_kks03 = ?,"
					  "km_kks04 = ?,"
					  "km_chidai = ?,"
					  "km_kukakin = ?,"
					  "km_tusin = ?,"
					  "km_hokenryo = ?,"
					  "km_zappi = ?,"
					  "km_sonota = ?,"
					  "km_corins = ?,"
					  "km_kaigihi = ?,"
					  "km_kaihi = ?,"
					  "km_anzen = ?,"
					  "km_kousai = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuno = ?,"
					  "km_syouhizei = ?,"
					  "km_mitsumori = ?,"
					  "km_ritsu = ?,"
					  "km_ukeoi = ?,"
					  "km_ten = ?";

		m_SqlDELETE = "DELETE t_kouji ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kouji", "km_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_tsuika", "9", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_goukei", "10", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_keidate", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kaisi", "14", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_owari", "15", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_tyakou", "16", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kansei", "17", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kensa", "18", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_syoken", "19", "", "YES", "ntext", "1073741823", "2147483646", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_zai00", "20", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_zai01", "21", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_zai02", "22", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_zai03", "23", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_zai04", "24", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_rou01", "25", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_rou02", "26", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_rou03", "27", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_rou04", "28", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_gai01", "29", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_gai02", "30", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_gai03", "31", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_gai04", "32", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kik01", "33", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kik02", "34", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kik03", "35", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kik04", "36", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kas01", "37", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kas02", "38", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kas03", "39", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kas04", "40", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyuyo01", "41", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyuyo02", "42", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyuyo03", "43", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyuyo04", "44", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_tyo01", "45", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_tyo02", "46", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_tyo03", "47", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_tyo04", "48", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kan01", "49", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kan02", "50", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_gou01", "51", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_gou02", "52", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_gou03", "53", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_gou04", "54", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_yos01", "55", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_yos02", "56", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_yos03", "57", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_yos04", "58", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_ipn01", "59", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_ipn02", "60", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_yosankei", "61", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_zisekikei", "62", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_rie01", "63", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_rie02", "64", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_rie03", "65", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_rie04", "66", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_hok01", "67", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_hok02", "68", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_nen", "69", "", "YES", "smallint", "0", "0", "5", "0", "0", "", "",
					 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_tuk", "70", "", "YES", "smallint", "0", "0", "5", "0", "0", "", "",
					 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_sya011", "71", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_sya012", "72", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_sya021", "73", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_sya022", "74", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_sya031", "75", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_sya032", "76", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_nendo", "77", "", "YES", "smallint", "0", "0", "5", "0", "0", "",
					 "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kei01", "78", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kei02", "79", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_man01", "80", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_man02", "81", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_man03", "82", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_man04", "83", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_man05", "84", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_wom01", "85", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_wom02", "86", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_wom03", "87", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_wom04", "88", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_wom05", "89", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_syoteate", "90", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_tingin", "91", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_syaho01", "92", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_koyou01", "93", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyosai01", "94", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_fukuri01", "95", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu011", "96", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu012", "97", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu013", "98", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu021", "99", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu022", "100", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu023", "101", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu031", "102", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu032", "103", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu033", "104", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu014", "105", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu015", "106", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu016", "107", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu024", "108", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu025", "109", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu026", "110", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu034", "111", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu035", "112", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyu036", "113", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyuyokei", "114", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_syaho02", "115", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_koyou02", "116", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyosai02", "117", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_fukuri02", "118", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kyuyosou", "119", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_rousaihoken", "120", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kks01", "121", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kks02", "122", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kks03", "123", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kks04", "124", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_chidai", "125", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kukakin", "126", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_tusin", "127", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_hokenryo", "128", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_zappi", "129", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_sonota", "130", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_corins", "131", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kaigihi", "132", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kaihi", "133", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_anzen", "134", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_kousai", "135", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_hat030", "136", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_hat040", "137", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_hat050", "138", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_nyuudat", "139", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_sw", "140", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_bikou1", "141", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_bikou2", "142", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_nyuno", "143", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_syouhizei", "144", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_mitsumori", "145", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_ritsu", "146", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_ukeoi", "147", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji", "km_ten", "148", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_kouji() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_syoken = new char[MAXBUF];
		char *km_sya012 = new char[81];
		char *km_sya022 = new char[81];
		char *km_sya032 = new char[81];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kouji rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				com->GetData(8, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.km_keidate, sizeof(rec.km_keidate), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.km_kaisi, sizeof(rec.km_kaisi), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.km_owari, sizeof(rec.km_owari), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.km_tyakou, sizeof(rec.km_tyakou), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.km_kansei, sizeof(rec.km_kansei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.km_kensa, sizeof(rec.km_kensa), 0);
				memset(km_syoken, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, km_syoken, 1048576, 0);
				rec.km_syoken = (char *)km_syoken;
				com->GetData(20, SQL_C_DOUBLE, &rec.km_zai00, sizeof(rec.km_zai00), 0);
				com->GetData(21, SQL_C_DOUBLE, &rec.km_zai01, sizeof(rec.km_zai01), 0);
				com->GetData(22, SQL_C_DOUBLE, &rec.km_zai02, sizeof(rec.km_zai02), 0);
				com->GetData(23, SQL_C_DOUBLE, &rec.km_zai03, sizeof(rec.km_zai03), 0);
				com->GetData(24, SQL_C_DOUBLE, &rec.km_zai04, sizeof(rec.km_zai04), 0);
				com->GetData(25, SQL_C_DOUBLE, &rec.km_rou01, sizeof(rec.km_rou01), 0);
				com->GetData(26, SQL_C_DOUBLE, &rec.km_rou02, sizeof(rec.km_rou02), 0);
				com->GetData(27, SQL_C_DOUBLE, &rec.km_rou03, sizeof(rec.km_rou03), 0);
				com->GetData(28, SQL_C_DOUBLE, &rec.km_rou04, sizeof(rec.km_rou04), 0);
				com->GetData(29, SQL_C_DOUBLE, &rec.km_gai01, sizeof(rec.km_gai01), 0);
				com->GetData(30, SQL_C_DOUBLE, &rec.km_gai02, sizeof(rec.km_gai02), 0);
				com->GetData(31, SQL_C_DOUBLE, &rec.km_gai03, sizeof(rec.km_gai03), 0);
				com->GetData(32, SQL_C_DOUBLE, &rec.km_gai04, sizeof(rec.km_gai04), 0);
				com->GetData(33, SQL_C_DOUBLE, &rec.km_kik01, sizeof(rec.km_kik01), 0);
				com->GetData(34, SQL_C_DOUBLE, &rec.km_kik02, sizeof(rec.km_kik02), 0);
				com->GetData(35, SQL_C_DOUBLE, &rec.km_kik03, sizeof(rec.km_kik03), 0);
				com->GetData(36, SQL_C_DOUBLE, &rec.km_kik04, sizeof(rec.km_kik04), 0);
				com->GetData(37, SQL_C_DOUBLE, &rec.km_kas01, sizeof(rec.km_kas01), 0);
				com->GetData(38, SQL_C_DOUBLE, &rec.km_kas02, sizeof(rec.km_kas02), 0);
				com->GetData(39, SQL_C_DOUBLE, &rec.km_kas03, sizeof(rec.km_kas03), 0);
				com->GetData(40, SQL_C_DOUBLE, &rec.km_kas04, sizeof(rec.km_kas04), 0);
				com->GetData(41, SQL_C_DOUBLE, &rec.km_kyuyo01, sizeof(rec.km_kyuyo01), 0);
				com->GetData(42, SQL_C_DOUBLE, &rec.km_kyuyo02, sizeof(rec.km_kyuyo02), 0);
				com->GetData(43, SQL_C_DOUBLE, &rec.km_kyuyo03, sizeof(rec.km_kyuyo03), 0);
				com->GetData(44, SQL_C_DOUBLE, &rec.km_kyuyo04, sizeof(rec.km_kyuyo04), 0);
				com->GetData(45, SQL_C_DOUBLE, &rec.km_tyo01, sizeof(rec.km_tyo01), 0);
				com->GetData(46, SQL_C_DOUBLE, &rec.km_tyo02, sizeof(rec.km_tyo02), 0);
				com->GetData(47, SQL_C_DOUBLE, &rec.km_tyo03, sizeof(rec.km_tyo03), 0);
				com->GetData(48, SQL_C_DOUBLE, &rec.km_tyo04, sizeof(rec.km_tyo04), 0);
				com->GetData(49, SQL_C_DOUBLE, &rec.km_kan01, sizeof(rec.km_kan01), 0);
				com->GetData(50, SQL_C_DOUBLE, &rec.km_kan02, sizeof(rec.km_kan02), 0);
				com->GetData(51, SQL_C_DOUBLE, &rec.km_gou01, sizeof(rec.km_gou01), 0);
				com->GetData(52, SQL_C_DOUBLE, &rec.km_gou02, sizeof(rec.km_gou02), 0);
				com->GetData(53, SQL_C_DOUBLE, &rec.km_gou03, sizeof(rec.km_gou03), 0);
				com->GetData(54, SQL_C_DOUBLE, &rec.km_gou04, sizeof(rec.km_gou04), 0);
				com->GetData(55, SQL_C_DOUBLE, &rec.km_yos01, sizeof(rec.km_yos01), 0);
				com->GetData(56, SQL_C_DOUBLE, &rec.km_yos02, sizeof(rec.km_yos02), 0);
				com->GetData(57, SQL_C_DOUBLE, &rec.km_yos03, sizeof(rec.km_yos03), 0);
				com->GetData(58, SQL_C_DOUBLE, &rec.km_yos04, sizeof(rec.km_yos04), 0);
				com->GetData(59, SQL_C_DOUBLE, &rec.km_ipn01, sizeof(rec.km_ipn01), 0);
				com->GetData(60, SQL_C_DOUBLE, &rec.km_ipn02, sizeof(rec.km_ipn02), 0);
				com->GetData(61, SQL_C_DOUBLE, &rec.km_yosankei, sizeof(rec.km_yosankei), 0);
				com->GetData(62, SQL_C_DOUBLE, &rec.km_zisekikei, sizeof(rec.km_zisekikei), 0);
				com->GetData(63, SQL_C_DOUBLE, &rec.km_rie01, sizeof(rec.km_rie01), 0);
				com->GetData(64, SQL_C_DOUBLE, &rec.km_rie02, sizeof(rec.km_rie02), 0);
				com->GetData(65, SQL_C_DOUBLE, &rec.km_rie03, sizeof(rec.km_rie03), 0);
				com->GetData(66, SQL_C_DOUBLE, &rec.km_rie04, sizeof(rec.km_rie04), 0);
				com->GetData(67, SQL_C_DOUBLE, &rec.km_hok01, sizeof(rec.km_hok01), 0);
				com->GetData(68, SQL_C_DOUBLE, &rec.km_hok02, sizeof(rec.km_hok02), 0);
				com->GetData(69, SQL_C_SHORT, &rec.km_nen, sizeof(rec.km_nen), 0);
				com->GetData(70, SQL_C_SHORT, &rec.km_tuk, sizeof(rec.km_tuk), 0);
				com->GetData(71, SQL_C_LONG, &rec.km_sya011, sizeof(rec.km_sya011), 0);
				memset(km_sya012, 0, 81);
				com->GetData(72, SQL_C_CHAR, km_sya012, 81, 0);
				rec.km_sya012 = (char *)km_sya012;
				com->GetData(73, SQL_C_LONG, &rec.km_sya021, sizeof(rec.km_sya021), 0);
				memset(km_sya022, 0, 81);
				com->GetData(74, SQL_C_CHAR, km_sya022, 81, 0);
				rec.km_sya022 = (char *)km_sya022;
				com->GetData(75, SQL_C_LONG, &rec.km_sya031, sizeof(rec.km_sya031), 0);
				memset(km_sya032, 0, 81);
				com->GetData(76, SQL_C_CHAR, km_sya032, 81, 0);
				rec.km_sya032 = (char *)km_sya032;
				com->GetData(77, SQL_C_SHORT, &rec.km_nendo, sizeof(rec.km_nendo), 0);
				com->GetData(78, SQL_C_DOUBLE, &rec.km_kei01, sizeof(rec.km_kei01), 0);
				com->GetData(79, SQL_C_DOUBLE, &rec.km_kei02, sizeof(rec.km_kei02), 0);
				com->GetData(80, SQL_C_DOUBLE, &rec.km_man01, sizeof(rec.km_man01), 0);
				com->GetData(81, SQL_C_DOUBLE, &rec.km_man02, sizeof(rec.km_man02), 0);
				com->GetData(82, SQL_C_DOUBLE, &rec.km_man03, sizeof(rec.km_man03), 0);
				com->GetData(83, SQL_C_DOUBLE, &rec.km_man04, sizeof(rec.km_man04), 0);
				com->GetData(84, SQL_C_DOUBLE, &rec.km_man05, sizeof(rec.km_man05), 0);
				com->GetData(85, SQL_C_DOUBLE, &rec.km_wom01, sizeof(rec.km_wom01), 0);
				com->GetData(86, SQL_C_DOUBLE, &rec.km_wom02, sizeof(rec.km_wom02), 0);
				com->GetData(87, SQL_C_DOUBLE, &rec.km_wom03, sizeof(rec.km_wom03), 0);
				com->GetData(88, SQL_C_DOUBLE, &rec.km_wom04, sizeof(rec.km_wom04), 0);
				com->GetData(89, SQL_C_DOUBLE, &rec.km_wom05, sizeof(rec.km_wom05), 0);
				com->GetData(90, SQL_C_DOUBLE, &rec.km_syoteate, sizeof(rec.km_syoteate), 0);
				com->GetData(91, SQL_C_DOUBLE, &rec.km_tingin, sizeof(rec.km_tingin), 0);
				com->GetData(92, SQL_C_DOUBLE, &rec.km_syaho01, sizeof(rec.km_syaho01), 0);
				com->GetData(93, SQL_C_DOUBLE, &rec.km_koyou01, sizeof(rec.km_koyou01), 0);
				com->GetData(94, SQL_C_DOUBLE, &rec.km_kyosai01, sizeof(rec.km_kyosai01), 0);
				com->GetData(95, SQL_C_DOUBLE, &rec.km_fukuri01, sizeof(rec.km_fukuri01), 0);
				com->GetData(96, SQL_C_DOUBLE, &rec.km_kyu011, sizeof(rec.km_kyu011), 0);
				com->GetData(97, SQL_C_DOUBLE, &rec.km_kyu012, sizeof(rec.km_kyu012), 0);
				com->GetData(98, SQL_C_DOUBLE, &rec.km_kyu013, sizeof(rec.km_kyu013), 0);
				com->GetData(99, SQL_C_DOUBLE, &rec.km_kyu021, sizeof(rec.km_kyu021), 0);
				com->GetData(100, SQL_C_DOUBLE, &rec.km_kyu022, sizeof(rec.km_kyu022), 0);
				com->GetData(101, SQL_C_DOUBLE, &rec.km_kyu023, sizeof(rec.km_kyu023), 0);
				com->GetData(102, SQL_C_DOUBLE, &rec.km_kyu031, sizeof(rec.km_kyu031), 0);
				com->GetData(103, SQL_C_DOUBLE, &rec.km_kyu032, sizeof(rec.km_kyu032), 0);
				com->GetData(104, SQL_C_DOUBLE, &rec.km_kyu033, sizeof(rec.km_kyu033), 0);
				com->GetData(105, SQL_C_DOUBLE, &rec.km_kyu014, sizeof(rec.km_kyu014), 0);
				com->GetData(106, SQL_C_DOUBLE, &rec.km_kyu015, sizeof(rec.km_kyu015), 0);
				com->GetData(107, SQL_C_DOUBLE, &rec.km_kyu016, sizeof(rec.km_kyu016), 0);
				com->GetData(108, SQL_C_DOUBLE, &rec.km_kyu024, sizeof(rec.km_kyu024), 0);
				com->GetData(109, SQL_C_DOUBLE, &rec.km_kyu025, sizeof(rec.km_kyu025), 0);
				com->GetData(110, SQL_C_DOUBLE, &rec.km_kyu026, sizeof(rec.km_kyu026), 0);
				com->GetData(111, SQL_C_DOUBLE, &rec.km_kyu034, sizeof(rec.km_kyu034), 0);
				com->GetData(112, SQL_C_DOUBLE, &rec.km_kyu035, sizeof(rec.km_kyu035), 0);
				com->GetData(113, SQL_C_DOUBLE, &rec.km_kyu036, sizeof(rec.km_kyu036), 0);
				com->GetData(114, SQL_C_DOUBLE, &rec.km_kyuyokei, sizeof(rec.km_kyuyokei), 0);
				com->GetData(115, SQL_C_DOUBLE, &rec.km_syaho02, sizeof(rec.km_syaho02), 0);
				com->GetData(116, SQL_C_DOUBLE, &rec.km_koyou02, sizeof(rec.km_koyou02), 0);
				com->GetData(117, SQL_C_DOUBLE, &rec.km_kyosai02, sizeof(rec.km_kyosai02), 0);
				com->GetData(118, SQL_C_DOUBLE, &rec.km_fukuri02, sizeof(rec.km_fukuri02), 0);
				com->GetData(119, SQL_C_DOUBLE, &rec.km_kyuyosou, sizeof(rec.km_kyuyosou), 0);
				com->GetData(120, SQL_C_DOUBLE, &rec.km_rousaihoken, sizeof(rec.km_rousaihoken), 0);
				com->GetData(121, SQL_C_DOUBLE, &rec.km_kks01, sizeof(rec.km_kks01), 0);
				com->GetData(122, SQL_C_DOUBLE, &rec.km_kks02, sizeof(rec.km_kks02), 0);
				com->GetData(123, SQL_C_DOUBLE, &rec.km_kks03, sizeof(rec.km_kks03), 0);
				com->GetData(124, SQL_C_DOUBLE, &rec.km_kks04, sizeof(rec.km_kks04), 0);
				com->GetData(125, SQL_C_DOUBLE, &rec.km_chidai, sizeof(rec.km_chidai), 0);
				com->GetData(126, SQL_C_DOUBLE, &rec.km_kukakin, sizeof(rec.km_kukakin), 0);
				com->GetData(127, SQL_C_DOUBLE, &rec.km_tusin, sizeof(rec.km_tusin), 0);
				com->GetData(128, SQL_C_DOUBLE, &rec.km_hokenryo, sizeof(rec.km_hokenryo), 0);
				com->GetData(129, SQL_C_DOUBLE, &rec.km_zappi, sizeof(rec.km_zappi), 0);
				com->GetData(130, SQL_C_DOUBLE, &rec.km_sonota, sizeof(rec.km_sonota), 0);
				com->GetData(131, SQL_C_DOUBLE, &rec.km_corins, sizeof(rec.km_corins), 0);
				com->GetData(132, SQL_C_DOUBLE, &rec.km_kaigihi, sizeof(rec.km_kaigihi), 0);
				com->GetData(133, SQL_C_DOUBLE, &rec.km_kaihi, sizeof(rec.km_kaihi), 0);
				com->GetData(134, SQL_C_DOUBLE, &rec.km_anzen, sizeof(rec.km_anzen), 0);
				com->GetData(135, SQL_C_DOUBLE, &rec.km_kousai, sizeof(rec.km_kousai), 0);
				memset(km_hat030, 0, 101);
				com->GetData(136, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(137, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(138, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				com->GetData(139, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(140, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_bikou1, 0, 511);
				com->GetData(141, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(142, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				memset(km_nyuno, 0, 101);
				com->GetData(143, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				com->GetData(144, SQL_C_DOUBLE, &rec.km_syouhizei, sizeof(rec.km_syouhizei), 0);
				com->GetData(145, SQL_C_TYPE_TIMESTAMP, &rec.km_mitsumori, sizeof(rec.km_mitsumori), 0);
				com->GetData(146, SQL_C_DOUBLE, &rec.km_ritsu, sizeof(rec.km_ritsu), 0);
				com->GetData(147, SQL_C_LONG, &rec.km_ukeoi, sizeof(rec.km_ukeoi), 0);
				com->GetData(148, SQL_C_LONG, &rec.km_ten, sizeof(rec.km_ten), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_syoken;
		delete[] km_sya012;
		delete[] km_sya022;
		delete[] km_sya032;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kouji operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kouji &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kouji rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kouji> m_Data;
};
class CR_t_kouji_xml : public COdbcRecord {
public:
	CR_t_kouji_xml() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kouji_xml() {}

	void Initialize() {
		xml_index = 0;
		xml_kouji = 0;
		xml_parent = 0;
		xml_name = "";
		xml_value = "";
	}

public:
	SQLLEN xml_index;
	SQLINTEGER xml_kouji;
	SQLLEN xml_parent;
	std::string xml_name;
	std::string xml_value;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->xml_index;
		} break;
		case 1: {
			ss << this->xml_kouji;
		} break;
		case 2: {
			ss << this->xml_parent;
		} break;
		case 3: {
			ss << this->xml_name;
		} break;
		case 4: {
			ss << this->xml_value;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kouji_xml : public COdbcTable {
public:
	CT_t_kouji_xml() : COdbcTable() {
		m_TableName = "t_kouji_xml";
		m_SqlSELECT = "SELECT "
					  "xml_index,"
					  "xml_kouji,"
					  "xml_parent,"
					  "xml_name,"
					  "xml_value"
					  " FROM t_kouji_xml";
		m_SqlINSERT = "INSERT INTO t_kouji_xml ("
					  "xml_index,"
					  "xml_kouji,"
					  "xml_parent,"
					  "xml_name,"
					  "xml_value)"
					  " VALUES ( ?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_kouji_xml SET "
					  "xml_index = ?,"
					  "xml_kouji = ?,"
					  "xml_parent = ?,"
					  "xml_name = ?,"
					  "xml_value = ?";

		m_SqlDELETE = "DELETE t_kouji_xml ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kouji_xml", "xml_index", "1", "", "NO", "bigint", "0", "0", "19", "0", "0", "",
					 "", 0, _bigint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji_xml", "xml_kouji", "2", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji_xml", "xml_parent", "3", "", "YES", "bigint", "0", "0", "19", "0", "0",
					 "", "", 0, _bigint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji_xml", "xml_name", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouji_xml", "xml_value", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_kouji_xml() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *xml_name = new char[511];
		char *xml_value = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kouji_xml rec;
				com->GetData(1, SQL_C_SBIGINT, &rec.xml_index, sizeof(rec.xml_index), 0);
				com->GetData(2, SQL_C_LONG, &rec.xml_kouji, sizeof(rec.xml_kouji), 0);
				com->GetData(3, SQL_C_SBIGINT, &rec.xml_parent, sizeof(rec.xml_parent), 0);
				memset(xml_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, xml_name, 511, 0);
				rec.xml_name = (char *)xml_name;
				memset(xml_value, 0, 511);
				com->GetData(5, SQL_C_CHAR, xml_value, 511, 0);
				rec.xml_value = (char *)xml_value;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] xml_name;
		delete[] xml_value;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kouji_xml operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kouji_xml &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kouji_xml rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kouji_xml> m_Data;
};
class CR_t_koujinosyurui : public COdbcRecord {
public:
	CR_t_koujinosyurui() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_koujinosyurui() {}

	void Initialize() {
		sy_id = 0;
		sy_name = "";
		sy_onoff = 0;
	}

public:
	SQLINTEGER sy_id;
	std::string sy_name;
	SQLCHAR sy_onoff;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->sy_id;
		} break;
		case 1: {
			ss << this->sy_name;
		} break;
		case 2: {
			ss << this->sy_onoff;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_koujinosyurui : public COdbcTable {
public:
	CT_t_koujinosyurui() : COdbcTable() {
		m_TableName = "t_koujinosyurui";
		m_SqlSELECT = "SELECT "
					  "sy_id,"
					  "sy_name,"
					  "sy_onoff"
					  " FROM t_koujinosyurui";
		m_SqlINSERT = "INSERT INTO t_koujinosyurui ("
					  "sy_id,"
					  "sy_name,"
					  "sy_onoff)"
					  " VALUES ( ?,?,?)";
		m_SqlUPDATE = "UPDATE t_koujinosyurui SET "
					  "sy_name = ?,"
					  "sy_onoff = ?";

		m_SqlDELETE = "DELETE t_koujinosyurui ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_koujinosyurui", "sy_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujinosyurui", "sy_name", "2", "", "YES", "varchar", "255", "255", "0", "0",
					 "0", "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujinosyurui", "sy_onoff", "3", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_koujinosyurui", "sy_id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_koujinosyurui() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *sy_name = new char[256];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_koujinosyurui rec;
				com->GetData(1, SQL_C_LONG, &rec.sy_id, sizeof(rec.sy_id), 0);
				memset(sy_name, 0, 256);
				com->GetData(2, SQL_C_CHAR, sy_name, 256, 0);
				rec.sy_name = (char *)sy_name;
				com->GetData(3, SQL_C_CHAR, &rec.sy_onoff, sizeof(rec.sy_onoff), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] sy_name;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_koujinosyurui operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_koujinosyurui &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_koujinosyurui rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_koujinosyurui> m_Data;
};
class CR_t_koujiyobi : public COdbcRecord {
public:
	CR_t_koujiyobi() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_koujiyobi() {}

	void Initialize() {
		yo_工事コード = 0;
		yo_工事名 = "";
		yo_工事番号 = "";
		yo_工種ｺｰﾄﾞ = 0;
		yo_工事種別 = "";
		yo_発注元ｺｰﾄﾞ = 0;
		yo_発注元 = "";
		yo_契約金額 = 0.0;
		yo_追加金額 = 0.0;
		yo_合計金額 = 0.0;
		yo_実行予算 = 0.0;
		yo_実際原価 = 0.0;
		yo_現場代理人所見 = "";
		yo_営業所見 = "";
		yo_HAT030 = "";
		yo_HAT040 = "";
		yo_HAT050 = "";
		yo_sw = 0;
		yo_bikou1 = "";
		yo_bikou2 = "";
		yo_nyuno = "";
		yo_type = 0;
		yo_sya011 = 0;
		yo_sya012 = "";
		memset(&yo_yoteinuki, 0, sizeof(yo_yoteinuki));
		memset(&yo_yoteikomi, 0, sizeof(yo_yoteikomi));
	}

public:
	SQLINTEGER yo_工事コード;
	std::string yo_工事名;
	std::string yo_工事番号;
	SQLINTEGER yo_工種ｺｰﾄﾞ;
	std::string yo_工事種別;
	SQLINTEGER yo_発注元ｺｰﾄﾞ;
	std::string yo_発注元;
	SQLFLOAT yo_契約金額;
	SQLFLOAT yo_追加金額;
	SQLFLOAT yo_合計金額;
	SQLFLOAT yo_実行予算;
	SQLFLOAT yo_実際原価;
	TIMESTAMP_STRUCT yo_契約日付;
	TIMESTAMP_STRUCT yo_工期;
	TIMESTAMP_STRUCT yo_工期終了;
	TIMESTAMP_STRUCT yo_着工日付;
	TIMESTAMP_STRUCT yo_完成日付;
	TIMESTAMP_STRUCT yo_検査引渡日;
	std::string yo_現場代理人所見;
	std::string yo_営業所見;
	std::string yo_HAT030;
	std::string yo_HAT040;
	std::string yo_HAT050;
	TIMESTAMP_STRUCT yo_nyuudat;
	SQLCHAR yo_sw;
	std::string yo_bikou1;
	std::string yo_bikou2;
	std::string yo_nyuno;
	TIMESTAMP_STRUCT yo_sinsadat;
	TIMESTAMP_STRUCT yo_mitsumori;
	SQLINTEGER yo_type;
	SQLINTEGER yo_sya011;
	std::string yo_sya012;
	TIMESTAMP_STRUCT yo_koukoku;
	SQL_NUMERIC_STRUCT yo_yoteinuki;
	SQL_NUMERIC_STRUCT yo_yoteikomi;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->yo_工事コード;
		} break;
		case 1: {
			ss << this->yo_工事名;
		} break;
		case 2: {
			ss << this->yo_工事番号;
		} break;
		case 3: {
			ss << this->yo_工種ｺｰﾄﾞ;
		} break;
		case 4: {
			ss << this->yo_工事種別;
		} break;
		case 5: {
			ss << this->yo_発注元ｺｰﾄﾞ;
		} break;
		case 6: {
			ss << this->yo_発注元;
		} break;
		case 7: {
			ss << this->yo_契約金額;
		} break;
		case 8: {
			ss << this->yo_追加金額;
		} break;
		case 9: {
			ss << this->yo_合計金額;
		} break;
		case 10: {
			ss << this->yo_実行予算;
		} break;
		case 11: {
			ss << this->yo_実際原価;
		} break;
		case 12: {
			COdbcDateTime date(&this->yo_契約日付);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->yo_工期);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->yo_工期終了);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->yo_着工日付);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->yo_完成日付);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->yo_検査引渡日);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->yo_現場代理人所見;
		} break;
		case 19: {
			ss << this->yo_営業所見;
		} break;
		case 20: {
			ss << this->yo_HAT030;
		} break;
		case 21: {
			ss << this->yo_HAT040;
		} break;
		case 22: {
			ss << this->yo_HAT050;
		} break;
		case 23: {
			COdbcDateTime date(&this->yo_nyuudat);
			ss << date.to_string();
		} break;
		case 24: {
			ss << this->yo_sw;
		} break;
		case 25: {
			ss << this->yo_bikou1;
		} break;
		case 26: {
			ss << this->yo_bikou2;
		} break;
		case 27: {
			ss << this->yo_nyuno;
		} break;
		case 28: {
			COdbcDateTime date(&this->yo_sinsadat);
			ss << date.to_string();
		} break;
		case 29: {
			COdbcDateTime date(&this->yo_mitsumori);
			ss << date.to_string();
		} break;
		case 30: {
			ss << this->yo_type;
		} break;
		case 31: {
			ss << this->yo_sya011;
		} break;
		case 32: {
			ss << this->yo_sya012;
		} break;
		case 33: {
			COdbcDateTime date(&this->yo_koukoku);
			ss << date.to_string();
		} break;
		case 34: {
			ss << COdbcColumn::NumericToString(&this->yo_yoteinuki);
		} break;
		case 35: {
			ss << COdbcColumn::NumericToString(&this->yo_yoteikomi);
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_koujiyobi : public COdbcTable {
public:
	CT_t_koujiyobi() : COdbcTable() {
		m_TableName = "t_koujiyobi";
		m_SqlSELECT = "SELECT "
					  "yo_工事コード,"
					  "yo_工事名,"
					  "yo_工事番号,"
					  "yo_工種ｺｰﾄﾞ,"
					  "yo_工事種別,"
					  "yo_発注元ｺｰﾄﾞ,"
					  "yo_発注元,"
					  "yo_契約金額,"
					  "yo_追加金額,"
					  "yo_合計金額,"
					  "yo_実行予算,"
					  "yo_実際原価,"
					  "yo_契約日付,"
					  "yo_工期,"
					  "yo_工期終了,"
					  "yo_着工日付,"
					  "yo_完成日付,"
					  "yo_検査引渡日,"
					  "yo_現場代理人所見,"
					  "yo_営業所見,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012,"
					  "yo_koukoku,"
					  "yo_yoteinuki,"
					  "yo_yoteikomi"
					  " FROM t_koujiyobi";
		m_SqlINSERT = "INSERT INTO t_koujiyobi ("
					  "yo_工事コード,"
					  "yo_工事名,"
					  "yo_工事番号,"
					  "yo_工種ｺｰﾄﾞ,"
					  "yo_工事種別,"
					  "yo_発注元ｺｰﾄﾞ,"
					  "yo_発注元,"
					  "yo_契約金額,"
					  "yo_追加金額,"
					  "yo_合計金額,"
					  "yo_実行予算,"
					  "yo_実際原価,"
					  "yo_契約日付,"
					  "yo_工期,"
					  "yo_工期終了,"
					  "yo_着工日付,"
					  "yo_完成日付,"
					  "yo_検査引渡日,"
					  "yo_現場代理人所見,"
					  "yo_営業所見,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012,"
					  "yo_koukoku,"
					  "yo_yoteinuki,"
					  "yo_yoteikomi)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_koujiyobi SET "
					  "yo_工事コード = ?,"
					  "yo_工事名 = ?,"
					  "yo_工事番号 = ?,"
					  "yo_工種ｺｰﾄﾞ = ?,"
					  "yo_工事種別 = ?,"
					  "yo_発注元ｺｰﾄﾞ = ?,"
					  "yo_発注元 = ?,"
					  "yo_契約金額 = ?,"
					  "yo_追加金額 = ?,"
					  "yo_合計金額 = ?,"
					  "yo_実行予算 = ?,"
					  "yo_実際原価 = ?,"
					  "yo_契約日付 = ?,"
					  "yo_工期 = ?,"
					  "yo_工期終了 = ?,"
					  "yo_着工日付 = ?,"
					  "yo_完成日付 = ?,"
					  "yo_検査引渡日 = ?,"
					  "yo_現場代理人所見 = ?,"
					  "yo_営業所見 = ?,"
					  "yo_HAT030 = ?,"
					  "yo_HAT040 = ?,"
					  "yo_HAT050 = ?,"
					  "yo_nyuudat = ?,"
					  "yo_sw = ?,"
					  "yo_bikou1 = ?,"
					  "yo_bikou2 = ?,"
					  "yo_nyuno = ?,"
					  "yo_sinsadat = ?,"
					  "yo_mitsumori = ?,"
					  "yo_type = ?,"
					  "yo_sya011 = ?,"
					  "yo_sya012 = ?,"
					  "yo_koukoku = ?,"
					  "yo_yoteinuki = ?,"
					  "yo_yoteikomi = ?";

		m_SqlDELETE = "DELETE t_koujiyobi ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_工事コード", "1", "", "NO", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_工事名", "2", "", "NO", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_工事番号", "3", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_工種ｺｰﾄﾞ", "4", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_工事種別", "5", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_発注元ｺｰﾄﾞ", "6", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_発注元", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_契約金額", "8", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_追加金額", "9", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_合計金額", "10", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_実行予算", "11", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_実際原価", "12", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_契約日付", "13", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_工期", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_工期終了", "15", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_着工日付", "16", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_完成日付", "17", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_検査引渡日", "18", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_現場代理人所見", "19", "", "YES", "ntext", "1073741823",
					 "2147483646", "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_営業所見", "20", "", "YES", "ntext", "1073741823",
					 "2147483646", "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_HAT030", "21", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_HAT040", "22", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_HAT050", "23", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_nyuudat", "24", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_sw", "25", "", "NO", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_bikou1", "26", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_bikou2", "27", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_nyuno", "28", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_sinsadat", "29", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_mitsumori", "30", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_type", "31", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_sya011", "32", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_sya012", "33", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_koukoku", "34", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_yoteinuki", "35", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi", "yo_yoteikomi", "36", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_koujiyobi() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *yo_工事名 = new char[511];
		char *yo_工事番号 = new char[511];
		char *yo_工事種別 = new char[101];
		char *yo_発注元 = new char[511];
		char *yo_現場代理人所見 = new char[MAXBUF];
		char *yo_営業所見 = new char[MAXBUF];
		char *yo_HAT030 = new char[101];
		char *yo_HAT040 = new char[101];
		char *yo_HAT050 = new char[101];
		char *yo_bikou1 = new char[511];
		char *yo_bikou2 = new char[511];
		char *yo_nyuno = new char[101];
		char *yo_sya012 = new char[81];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_koujiyobi rec;
				com->GetData(1, SQL_C_LONG, &rec.yo_工事コード, sizeof(rec.yo_工事コード), 0);
				memset(yo_工事名, 0, 511);
				com->GetData(2, SQL_C_CHAR, yo_工事名, 511, 0);
				rec.yo_工事名 = (char *)yo_工事名;
				memset(yo_工事番号, 0, 511);
				com->GetData(3, SQL_C_CHAR, yo_工事番号, 511, 0);
				rec.yo_工事番号 = (char *)yo_工事番号;
				com->GetData(4, SQL_C_LONG, &rec.yo_工種ｺｰﾄﾞ, sizeof(rec.yo_工種ｺｰﾄﾞ), 0);
				memset(yo_工事種別, 0, 101);
				com->GetData(5, SQL_C_CHAR, yo_工事種別, 101, 0);
				rec.yo_工事種別 = (char *)yo_工事種別;
				com->GetData(6, SQL_C_LONG, &rec.yo_発注元ｺｰﾄﾞ, sizeof(rec.yo_発注元ｺｰﾄﾞ), 0);
				memset(yo_発注元, 0, 511);
				com->GetData(7, SQL_C_CHAR, yo_発注元, 511, 0);
				rec.yo_発注元 = (char *)yo_発注元;
				com->GetData(8, SQL_C_DOUBLE, &rec.yo_契約金額, sizeof(rec.yo_契約金額), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.yo_追加金額, sizeof(rec.yo_追加金額), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.yo_合計金額, sizeof(rec.yo_合計金額), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.yo_実行予算, sizeof(rec.yo_実行予算), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.yo_実際原価, sizeof(rec.yo_実際原価), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.yo_契約日付, sizeof(rec.yo_契約日付), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期, sizeof(rec.yo_工期), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.yo_工期終了, sizeof(rec.yo_工期終了), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.yo_着工日付, sizeof(rec.yo_着工日付), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.yo_完成日付, sizeof(rec.yo_完成日付), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.yo_検査引渡日, sizeof(rec.yo_検査引渡日), 0);
				memset(yo_現場代理人所見, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, yo_現場代理人所見, 1048576, 0);
				rec.yo_現場代理人所見 = (char *)yo_現場代理人所見;
				memset(yo_営業所見, 0, 1048576);
				com->GetData(20, SQL_C_CHAR, yo_営業所見, 1048576, 0);
				rec.yo_営業所見 = (char *)yo_営業所見;
				memset(yo_HAT030, 0, 101);
				com->GetData(21, SQL_C_CHAR, yo_HAT030, 101, 0);
				rec.yo_HAT030 = (char *)yo_HAT030;
				memset(yo_HAT040, 0, 101);
				com->GetData(22, SQL_C_CHAR, yo_HAT040, 101, 0);
				rec.yo_HAT040 = (char *)yo_HAT040;
				memset(yo_HAT050, 0, 101);
				com->GetData(23, SQL_C_CHAR, yo_HAT050, 101, 0);
				rec.yo_HAT050 = (char *)yo_HAT050;
				com->GetData(24, SQL_C_TYPE_TIMESTAMP, &rec.yo_nyuudat, sizeof(rec.yo_nyuudat), 0);
				com->GetData(25, SQL_C_CHAR, &rec.yo_sw, sizeof(rec.yo_sw), 0);
				memset(yo_bikou1, 0, 511);
				com->GetData(26, SQL_C_CHAR, yo_bikou1, 511, 0);
				rec.yo_bikou1 = (char *)yo_bikou1;
				memset(yo_bikou2, 0, 511);
				com->GetData(27, SQL_C_CHAR, yo_bikou2, 511, 0);
				rec.yo_bikou2 = (char *)yo_bikou2;
				memset(yo_nyuno, 0, 101);
				com->GetData(28, SQL_C_CHAR, yo_nyuno, 101, 0);
				rec.yo_nyuno = (char *)yo_nyuno;
				com->GetData(29, SQL_C_TYPE_TIMESTAMP, &rec.yo_sinsadat, sizeof(rec.yo_sinsadat), 0);
				com->GetData(30, SQL_C_TYPE_TIMESTAMP, &rec.yo_mitsumori, sizeof(rec.yo_mitsumori), 0);
				com->GetData(31, SQL_C_LONG, &rec.yo_type, sizeof(rec.yo_type), 0);
				com->GetData(32, SQL_C_LONG, &rec.yo_sya011, sizeof(rec.yo_sya011), 0);
				memset(yo_sya012, 0, 81);
				com->GetData(33, SQL_C_CHAR, yo_sya012, 81, 0);
				rec.yo_sya012 = (char *)yo_sya012;
				com->GetData(34, SQL_C_TYPE_TIMESTAMP, &rec.yo_koukoku, sizeof(rec.yo_koukoku), 0);
				com->GetData(35, SQL_C_NUMERIC, &rec.yo_yoteinuki, sizeof(rec.yo_yoteinuki), 0);
				com->GetData(36, SQL_C_NUMERIC, &rec.yo_yoteikomi, sizeof(rec.yo_yoteikomi), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] yo_工事名;
		delete[] yo_工事番号;
		delete[] yo_工事種別;
		delete[] yo_発注元;
		delete[] yo_現場代理人所見;
		delete[] yo_営業所見;
		delete[] yo_HAT030;
		delete[] yo_HAT040;
		delete[] yo_HAT050;
		delete[] yo_bikou1;
		delete[] yo_bikou2;
		delete[] yo_nyuno;
		delete[] yo_sya012;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_koujiyobi operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_koujiyobi &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_koujiyobi rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_koujiyobi> m_Data;
};
class CR_t_koujiyobi2 : public COdbcRecord {
public:
	CR_t_koujiyobi2() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_koujiyobi2() {}

	void Initialize() {
		yo_kcode = 0;
		yo_kname = "";
		yo_kno = "";
		yo_scode = 0;
		yo_syubetsu = "";
		yo_hatcd = 0;
		yo_HAT020 = "";
		yo_keiyaku = 0.0;
		yo_tuika = 0.0;
		yo_koukei = 0.0;
		yo_yosan = 0.0;
		yo_genka = 0.0;
		yo_dairi = "";
		yo_eigyou = "";
		yo_HAT030 = "";
		yo_HAT040 = "";
		yo_HAT050 = "";
		yo_sw = 0;
		yo_bikou1 = "";
		yo_bikou2 = "";
		yo_nyuno = "";
		yo_type = 0;
		yo_sya011 = 0;
		yo_sya012 = "";
		yo_ucode = 0;
	}

public:
	SQLINTEGER yo_kcode;
	std::string yo_kname;
	std::string yo_kno;
	SQLINTEGER yo_scode;
	std::string yo_syubetsu;
	SQLINTEGER yo_hatcd;
	std::string yo_HAT020;
	SQLFLOAT yo_keiyaku;
	SQLFLOAT yo_tuika;
	SQLFLOAT yo_koukei;
	SQLFLOAT yo_yosan;
	SQLFLOAT yo_genka;
	TIMESTAMP_STRUCT yo_kdate;
	TIMESTAMP_STRUCT yo_kaisi;
	TIMESTAMP_STRUCT yo_owari;
	TIMESTAMP_STRUCT yo_tyakou;
	TIMESTAMP_STRUCT yo_kansei;
	TIMESTAMP_STRUCT yo_kensa;
	std::string yo_dairi;
	std::string yo_eigyou;
	std::string yo_HAT030;
	std::string yo_HAT040;
	std::string yo_HAT050;
	TIMESTAMP_STRUCT yo_nyuudat;
	SQLCHAR yo_sw;
	std::string yo_bikou1;
	std::string yo_bikou2;
	std::string yo_nyuno;
	TIMESTAMP_STRUCT yo_sinsadat;
	TIMESTAMP_STRUCT yo_mitsumori;
	SQLINTEGER yo_type;
	SQLINTEGER yo_sya011;
	std::string yo_sya012;
	TIMESTAMP_STRUCT yo_koukoku;
	SQLINTEGER yo_ucode;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->yo_kcode;
		} break;
		case 1: {
			ss << this->yo_kname;
		} break;
		case 2: {
			ss << this->yo_kno;
		} break;
		case 3: {
			ss << this->yo_scode;
		} break;
		case 4: {
			ss << this->yo_syubetsu;
		} break;
		case 5: {
			ss << this->yo_hatcd;
		} break;
		case 6: {
			ss << this->yo_HAT020;
		} break;
		case 7: {
			ss << this->yo_keiyaku;
		} break;
		case 8: {
			ss << this->yo_tuika;
		} break;
		case 9: {
			ss << this->yo_koukei;
		} break;
		case 10: {
			ss << this->yo_yosan;
		} break;
		case 11: {
			ss << this->yo_genka;
		} break;
		case 12: {
			COdbcDateTime date(&this->yo_kdate);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->yo_kaisi);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->yo_owari);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->yo_tyakou);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->yo_kansei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->yo_kensa);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->yo_dairi;
		} break;
		case 19: {
			ss << this->yo_eigyou;
		} break;
		case 20: {
			ss << this->yo_HAT030;
		} break;
		case 21: {
			ss << this->yo_HAT040;
		} break;
		case 22: {
			ss << this->yo_HAT050;
		} break;
		case 23: {
			COdbcDateTime date(&this->yo_nyuudat);
			ss << date.to_string();
		} break;
		case 24: {
			ss << this->yo_sw;
		} break;
		case 25: {
			ss << this->yo_bikou1;
		} break;
		case 26: {
			ss << this->yo_bikou2;
		} break;
		case 27: {
			ss << this->yo_nyuno;
		} break;
		case 28: {
			COdbcDateTime date(&this->yo_sinsadat);
			ss << date.to_string();
		} break;
		case 29: {
			COdbcDateTime date(&this->yo_mitsumori);
			ss << date.to_string();
		} break;
		case 30: {
			ss << this->yo_type;
		} break;
		case 31: {
			ss << this->yo_sya011;
		} break;
		case 32: {
			ss << this->yo_sya012;
		} break;
		case 33: {
			COdbcDateTime date(&this->yo_koukoku);
			ss << date.to_string();
		} break;
		case 34: {
			ss << this->yo_ucode;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_koujiyobi2 : public COdbcTable {
public:
	CT_t_koujiyobi2() : COdbcTable() {
		m_TableName = "t_koujiyobi2";
		m_SqlSELECT = "SELECT "
					  "yo_kcode,"
					  "yo_kname,"
					  "yo_kno,"
					  "yo_scode,"
					  "yo_syubetsu,"
					  "yo_hatcd,"
					  "yo_HAT020,"
					  "yo_keiyaku,"
					  "yo_tuika,"
					  "yo_koukei,"
					  "yo_yosan,"
					  "yo_genka,"
					  "yo_kdate,"
					  "yo_kaisi,"
					  "yo_owari,"
					  "yo_tyakou,"
					  "yo_kansei,"
					  "yo_kensa,"
					  "yo_dairi,"
					  "yo_eigyou,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012,"
					  "yo_koukoku,"
					  "yo_ucode"
					  " FROM t_koujiyobi2";
		m_SqlINSERT = "INSERT INTO t_koujiyobi2 ("
					  "yo_kcode,"
					  "yo_kname,"
					  "yo_kno,"
					  "yo_scode,"
					  "yo_syubetsu,"
					  "yo_hatcd,"
					  "yo_HAT020,"
					  "yo_keiyaku,"
					  "yo_tuika,"
					  "yo_koukei,"
					  "yo_yosan,"
					  "yo_genka,"
					  "yo_kdate,"
					  "yo_kaisi,"
					  "yo_owari,"
					  "yo_tyakou,"
					  "yo_kansei,"
					  "yo_kensa,"
					  "yo_dairi,"
					  "yo_eigyou,"
					  "yo_HAT030,"
					  "yo_HAT040,"
					  "yo_HAT050,"
					  "yo_nyuudat,"
					  "yo_sw,"
					  "yo_bikou1,"
					  "yo_bikou2,"
					  "yo_nyuno,"
					  "yo_sinsadat,"
					  "yo_mitsumori,"
					  "yo_type,"
					  "yo_sya011,"
					  "yo_sya012,"
					  "yo_koukoku,"
					  "yo_ucode)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_koujiyobi2 SET "
					  "yo_kcode = ?,"
					  "yo_kname = ?,"
					  "yo_kno = ?,"
					  "yo_scode = ?,"
					  "yo_syubetsu = ?,"
					  "yo_hatcd = ?,"
					  "yo_HAT020 = ?,"
					  "yo_keiyaku = ?,"
					  "yo_tuika = ?,"
					  "yo_koukei = ?,"
					  "yo_yosan = ?,"
					  "yo_genka = ?,"
					  "yo_kdate = ?,"
					  "yo_kaisi = ?,"
					  "yo_owari = ?,"
					  "yo_tyakou = ?,"
					  "yo_kansei = ?,"
					  "yo_kensa = ?,"
					  "yo_dairi = ?,"
					  "yo_eigyou = ?,"
					  "yo_HAT030 = ?,"
					  "yo_HAT040 = ?,"
					  "yo_HAT050 = ?,"
					  "yo_nyuudat = ?,"
					  "yo_sw = ?,"
					  "yo_bikou1 = ?,"
					  "yo_bikou2 = ?,"
					  "yo_nyuno = ?,"
					  "yo_sinsadat = ?,"
					  "yo_mitsumori = ?,"
					  "yo_type = ?,"
					  "yo_sya011 = ?,"
					  "yo_sya012 = ?,"
					  "yo_koukoku = ?,"
					  "yo_ucode = ?";

		m_SqlDELETE = "DELETE t_koujiyobi2 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_kcode", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_kname", "2", "", "NO", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_kno", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_scode", "4", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_syubetsu", "5", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_HAT020", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_tuika", "9", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_koukei", "10", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_kdate", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_kaisi", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_owari", "15", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_tyakou", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_kansei", "17", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_kensa", "18", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_dairi", "19", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_eigyou", "20", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_HAT030", "21", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_HAT040", "22", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_HAT050", "23", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_nyuudat", "24", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_sw", "25", "", "NO", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_bikou1", "26", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_bikou2", "27", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_nyuno", "28", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_sinsadat", "29", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_mitsumori", "30", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_type", "31", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_sya011", "32", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_sya012", "33", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_koukoku", "34", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koujiyobi2", "yo_ucode", "35", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_koujiyobi2() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *yo_kname = new char[511];
		char *yo_kno = new char[511];
		char *yo_syubetsu = new char[101];
		char *yo_HAT020 = new char[511];
		char *yo_dairi = new char[MAXBUF];
		char *yo_eigyou = new char[MAXBUF];
		char *yo_HAT030 = new char[101];
		char *yo_HAT040 = new char[101];
		char *yo_HAT050 = new char[101];
		char *yo_bikou1 = new char[511];
		char *yo_bikou2 = new char[511];
		char *yo_nyuno = new char[101];
		char *yo_sya012 = new char[81];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_koujiyobi2 rec;
				com->GetData(1, SQL_C_LONG, &rec.yo_kcode, sizeof(rec.yo_kcode), 0);
				memset(yo_kname, 0, 511);
				com->GetData(2, SQL_C_CHAR, yo_kname, 511, 0);
				rec.yo_kname = (char *)yo_kname;
				memset(yo_kno, 0, 511);
				com->GetData(3, SQL_C_CHAR, yo_kno, 511, 0);
				rec.yo_kno = (char *)yo_kno;
				com->GetData(4, SQL_C_LONG, &rec.yo_scode, sizeof(rec.yo_scode), 0);
				memset(yo_syubetsu, 0, 101);
				com->GetData(5, SQL_C_CHAR, yo_syubetsu, 101, 0);
				rec.yo_syubetsu = (char *)yo_syubetsu;
				com->GetData(6, SQL_C_LONG, &rec.yo_hatcd, sizeof(rec.yo_hatcd), 0);
				memset(yo_HAT020, 0, 511);
				com->GetData(7, SQL_C_CHAR, yo_HAT020, 511, 0);
				rec.yo_HAT020 = (char *)yo_HAT020;
				com->GetData(8, SQL_C_DOUBLE, &rec.yo_keiyaku, sizeof(rec.yo_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.yo_tuika, sizeof(rec.yo_tuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.yo_koukei, sizeof(rec.yo_koukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.yo_yosan, sizeof(rec.yo_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.yo_genka, sizeof(rec.yo_genka), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.yo_kdate, sizeof(rec.yo_kdate), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.yo_kaisi, sizeof(rec.yo_kaisi), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.yo_owari, sizeof(rec.yo_owari), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.yo_tyakou, sizeof(rec.yo_tyakou), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.yo_kansei, sizeof(rec.yo_kansei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.yo_kensa, sizeof(rec.yo_kensa), 0);
				memset(yo_dairi, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, yo_dairi, 1048576, 0);
				rec.yo_dairi = (char *)yo_dairi;
				memset(yo_eigyou, 0, 1048576);
				com->GetData(20, SQL_C_CHAR, yo_eigyou, 1048576, 0);
				rec.yo_eigyou = (char *)yo_eigyou;
				memset(yo_HAT030, 0, 101);
				com->GetData(21, SQL_C_CHAR, yo_HAT030, 101, 0);
				rec.yo_HAT030 = (char *)yo_HAT030;
				memset(yo_HAT040, 0, 101);
				com->GetData(22, SQL_C_CHAR, yo_HAT040, 101, 0);
				rec.yo_HAT040 = (char *)yo_HAT040;
				memset(yo_HAT050, 0, 101);
				com->GetData(23, SQL_C_CHAR, yo_HAT050, 101, 0);
				rec.yo_HAT050 = (char *)yo_HAT050;
				com->GetData(24, SQL_C_TYPE_TIMESTAMP, &rec.yo_nyuudat, sizeof(rec.yo_nyuudat), 0);
				com->GetData(25, SQL_C_CHAR, &rec.yo_sw, sizeof(rec.yo_sw), 0);
				memset(yo_bikou1, 0, 511);
				com->GetData(26, SQL_C_CHAR, yo_bikou1, 511, 0);
				rec.yo_bikou1 = (char *)yo_bikou1;
				memset(yo_bikou2, 0, 511);
				com->GetData(27, SQL_C_CHAR, yo_bikou2, 511, 0);
				rec.yo_bikou2 = (char *)yo_bikou2;
				memset(yo_nyuno, 0, 101);
				com->GetData(28, SQL_C_CHAR, yo_nyuno, 101, 0);
				rec.yo_nyuno = (char *)yo_nyuno;
				com->GetData(29, SQL_C_TYPE_TIMESTAMP, &rec.yo_sinsadat, sizeof(rec.yo_sinsadat), 0);
				com->GetData(30, SQL_C_TYPE_TIMESTAMP, &rec.yo_mitsumori, sizeof(rec.yo_mitsumori), 0);
				com->GetData(31, SQL_C_LONG, &rec.yo_type, sizeof(rec.yo_type), 0);
				com->GetData(32, SQL_C_LONG, &rec.yo_sya011, sizeof(rec.yo_sya011), 0);
				memset(yo_sya012, 0, 81);
				com->GetData(33, SQL_C_CHAR, yo_sya012, 81, 0);
				rec.yo_sya012 = (char *)yo_sya012;
				com->GetData(34, SQL_C_TYPE_TIMESTAMP, &rec.yo_koukoku, sizeof(rec.yo_koukoku), 0);
				com->GetData(35, SQL_C_LONG, &rec.yo_ucode, sizeof(rec.yo_ucode), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] yo_kname;
		delete[] yo_kno;
		delete[] yo_syubetsu;
		delete[] yo_HAT020;
		delete[] yo_dairi;
		delete[] yo_eigyou;
		delete[] yo_HAT030;
		delete[] yo_HAT040;
		delete[] yo_HAT050;
		delete[] yo_bikou1;
		delete[] yo_bikou2;
		delete[] yo_nyuno;
		delete[] yo_sya012;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_koujiyobi2 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_koujiyobi2 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_koujiyobi2 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_koujiyobi2> m_Data;
};
class CR_t_kouki : public COdbcRecord {
public:
	CR_t_kouki() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kouki() {}

	void Initialize() {
		kok_id = 0;
		kok_key = 0;
		kok_suu = 0;
	}

public:
	SQLINTEGER kok_id;
	SQLINTEGER kok_key;
	TIMESTAMP_STRUCT kok_start;
	TIMESTAMP_STRUCT kok_end;
	SQLINTEGER kok_suu;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kok_id;
		} break;
		case 1: {
			ss << this->kok_key;
		} break;
		case 2: {
			COdbcDateTime date(&this->kok_start);
			ss << date.to_string();
		} break;
		case 3: {
			COdbcDateTime date(&this->kok_end);
			ss << date.to_string();
		} break;
		case 4: {
			ss << this->kok_suu;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kouki : public COdbcTable {
public:
	CT_t_kouki() : COdbcTable() {
		m_TableName = "t_kouki";
		m_SqlSELECT = "SELECT "
					  "kok_id,"
					  "kok_key,"
					  "kok_start,"
					  "kok_end,"
					  "kok_suu"
					  " FROM t_kouki";
		m_SqlINSERT = "INSERT INTO t_kouki ("
					  "kok_id,"
					  "kok_key,"
					  "kok_start,"
					  "kok_end,"
					  "kok_suu)"
					  " VALUES ( ?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_kouki SET "
					  "kok_id = ?,"
					  "kok_key = ?,"
					  "kok_start = ?,"
					  "kok_end = ?,"
					  "kok_suu = ?";

		m_SqlDELETE = "DELETE t_kouki ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kouki", "kok_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouki", "kok_key", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouki", "kok_start", "3", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouki", "kok_end", "4", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kouki", "kok_suu", "5", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_kouki() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kouki rec;
				com->GetData(1, SQL_C_LONG, &rec.kok_id, sizeof(rec.kok_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.kok_key, sizeof(rec.kok_key), 0);
				com->GetData(3, SQL_C_TYPE_TIMESTAMP, &rec.kok_start, sizeof(rec.kok_start), 0);
				com->GetData(4, SQL_C_TYPE_TIMESTAMP, &rec.kok_end, sizeof(rec.kok_end), 0);
				com->GetData(5, SQL_C_LONG, &rec.kok_suu, sizeof(rec.kok_suu), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kouki operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kouki &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kouki rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kouki> m_Data;
};
class CR_t_kousei : public COdbcRecord {
public:
	CR_t_kousei() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kousei() {}

	void Initialize() {
		Ksdid = 0;
		Ksd00 = 0;
		Ksd01 = "";
		Ksd02 = "";
		Ksd03 = "";
		Ksd04 = "";
		Ksd05 = "";
		Ksd06 = "";
		Ksd07 = "";
		Ksd08 = "";
		ksd09 = 0;
	}

public:
	SQLINTEGER Ksdid;
	SQLINTEGER Ksd00;
	std::string Ksd01;
	std::string Ksd02;
	std::string Ksd03;
	std::string Ksd04;
	std::string Ksd05;
	std::string Ksd06;
	std::string Ksd07;
	std::string Ksd08;
	SQLCHAR ksd09;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->Ksdid;
		} break;
		case 1: {
			ss << this->Ksd00;
		} break;
		case 2: {
			ss << this->Ksd01;
		} break;
		case 3: {
			ss << this->Ksd02;
		} break;
		case 4: {
			ss << this->Ksd03;
		} break;
		case 5: {
			ss << this->Ksd04;
		} break;
		case 6: {
			ss << this->Ksd05;
		} break;
		case 7: {
			ss << this->Ksd06;
		} break;
		case 8: {
			ss << this->Ksd07;
		} break;
		case 9: {
			ss << this->Ksd08;
		} break;
		case 10: {
			ss << this->ksd09;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kousei : public COdbcTable {
public:
	CT_t_kousei() : COdbcTable() {
		m_TableName = "t_kousei";
		m_SqlSELECT = "SELECT "
					  "Ksdid,"
					  "Ksd00,"
					  "Ksd01,"
					  "Ksd02,"
					  "Ksd03,"
					  "Ksd04,"
					  "Ksd05,"
					  "Ksd06,"
					  "Ksd07,"
					  "Ksd08,"
					  "ksd09"
					  " FROM t_kousei";
		m_SqlINSERT = "INSERT INTO t_kousei ("
					  "Ksdid,"
					  "Ksd00,"
					  "Ksd01,"
					  "Ksd02,"
					  "Ksd03,"
					  "Ksd04,"
					  "Ksd05,"
					  "Ksd06,"
					  "Ksd07,"
					  "Ksd08,"
					  "ksd09)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_kousei SET "
					  "Ksdid = ?,"
					  "Ksd00 = ?,"
					  "Ksd01 = ?,"
					  "Ksd02 = ?,"
					  "Ksd03 = ?,"
					  "Ksd04 = ?,"
					  "Ksd05 = ?,"
					  "Ksd06 = ?,"
					  "Ksd07 = ?,"
					  "Ksd08 = ?,"
					  "ksd09 = ?";

		m_SqlDELETE = "DELETE t_kousei ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksdid", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksd00", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksd01", "3", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksd02", "4", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksd03", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksd04", "6", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksd05", "7", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksd06", "8", "", "YES", "nvarchar", "30", "60", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksd07", "9", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "Ksd08", "10", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousei", "ksd09", "11", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_kousei() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *Ksd01 = new char[101];
		char *Ksd02 = new char[101];
		char *Ksd03 = new char[101];
		char *Ksd04 = new char[41];
		char *Ksd05 = new char[101];
		char *Ksd06 = new char[61];
		char *Ksd07 = new char[41];
		char *Ksd08 = new char[41];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kousei rec;
				com->GetData(1, SQL_C_LONG, &rec.Ksdid, sizeof(rec.Ksdid), 0);
				com->GetData(2, SQL_C_LONG, &rec.Ksd00, sizeof(rec.Ksd00), 0);
				memset(Ksd01, 0, 101);
				com->GetData(3, SQL_C_CHAR, Ksd01, 101, 0);
				rec.Ksd01 = (char *)Ksd01;
				memset(Ksd02, 0, 101);
				com->GetData(4, SQL_C_CHAR, Ksd02, 101, 0);
				rec.Ksd02 = (char *)Ksd02;
				memset(Ksd03, 0, 101);
				com->GetData(5, SQL_C_CHAR, Ksd03, 101, 0);
				rec.Ksd03 = (char *)Ksd03;
				memset(Ksd04, 0, 41);
				com->GetData(6, SQL_C_CHAR, Ksd04, 41, 0);
				rec.Ksd04 = (char *)Ksd04;
				memset(Ksd05, 0, 101);
				com->GetData(7, SQL_C_CHAR, Ksd05, 101, 0);
				rec.Ksd05 = (char *)Ksd05;
				memset(Ksd06, 0, 61);
				com->GetData(8, SQL_C_CHAR, Ksd06, 61, 0);
				rec.Ksd06 = (char *)Ksd06;
				memset(Ksd07, 0, 41);
				com->GetData(9, SQL_C_CHAR, Ksd07, 41, 0);
				rec.Ksd07 = (char *)Ksd07;
				memset(Ksd08, 0, 41);
				com->GetData(10, SQL_C_CHAR, Ksd08, 41, 0);
				rec.Ksd08 = (char *)Ksd08;
				com->GetData(11, SQL_C_CHAR, &rec.ksd09, sizeof(rec.ksd09), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] Ksd01;
		delete[] Ksd02;
		delete[] Ksd03;
		delete[] Ksd04;
		delete[] Ksd05;
		delete[] Ksd06;
		delete[] Ksd07;
		delete[] Ksd08;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kousei operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kousei &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kousei rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kousei> m_Data;
};
class CR_t_kousyu : public COdbcRecord {
public:
	CR_t_kousyu() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_kousyu() {}

	void Initialize() {
		syu010 = 0;
		syu020 = "";
	}

public:
	SQLINTEGER syu010;
	std::string syu020;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->syu010;
		} break;
		case 1: {
			ss << this->syu020;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_kousyu : public COdbcTable {
public:
	CT_t_kousyu() : COdbcTable() {
		m_TableName = "t_kousyu";
		m_SqlSELECT = "SELECT "
					  "syu010,"
					  "syu020"
					  " FROM t_kousyu";
		m_SqlINSERT = "INSERT INTO t_kousyu ("
					  "syu010,"
					  "syu020)"
					  " VALUES ( ?,?)";
		m_SqlUPDATE = "UPDATE t_kousyu SET "
					  "syu010 = ?,"
					  "syu020 = ?";

		m_SqlDELETE = "DELETE t_kousyu ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_kousyu", "syu010", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_kousyu", "syu020", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_kousyu() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *syu020 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_kousyu rec;
				com->GetData(1, SQL_C_LONG, &rec.syu010, sizeof(rec.syu010), 0);
				memset(syu020, 0, 101);
				com->GetData(2, SQL_C_CHAR, syu020, 101, 0);
				rec.syu020 = (char *)syu020;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] syu020;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_kousyu operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_kousyu &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_kousyu rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_kousyu> m_Data;
};
class CR_t_koutei : public COdbcRecord {
public:
	CR_t_koutei() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_koutei() {}

	void Initialize() {
		kou_id = 0;
		kou_kouji = 0;
		kou_gyo = 0;
		kou_kousyu = "";
		kou_name = "";
		kou_kikaku = "";
		kou_sur = 0.0;
		kou_tani = "";
		kou_suu = 0;
		kou_flg = 0;
		kou_level = 0;
	}

public:
	SQLINTEGER kou_id;
	SQLINTEGER kou_kouji;
	SQLINTEGER kou_gyo;
	std::string kou_kousyu;
	std::string kou_name;
	std::string kou_kikaku;
	SQLFLOAT kou_sur;
	std::string kou_tani;
	TIMESTAMP_STRUCT kou_start;
	TIMESTAMP_STRUCT kou_end;
	SQLINTEGER kou_suu;
	TIMESTAMP_STRUCT kou_start1;
	TIMESTAMP_STRUCT kou_end1;
	TIMESTAMP_STRUCT kou_start2;
	TIMESTAMP_STRUCT kou_end2;
	TIMESTAMP_STRUCT kou_start3;
	TIMESTAMP_STRUCT kou_end3;
	TIMESTAMP_STRUCT kou_start4;
	TIMESTAMP_STRUCT kou_end4;
	SQLCHAR kou_flg;
	SQLINTEGER kou_level;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kou_id;
		} break;
		case 1: {
			ss << this->kou_kouji;
		} break;
		case 2: {
			ss << this->kou_gyo;
		} break;
		case 3: {
			ss << this->kou_kousyu;
		} break;
		case 4: {
			ss << this->kou_name;
		} break;
		case 5: {
			ss << this->kou_kikaku;
		} break;
		case 6: {
			ss << this->kou_sur;
		} break;
		case 7: {
			ss << this->kou_tani;
		} break;
		case 8: {
			COdbcDateTime date(&this->kou_start);
			ss << date.to_string();
		} break;
		case 9: {
			COdbcDateTime date(&this->kou_end);
			ss << date.to_string();
		} break;
		case 10: {
			ss << this->kou_suu;
		} break;
		case 11: {
			COdbcDateTime date(&this->kou_start1);
			ss << date.to_string();
		} break;
		case 12: {
			COdbcDateTime date(&this->kou_end1);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->kou_start2);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->kou_end2);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->kou_start3);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->kou_end3);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->kou_start4);
			ss << date.to_string();
		} break;
		case 18: {
			COdbcDateTime date(&this->kou_end4);
			ss << date.to_string();
		} break;
		case 19: {
			ss << this->kou_flg;
		} break;
		case 20: {
			ss << this->kou_level;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_koutei : public COdbcTable {
public:
	CT_t_koutei() : COdbcTable() {
		m_TableName = "t_koutei";
		m_SqlSELECT = "SELECT "
					  "kou_id,"
					  "kou_kouji,"
					  "kou_gyo,"
					  "kou_kousyu,"
					  "kou_name,"
					  "kou_kikaku,"
					  "kou_sur,"
					  "kou_tani,"
					  "kou_start,"
					  "kou_end,"
					  "kou_suu,"
					  "kou_start1,"
					  "kou_end1,"
					  "kou_start2,"
					  "kou_end2,"
					  "kou_start3,"
					  "kou_end3,"
					  "kou_start4,"
					  "kou_end4,"
					  "kou_flg,"
					  "kou_level"
					  " FROM t_koutei";
		m_SqlINSERT = "INSERT INTO t_koutei ("
					  "kou_id,"
					  "kou_kouji,"
					  "kou_gyo,"
					  "kou_kousyu,"
					  "kou_name,"
					  "kou_kikaku,"
					  "kou_sur,"
					  "kou_tani,"
					  "kou_start,"
					  "kou_end,"
					  "kou_suu,"
					  "kou_start1,"
					  "kou_end1,"
					  "kou_start2,"
					  "kou_end2,"
					  "kou_start3,"
					  "kou_end3,"
					  "kou_start4,"
					  "kou_end4,"
					  "kou_flg,"
					  "kou_level)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_koutei SET "
					  "kou_id = ?,"
					  "kou_kouji = ?,"
					  "kou_gyo = ?,"
					  "kou_kousyu = ?,"
					  "kou_name = ?,"
					  "kou_kikaku = ?,"
					  "kou_sur = ?,"
					  "kou_tani = ?,"
					  "kou_start = ?,"
					  "kou_end = ?,"
					  "kou_suu = ?,"
					  "kou_start1 = ?,"
					  "kou_end1 = ?,"
					  "kou_start2 = ?,"
					  "kou_end2 = ?,"
					  "kou_start3 = ?,"
					  "kou_end3 = ?,"
					  "kou_start4 = ?,"
					  "kou_end4 = ?,"
					  "kou_flg = ?,"
					  "kou_level = ?";

		m_SqlDELETE = "DELETE t_koutei ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_kousyu", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_name", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_kikaku", "6", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_sur", "7", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_tani", "8", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_start", "9", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_end", "10", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_suu", "11", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_start1", "12", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_end1", "13", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_start2", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_end2", "15", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_start3", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_end3", "17", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_start4", "18", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_end4", "19", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_flg", "20", "", "NO", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_koutei", "kou_level", "21", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_koutei() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *kou_kousyu = new char[511];
		char *kou_name = new char[511];
		char *kou_kikaku = new char[511];
		char *kou_tani = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_koutei rec;
				com->GetData(1, SQL_C_LONG, &rec.kou_id, sizeof(rec.kou_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.kou_kouji, sizeof(rec.kou_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.kou_gyo, sizeof(rec.kou_gyo), 0);
				memset(kou_kousyu, 0, 511);
				com->GetData(4, SQL_C_CHAR, kou_kousyu, 511, 0);
				rec.kou_kousyu = (char *)kou_kousyu;
				memset(kou_name, 0, 511);
				com->GetData(5, SQL_C_CHAR, kou_name, 511, 0);
				rec.kou_name = (char *)kou_name;
				memset(kou_kikaku, 0, 511);
				com->GetData(6, SQL_C_CHAR, kou_kikaku, 511, 0);
				rec.kou_kikaku = (char *)kou_kikaku;
				com->GetData(7, SQL_C_DOUBLE, &rec.kou_sur, sizeof(rec.kou_sur), 0);
				memset(kou_tani, 0, 101);
				com->GetData(8, SQL_C_CHAR, kou_tani, 101, 0);
				rec.kou_tani = (char *)kou_tani;
				com->GetData(9, SQL_C_TYPE_TIMESTAMP, &rec.kou_start, sizeof(rec.kou_start), 0);
				com->GetData(10, SQL_C_TYPE_TIMESTAMP, &rec.kou_end, sizeof(rec.kou_end), 0);
				com->GetData(11, SQL_C_LONG, &rec.kou_suu, sizeof(rec.kou_suu), 0);
				com->GetData(12, SQL_C_TYPE_TIMESTAMP, &rec.kou_start1, sizeof(rec.kou_start1), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.kou_end1, sizeof(rec.kou_end1), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.kou_start2, sizeof(rec.kou_start2), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.kou_end2, sizeof(rec.kou_end2), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.kou_start3, sizeof(rec.kou_start3), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.kou_end3, sizeof(rec.kou_end3), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.kou_start4, sizeof(rec.kou_start4), 0);
				com->GetData(19, SQL_C_TYPE_TIMESTAMP, &rec.kou_end4, sizeof(rec.kou_end4), 0);
				com->GetData(20, SQL_C_CHAR, &rec.kou_flg, sizeof(rec.kou_flg), 0);
				com->GetData(21, SQL_C_LONG, &rec.kou_level, sizeof(rec.kou_level), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] kou_kousyu;
		delete[] kou_name;
		delete[] kou_kikaku;
		delete[] kou_tani;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_koutei operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_koutei &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_koutei rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_koutei> m_Data;
};
class CR_t_mebius : public COdbcRecord {
public:
	CR_t_mebius() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_mebius() {}

	void Initialize() {
		Meb_Id = 0;
		Meb_kouji = 0;
		Meb003 = 0;
		Meb004 = 0;
		Meb005 = 0;
		Meb006 = "";
		Meb007 = "";
		Meb008 = "";
		Meb009 = "";
		Meb010 = "";
		Meb011 = "";
		Meb012 = "";
		Meb013 = "";
		memset(&Meb014, 0, sizeof(Meb014));
		memset(&Meb015, 0, sizeof(Meb015));
		memset(&Meb016, 0, sizeof(Meb016));
		Meb017 = "";
		Meb018 = 0;
		Meb019 = "";
		Meb020 = 0;
		memset(&Meb021, 0, sizeof(Meb021));
		memset(&Meb022, 0, sizeof(Meb022));
		Meb023 = "";
		Meb024 = "";
		Meb025 = 0;
		Meb026 = "";
		memset(&Meb027, 0, sizeof(Meb027));
		memset(&Meb028, 0, sizeof(Meb028));
		Meb029 = "";
		Meb030 = "";
		Meb031 = "";
		Meb032 = "";
		Meb033 = "";
		Meb034 = "";
		Meb035 = "";
		memset(&Meb036, 0, sizeof(Meb036));
		memset(&Meb037, 0, sizeof(Meb037));
		memset(&Meb038, 0, sizeof(Meb038));
		memset(&Meb039, 0, sizeof(Meb039));
		memset(&Meb040, 0, sizeof(Meb040));
		memset(&Meb041, 0, sizeof(Meb041));
		memset(&Meb042, 0, sizeof(Meb042));
		memset(&Meb043, 0, sizeof(Meb043));
		memset(&Meb044, 0, sizeof(Meb044));
		memset(&Meb045, 0, sizeof(Meb045));
		Meb046 = "";
		Meb047 = "";
		Meb048 = "";
	}

public:
	SQLINTEGER Meb_Id;
	SQLINTEGER Meb_kouji;
	SQLINTEGER Meb003;
	SQLINTEGER Meb004;
	SQLINTEGER Meb005;
	std::string Meb006;
	std::string Meb007;
	std::string Meb008;
	std::string Meb009;
	std::string Meb010;
	std::string Meb011;
	std::string Meb012;
	std::string Meb013;
	SQL_NUMERIC_STRUCT Meb014;
	SQL_NUMERIC_STRUCT Meb015;
	SQL_NUMERIC_STRUCT Meb016;
	std::string Meb017;
	SQLINTEGER Meb018;
	std::string Meb019;
	SQLINTEGER Meb020;
	SQL_NUMERIC_STRUCT Meb021;
	SQL_NUMERIC_STRUCT Meb022;
	std::string Meb023;
	std::string Meb024;
	SQLINTEGER Meb025;
	std::string Meb026;
	SQL_NUMERIC_STRUCT Meb027;
	SQL_NUMERIC_STRUCT Meb028;
	std::string Meb029;
	std::string Meb030;
	std::string Meb031;
	std::string Meb032;
	std::string Meb033;
	std::string Meb034;
	std::string Meb035;
	SQL_NUMERIC_STRUCT Meb036;
	SQL_NUMERIC_STRUCT Meb037;
	SQL_NUMERIC_STRUCT Meb038;
	SQL_NUMERIC_STRUCT Meb039;
	SQL_NUMERIC_STRUCT Meb040;
	SQL_NUMERIC_STRUCT Meb041;
	SQL_NUMERIC_STRUCT Meb042;
	SQL_NUMERIC_STRUCT Meb043;
	SQL_NUMERIC_STRUCT Meb044;
	SQL_NUMERIC_STRUCT Meb045;
	std::string Meb046;
	std::string Meb047;
	std::string Meb048;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->Meb_Id;
		} break;
		case 1: {
			ss << this->Meb_kouji;
		} break;
		case 2: {
			ss << this->Meb003;
		} break;
		case 3: {
			ss << this->Meb004;
		} break;
		case 4: {
			ss << this->Meb005;
		} break;
		case 5: {
			ss << this->Meb006;
		} break;
		case 6: {
			ss << this->Meb007;
		} break;
		case 7: {
			ss << this->Meb008;
		} break;
		case 8: {
			ss << this->Meb009;
		} break;
		case 9: {
			ss << this->Meb010;
		} break;
		case 10: {
			ss << this->Meb011;
		} break;
		case 11: {
			ss << this->Meb012;
		} break;
		case 12: {
			ss << this->Meb013;
		} break;
		case 13: {
			ss << COdbcColumn::NumericToString(&this->Meb014);
		} break;
		case 14: {
			ss << COdbcColumn::NumericToString(&this->Meb015);
		} break;
		case 15: {
			ss << COdbcColumn::NumericToString(&this->Meb016);
		} break;
		case 16: {
			ss << this->Meb017;
		} break;
		case 17: {
			ss << this->Meb018;
		} break;
		case 18: {
			ss << this->Meb019;
		} break;
		case 19: {
			ss << this->Meb020;
		} break;
		case 20: {
			ss << COdbcColumn::NumericToString(&this->Meb021);
		} break;
		case 21: {
			ss << COdbcColumn::NumericToString(&this->Meb022);
		} break;
		case 22: {
			ss << this->Meb023;
		} break;
		case 23: {
			ss << this->Meb024;
		} break;
		case 24: {
			ss << this->Meb025;
		} break;
		case 25: {
			ss << this->Meb026;
		} break;
		case 26: {
			ss << COdbcColumn::NumericToString(&this->Meb027);
		} break;
		case 27: {
			ss << COdbcColumn::NumericToString(&this->Meb028);
		} break;
		case 28: {
			ss << this->Meb029;
		} break;
		case 29: {
			ss << this->Meb030;
		} break;
		case 30: {
			ss << this->Meb031;
		} break;
		case 31: {
			ss << this->Meb032;
		} break;
		case 32: {
			ss << this->Meb033;
		} break;
		case 33: {
			ss << this->Meb034;
		} break;
		case 34: {
			ss << this->Meb035;
		} break;
		case 35: {
			ss << COdbcColumn::NumericToString(&this->Meb036);
		} break;
		case 36: {
			ss << COdbcColumn::NumericToString(&this->Meb037);
		} break;
		case 37: {
			ss << COdbcColumn::NumericToString(&this->Meb038);
		} break;
		case 38: {
			ss << COdbcColumn::NumericToString(&this->Meb039);
		} break;
		case 39: {
			ss << COdbcColumn::NumericToString(&this->Meb040);
		} break;
		case 40: {
			ss << COdbcColumn::NumericToString(&this->Meb041);
		} break;
		case 41: {
			ss << COdbcColumn::NumericToString(&this->Meb042);
		} break;
		case 42: {
			ss << COdbcColumn::NumericToString(&this->Meb043);
		} break;
		case 43: {
			ss << COdbcColumn::NumericToString(&this->Meb044);
		} break;
		case 44: {
			ss << COdbcColumn::NumericToString(&this->Meb045);
		} break;
		case 45: {
			ss << this->Meb046;
		} break;
		case 46: {
			ss << this->Meb047;
		} break;
		case 47: {
			ss << this->Meb048;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_mebius : public COdbcTable {
public:
	CT_t_mebius() : COdbcTable() {
		m_TableName = "t_mebius";
		m_SqlSELECT = "SELECT "
					  "Meb_Id,"
					  "Meb_kouji,"
					  "Meb003,"
					  "Meb004,"
					  "Meb005,"
					  "Meb006,"
					  "Meb007,"
					  "Meb008,"
					  "Meb009,"
					  "Meb010,"
					  "Meb011,"
					  "Meb012,"
					  "Meb013,"
					  "Meb014,"
					  "Meb015,"
					  "Meb016,"
					  "Meb017,"
					  "Meb018,"
					  "Meb019,"
					  "Meb020,"
					  "Meb021,"
					  "Meb022,"
					  "Meb023,"
					  "Meb024,"
					  "Meb025,"
					  "Meb026,"
					  "Meb027,"
					  "Meb028,"
					  "Meb029,"
					  "Meb030,"
					  "Meb031,"
					  "Meb032,"
					  "Meb033,"
					  "Meb034,"
					  "Meb035,"
					  "Meb036,"
					  "Meb037,"
					  "Meb038,"
					  "Meb039,"
					  "Meb040,"
					  "Meb041,"
					  "Meb042,"
					  "Meb043,"
					  "Meb044,"
					  "Meb045,"
					  "Meb046,"
					  "Meb047,"
					  "Meb048"
					  " FROM t_mebius";
		m_SqlINSERT =
			"INSERT INTO t_mebius ("
			"Meb_Id,"
			"Meb_kouji,"
			"Meb003,"
			"Meb004,"
			"Meb005,"
			"Meb006,"
			"Meb007,"
			"Meb008,"
			"Meb009,"
			"Meb010,"
			"Meb011,"
			"Meb012,"
			"Meb013,"
			"Meb014,"
			"Meb015,"
			"Meb016,"
			"Meb017,"
			"Meb018,"
			"Meb019,"
			"Meb020,"
			"Meb021,"
			"Meb022,"
			"Meb023,"
			"Meb024,"
			"Meb025,"
			"Meb026,"
			"Meb027,"
			"Meb028,"
			"Meb029,"
			"Meb030,"
			"Meb031,"
			"Meb032,"
			"Meb033,"
			"Meb034,"
			"Meb035,"
			"Meb036,"
			"Meb037,"
			"Meb038,"
			"Meb039,"
			"Meb040,"
			"Meb041,"
			"Meb042,"
			"Meb043,"
			"Meb044,"
			"Meb045,"
			"Meb046,"
			"Meb047,"
			"Meb048)"
			" VALUES ( "
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_mebius SET "
					  "Meb_Id = ?,"
					  "Meb_kouji = ?,"
					  "Meb003 = ?,"
					  "Meb004 = ?,"
					  "Meb005 = ?,"
					  "Meb006 = ?,"
					  "Meb007 = ?,"
					  "Meb008 = ?,"
					  "Meb009 = ?,"
					  "Meb010 = ?,"
					  "Meb011 = ?,"
					  "Meb012 = ?,"
					  "Meb013 = ?,"
					  "Meb014 = ?,"
					  "Meb015 = ?,"
					  "Meb016 = ?,"
					  "Meb017 = ?,"
					  "Meb018 = ?,"
					  "Meb019 = ?,"
					  "Meb020 = ?,"
					  "Meb021 = ?,"
					  "Meb022 = ?,"
					  "Meb023 = ?,"
					  "Meb024 = ?,"
					  "Meb025 = ?,"
					  "Meb026 = ?,"
					  "Meb027 = ?,"
					  "Meb028 = ?,"
					  "Meb029 = ?,"
					  "Meb030 = ?,"
					  "Meb031 = ?,"
					  "Meb032 = ?,"
					  "Meb033 = ?,"
					  "Meb034 = ?,"
					  "Meb035 = ?,"
					  "Meb036 = ?,"
					  "Meb037 = ?,"
					  "Meb038 = ?,"
					  "Meb039 = ?,"
					  "Meb040 = ?,"
					  "Meb041 = ?,"
					  "Meb042 = ?,"
					  "Meb043 = ?,"
					  "Meb044 = ?,"
					  "Meb045 = ?,"
					  "Meb046 = ?,"
					  "Meb047 = ?,"
					  "Meb048 = ?";

		m_SqlDELETE = "DELETE t_mebius ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb_Id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb003", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb004", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb005", "5", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb006", "6", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb007", "7", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb008", "8", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb009", "9", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb010", "10", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb011", "11", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb012", "12", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb013", "13", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb014", "14", "", "NO", "decimal", "0", "0", "18", "4", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb015", "15", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb016", "16", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb017", "17", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb018", "18", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb019", "19", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb020", "20", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb021", "21", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb022", "22", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb023", "23", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb024", "24", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb025", "25", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb026", "26", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb027", "27", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb028", "28", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb029", "29", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb030", "30", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb031", "31", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb032", "32", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb033", "33", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb034", "34", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb035", "35", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb036", "36", "", "NO", "decimal", "0", "0", "18", "4", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb037", "37", "", "NO", "decimal", "0", "0", "18", "4", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb038", "38", "", "NO", "decimal", "0", "0", "18", "4", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb039", "39", "", "NO", "decimal", "0", "0", "18", "4", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb040", "40", "", "NO", "decimal", "0", "0", "18", "4", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb041", "41", "", "NO", "decimal", "0", "0", "18", "4", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb042", "42", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb043", "43", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb044", "44", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb045", "45", "", "NO", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb046", "46", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb047", "47", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mebius", "Meb048", "48", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_mebius() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *Meb006 = new char[256];
		char *Meb007 = new char[256];
		char *Meb008 = new char[256];
		char *Meb009 = new char[256];
		char *Meb010 = new char[256];
		char *Meb011 = new char[256];
		char *Meb012 = new char[256];
		char *Meb013 = new char[256];
		char *Meb017 = new char[256];
		char *Meb019 = new char[256];
		char *Meb023 = new char[256];
		char *Meb024 = new char[256];
		char *Meb026 = new char[256];
		char *Meb029 = new char[256];
		char *Meb030 = new char[256];
		char *Meb031 = new char[256];
		char *Meb032 = new char[256];
		char *Meb033 = new char[256];
		char *Meb034 = new char[256];
		char *Meb035 = new char[256];
		char *Meb046 = new char[256];
		char *Meb047 = new char[256];
		char *Meb048 = new char[256];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_mebius rec;
				com->GetData(1, SQL_C_LONG, &rec.Meb_Id, sizeof(rec.Meb_Id), 0);
				com->GetData(2, SQL_C_LONG, &rec.Meb_kouji, sizeof(rec.Meb_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.Meb003, sizeof(rec.Meb003), 0);
				com->GetData(4, SQL_C_LONG, &rec.Meb004, sizeof(rec.Meb004), 0);
				com->GetData(5, SQL_C_LONG, &rec.Meb005, sizeof(rec.Meb005), 0);
				memset(Meb006, 0, 256);
				com->GetData(6, SQL_C_CHAR, Meb006, 256, 0);
				rec.Meb006 = (char *)Meb006;
				memset(Meb007, 0, 256);
				com->GetData(7, SQL_C_CHAR, Meb007, 256, 0);
				rec.Meb007 = (char *)Meb007;
				memset(Meb008, 0, 256);
				com->GetData(8, SQL_C_CHAR, Meb008, 256, 0);
				rec.Meb008 = (char *)Meb008;
				memset(Meb009, 0, 256);
				com->GetData(9, SQL_C_CHAR, Meb009, 256, 0);
				rec.Meb009 = (char *)Meb009;
				memset(Meb010, 0, 256);
				com->GetData(10, SQL_C_CHAR, Meb010, 256, 0);
				rec.Meb010 = (char *)Meb010;
				memset(Meb011, 0, 256);
				com->GetData(11, SQL_C_CHAR, Meb011, 256, 0);
				rec.Meb011 = (char *)Meb011;
				memset(Meb012, 0, 256);
				com->GetData(12, SQL_C_CHAR, Meb012, 256, 0);
				rec.Meb012 = (char *)Meb012;
				memset(Meb013, 0, 256);
				com->GetData(13, SQL_C_CHAR, Meb013, 256, 0);
				rec.Meb013 = (char *)Meb013;
				com->GetData(14, SQL_C_NUMERIC, &rec.Meb014, sizeof(rec.Meb014), 0);
				com->GetData(15, SQL_C_NUMERIC, &rec.Meb015, sizeof(rec.Meb015), 0);
				com->GetData(16, SQL_C_NUMERIC, &rec.Meb016, sizeof(rec.Meb016), 0);
				memset(Meb017, 0, 256);
				com->GetData(17, SQL_C_CHAR, Meb017, 256, 0);
				rec.Meb017 = (char *)Meb017;
				com->GetData(18, SQL_C_LONG, &rec.Meb018, sizeof(rec.Meb018), 0);
				memset(Meb019, 0, 256);
				com->GetData(19, SQL_C_CHAR, Meb019, 256, 0);
				rec.Meb019 = (char *)Meb019;
				com->GetData(20, SQL_C_LONG, &rec.Meb020, sizeof(rec.Meb020), 0);
				com->GetData(21, SQL_C_NUMERIC, &rec.Meb021, sizeof(rec.Meb021), 0);
				com->GetData(22, SQL_C_NUMERIC, &rec.Meb022, sizeof(rec.Meb022), 0);
				memset(Meb023, 0, 256);
				com->GetData(23, SQL_C_CHAR, Meb023, 256, 0);
				rec.Meb023 = (char *)Meb023;
				memset(Meb024, 0, 256);
				com->GetData(24, SQL_C_CHAR, Meb024, 256, 0);
				rec.Meb024 = (char *)Meb024;
				com->GetData(25, SQL_C_LONG, &rec.Meb025, sizeof(rec.Meb025), 0);
				memset(Meb026, 0, 256);
				com->GetData(26, SQL_C_CHAR, Meb026, 256, 0);
				rec.Meb026 = (char *)Meb026;
				com->GetData(27, SQL_C_NUMERIC, &rec.Meb027, sizeof(rec.Meb027), 0);
				com->GetData(28, SQL_C_NUMERIC, &rec.Meb028, sizeof(rec.Meb028), 0);
				memset(Meb029, 0, 256);
				com->GetData(29, SQL_C_CHAR, Meb029, 256, 0);
				rec.Meb029 = (char *)Meb029;
				memset(Meb030, 0, 256);
				com->GetData(30, SQL_C_CHAR, Meb030, 256, 0);
				rec.Meb030 = (char *)Meb030;
				memset(Meb031, 0, 256);
				com->GetData(31, SQL_C_CHAR, Meb031, 256, 0);
				rec.Meb031 = (char *)Meb031;
				memset(Meb032, 0, 256);
				com->GetData(32, SQL_C_CHAR, Meb032, 256, 0);
				rec.Meb032 = (char *)Meb032;
				memset(Meb033, 0, 256);
				com->GetData(33, SQL_C_CHAR, Meb033, 256, 0);
				rec.Meb033 = (char *)Meb033;
				memset(Meb034, 0, 256);
				com->GetData(34, SQL_C_CHAR, Meb034, 256, 0);
				rec.Meb034 = (char *)Meb034;
				memset(Meb035, 0, 256);
				com->GetData(35, SQL_C_CHAR, Meb035, 256, 0);
				rec.Meb035 = (char *)Meb035;
				com->GetData(36, SQL_C_NUMERIC, &rec.Meb036, sizeof(rec.Meb036), 0);
				com->GetData(37, SQL_C_NUMERIC, &rec.Meb037, sizeof(rec.Meb037), 0);
				com->GetData(38, SQL_C_NUMERIC, &rec.Meb038, sizeof(rec.Meb038), 0);
				com->GetData(39, SQL_C_NUMERIC, &rec.Meb039, sizeof(rec.Meb039), 0);
				com->GetData(40, SQL_C_NUMERIC, &rec.Meb040, sizeof(rec.Meb040), 0);
				com->GetData(41, SQL_C_NUMERIC, &rec.Meb041, sizeof(rec.Meb041), 0);
				com->GetData(42, SQL_C_NUMERIC, &rec.Meb042, sizeof(rec.Meb042), 0);
				com->GetData(43, SQL_C_NUMERIC, &rec.Meb043, sizeof(rec.Meb043), 0);
				com->GetData(44, SQL_C_NUMERIC, &rec.Meb044, sizeof(rec.Meb044), 0);
				com->GetData(45, SQL_C_NUMERIC, &rec.Meb045, sizeof(rec.Meb045), 0);
				memset(Meb046, 0, 256);
				com->GetData(46, SQL_C_CHAR, Meb046, 256, 0);
				rec.Meb046 = (char *)Meb046;
				memset(Meb047, 0, 256);
				com->GetData(47, SQL_C_CHAR, Meb047, 256, 0);
				rec.Meb047 = (char *)Meb047;
				memset(Meb048, 0, 256);
				com->GetData(48, SQL_C_CHAR, Meb048, 256, 0);
				rec.Meb048 = (char *)Meb048;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] Meb006;
		delete[] Meb007;
		delete[] Meb008;
		delete[] Meb009;
		delete[] Meb010;
		delete[] Meb011;
		delete[] Meb012;
		delete[] Meb013;
		delete[] Meb017;
		delete[] Meb019;
		delete[] Meb023;
		delete[] Meb024;
		delete[] Meb026;
		delete[] Meb029;
		delete[] Meb030;
		delete[] Meb031;
		delete[] Meb032;
		delete[] Meb033;
		delete[] Meb034;
		delete[] Meb035;
		delete[] Meb046;
		delete[] Meb047;
		delete[] Meb048;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_mebius operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_mebius &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_mebius rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_mebius> m_Data;
};
class CR_t_mei : public COdbcRecord {
public:
	CR_t_mei() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_mei() {}

	void Initialize() {
		mes_id = 0;
		mes_kouji = 0;
		mes_gyo = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		mes_syukei = 0;
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	SQLINTEGER mes_gyo;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQLINTEGER mes_syukei;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_id;
		} break;
		case 1: {
			ss << this->mes_kouji;
		} break;
		case 2: {
			ss << this->mes_gyo;
		} break;
		case 3: {
			ss << this->mes_name;
		} break;
		case 4: {
			ss << this->mes_kikaku;
		} break;
		case 5: {
			ss << this->mes_suu;
		} break;
		case 6: {
			ss << this->mes_tani;
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 8: {
			ss << this->mes_syukei;
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 10: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_mei : public COdbcTable {
public:
	CT_t_mei() : COdbcTable() {
		m_TableName = "t_mei";
		m_SqlSELECT = "SELECT "
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM t_mei";
		m_SqlINSERT = "INSERT INTO t_mei ("
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_mei SET "
					  "mes_id = ?,"
					  "mes_kouji = ?,"
					  "mes_gyo = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_syukei = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE t_mei ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_mei", "mes_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_name", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_kikaku", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_suu", "6", "", "YES", "float", "0", "0", "53", "0", "0", "", "", 0,
					 _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_tani", "7", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_tanka", "8", "", "YES", "money", "0", "0", "19", "4", "0", "", "",
					 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_syukei", "9", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_kingaku", "10", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mei", "mes_tekiyou", "11", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_mei() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_mei rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				memset(mes_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(5, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(6, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(7, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(8, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(9, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_mei operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_mei &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_mei rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_mei> m_Data;
};
class CR_t_meisa_bak020826 : public COdbcRecord {
public:
	CR_t_meisa_bak020826() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_meisa_bak020826() {}

	void Initialize() {
		mes_id = 0;
		mes_kouji = 0;
		mes_gyo = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		mes_syukei = 0;
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	SQLINTEGER mes_gyo;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQLINTEGER mes_syukei;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_id;
		} break;
		case 1: {
			ss << this->mes_kouji;
		} break;
		case 2: {
			ss << this->mes_gyo;
		} break;
		case 3: {
			ss << this->mes_name;
		} break;
		case 4: {
			ss << this->mes_kikaku;
		} break;
		case 5: {
			ss << this->mes_suu;
		} break;
		case 6: {
			ss << this->mes_tani;
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 8: {
			ss << this->mes_syukei;
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 10: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_meisa_bak020826 : public COdbcTable {
public:
	CT_t_meisa_bak020826() : COdbcTable() {
		m_TableName = "t_meisa_bak020826";
		m_SqlSELECT = "SELECT "
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM t_meisa_bak020826";
		m_SqlINSERT = "INSERT INTO t_meisa_bak020826 ("
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_meisa_bak020826 SET "
					  "mes_id = ?,"
					  "mes_kouji = ?,"
					  "mes_gyo = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_syukei = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE t_meisa_bak020826 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_name", "4", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_kikaku", "5", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_suu", "6", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_tani", "7", "", "YES", "nvarchar", "50", "100", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_tanka", "8", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_syukei", "9", "", "YES", "int", "0", "0", "10", "0",
					 "0", "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_kingaku", "10", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisa_bak020826", "mes_tekiyou", "11", "", "YES", "nvarchar", "255", "510",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_meisa_bak020826() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_meisa_bak020826 rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				memset(mes_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(5, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(6, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(7, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(8, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(9, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_meisa_bak020826 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_meisa_bak020826 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_meisa_bak020826 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_meisa_bak020826> m_Data;
};
class CR_t_meisai_bak : public COdbcRecord {
public:
	CR_t_meisai_bak() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_meisai_bak() {}

	void Initialize() {
		mes_id = 0;
		mes_kouji = 0;
		mes_gyo = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		mes_syukei = 0;
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	SQLINTEGER mes_gyo;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQLINTEGER mes_syukei;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_id;
		} break;
		case 1: {
			ss << this->mes_kouji;
		} break;
		case 2: {
			ss << this->mes_gyo;
		} break;
		case 3: {
			ss << this->mes_name;
		} break;
		case 4: {
			ss << this->mes_kikaku;
		} break;
		case 5: {
			ss << this->mes_suu;
		} break;
		case 6: {
			ss << this->mes_tani;
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 8: {
			ss << this->mes_syukei;
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 10: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_meisai_bak : public COdbcTable {
public:
	CT_t_meisai_bak() : COdbcTable() {
		m_TableName = "t_meisai_bak";
		m_SqlSELECT = "SELECT "
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM t_meisai_bak";
		m_SqlINSERT = "INSERT INTO t_meisai_bak ("
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_meisai_bak SET "
					  "mes_id = ?,"
					  "mes_kouji = ?,"
					  "mes_gyo = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_syukei = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE t_meisai_bak ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_name", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_kikaku", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_suu", "6", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_tani", "7", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_tanka", "8", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_syukei", "9", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_kingaku", "10", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai_bak", "mes_tekiyou", "11", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_meisai_bak() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_meisai_bak rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				memset(mes_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(5, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(6, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(7, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(8, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(9, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_meisai_bak operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_meisai_bak &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_meisai_bak rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_meisai_bak> m_Data;
};
class CR_t_meisai23 : public COdbcRecord {
public:
	CR_t_meisai23() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_meisai23() {}

	void Initialize() {
		mes_id = 0;
		mes_kouji = 0;
		mes_gyo = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		mes_syukei = 0;
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	SQLINTEGER mes_gyo;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQLINTEGER mes_syukei;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_id;
		} break;
		case 1: {
			ss << this->mes_kouji;
		} break;
		case 2: {
			ss << this->mes_gyo;
		} break;
		case 3: {
			ss << this->mes_name;
		} break;
		case 4: {
			ss << this->mes_kikaku;
		} break;
		case 5: {
			ss << this->mes_suu;
		} break;
		case 6: {
			ss << this->mes_tani;
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 8: {
			ss << this->mes_syukei;
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 10: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_meisai23 : public COdbcTable {
public:
	CT_t_meisai23() : COdbcTable() {
		m_TableName = "t_meisai23";
		m_SqlSELECT = "SELECT "
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM t_meisai23";
		m_SqlINSERT = "INSERT INTO t_meisai23 ("
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_meisai23 SET "
					  "mes_id = ?,"
					  "mes_kouji = ?,"
					  "mes_gyo = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_syukei = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE t_meisai23 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_name", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_kikaku", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_suu", "6", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_tani", "7", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_tanka", "8", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_syukei", "9", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_kingaku", "10", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai23", "mes_tekiyou", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_meisai23() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_meisai23 rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				memset(mes_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(5, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(6, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(7, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(8, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(9, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_meisai23 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_meisai23 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_meisai23 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_meisai23> m_Data;
};
class CR_t_mhyousisettei : public COdbcRecord {
public:
	CR_t_mhyousisettei() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_mhyousisettei() {}

	void Initialize() {
		mit_no = 0;
		mit_ait = 0;
		mit_dat = 0;
		mit_gak = 0;
		mit_koj = 0;
		mit_adr = 0;
		mit_str = 0;
		mit_end = 0;
		mit_com = 0;
		mit_ath = 0;
		mit_tek = 0;
		mit_HAT010 = 0;
		mit_HAT020 = 0;
		mit_HAT030 = 0;
		mit_HAT040 = 0;
		mit_HAT050 = 0;
	}

public:
	SQLINTEGER mit_no;
	SQLCHAR mit_ait;
	SQLCHAR mit_dat;
	SQLCHAR mit_gak;
	SQLCHAR mit_koj;
	SQLCHAR mit_adr;
	SQLCHAR mit_str;
	SQLCHAR mit_end;
	SQLCHAR mit_com;
	SQLCHAR mit_ath;
	SQLCHAR mit_tek;
	SQLCHAR mit_HAT010;
	SQLCHAR mit_HAT020;
	SQLCHAR mit_HAT030;
	SQLCHAR mit_HAT040;
	SQLCHAR mit_HAT050;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mit_no;
		} break;
		case 1: {
			ss << this->mit_ait;
		} break;
		case 2: {
			ss << this->mit_dat;
		} break;
		case 3: {
			ss << this->mit_gak;
		} break;
		case 4: {
			ss << this->mit_koj;
		} break;
		case 5: {
			ss << this->mit_adr;
		} break;
		case 6: {
			ss << this->mit_str;
		} break;
		case 7: {
			ss << this->mit_end;
		} break;
		case 8: {
			ss << this->mit_com;
		} break;
		case 9: {
			ss << this->mit_ath;
		} break;
		case 10: {
			ss << this->mit_tek;
		} break;
		case 11: {
			ss << this->mit_HAT010;
		} break;
		case 12: {
			ss << this->mit_HAT020;
		} break;
		case 13: {
			ss << this->mit_HAT030;
		} break;
		case 14: {
			ss << this->mit_HAT040;
		} break;
		case 15: {
			ss << this->mit_HAT050;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_mhyousisettei : public COdbcTable {
public:
	CT_t_mhyousisettei() : COdbcTable() {
		m_TableName = "t_mhyousisettei";
		m_SqlSELECT = "SELECT "
					  "mit_no,"
					  "mit_ait,"
					  "mit_dat,"
					  "mit_gak,"
					  "mit_koj,"
					  "mit_adr,"
					  "mit_str,"
					  "mit_end,"
					  "mit_com,"
					  "mit_ath,"
					  "mit_tek,"
					  "mit_HAT010,"
					  "mit_HAT020,"
					  "mit_HAT030,"
					  "mit_HAT040,"
					  "mit_HAT050"
					  " FROM t_mhyousisettei";
		m_SqlINSERT = "INSERT INTO t_mhyousisettei ("
					  "mit_no,"
					  "mit_ait,"
					  "mit_dat,"
					  "mit_gak,"
					  "mit_koj,"
					  "mit_adr,"
					  "mit_str,"
					  "mit_end,"
					  "mit_com,"
					  "mit_ath,"
					  "mit_tek,"
					  "mit_HAT010,"
					  "mit_HAT020,"
					  "mit_HAT030,"
					  "mit_HAT040,"
					  "mit_HAT050)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_mhyousisettei SET "
					  "mit_no = ?,"
					  "mit_ait = ?,"
					  "mit_dat = ?,"
					  "mit_gak = ?,"
					  "mit_koj = ?,"
					  "mit_adr = ?,"
					  "mit_str = ?,"
					  "mit_end = ?,"
					  "mit_com = ?,"
					  "mit_ath = ?,"
					  "mit_tek = ?,"
					  "mit_HAT010 = ?,"
					  "mit_HAT020 = ?,"
					  "mit_HAT030 = ?,"
					  "mit_HAT040 = ?,"
					  "mit_HAT050 = ?";

		m_SqlDELETE = "DELETE t_mhyousisettei ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_no", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_ait", "2", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_dat", "3", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_gak", "4", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_koj", "5", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_adr", "6", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_str", "7", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_end", "8", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_com", "9", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_ath", "10", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_tek", "11", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_HAT010", "12", "", "YES", "bit", "0", "0", "0", "0", "0",
					 "", "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_HAT020", "13", "", "YES", "bit", "0", "0", "0", "0", "0",
					 "", "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_HAT030", "14", "", "YES", "bit", "0", "0", "0", "0", "0",
					 "", "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_HAT040", "15", "", "YES", "bit", "0", "0", "0", "0", "0",
					 "", "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mhyousisettei", "mit_HAT050", "16", "", "YES", "bit", "0", "0", "0", "0", "0",
					 "", "", 0, _bit, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_mhyousisettei() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_mhyousisettei rec;
				com->GetData(1, SQL_C_LONG, &rec.mit_no, sizeof(rec.mit_no), 0);
				com->GetData(2, SQL_C_CHAR, &rec.mit_ait, sizeof(rec.mit_ait), 0);
				com->GetData(3, SQL_C_CHAR, &rec.mit_dat, sizeof(rec.mit_dat), 0);
				com->GetData(4, SQL_C_CHAR, &rec.mit_gak, sizeof(rec.mit_gak), 0);
				com->GetData(5, SQL_C_CHAR, &rec.mit_koj, sizeof(rec.mit_koj), 0);
				com->GetData(6, SQL_C_CHAR, &rec.mit_adr, sizeof(rec.mit_adr), 0);
				com->GetData(7, SQL_C_CHAR, &rec.mit_str, sizeof(rec.mit_str), 0);
				com->GetData(8, SQL_C_CHAR, &rec.mit_end, sizeof(rec.mit_end), 0);
				com->GetData(9, SQL_C_CHAR, &rec.mit_com, sizeof(rec.mit_com), 0);
				com->GetData(10, SQL_C_CHAR, &rec.mit_ath, sizeof(rec.mit_ath), 0);
				com->GetData(11, SQL_C_CHAR, &rec.mit_tek, sizeof(rec.mit_tek), 0);
				com->GetData(12, SQL_C_CHAR, &rec.mit_HAT010, sizeof(rec.mit_HAT010), 0);
				com->GetData(13, SQL_C_CHAR, &rec.mit_HAT020, sizeof(rec.mit_HAT020), 0);
				com->GetData(14, SQL_C_CHAR, &rec.mit_HAT030, sizeof(rec.mit_HAT030), 0);
				com->GetData(15, SQL_C_CHAR, &rec.mit_HAT040, sizeof(rec.mit_HAT040), 0);
				com->GetData(16, SQL_C_CHAR, &rec.mit_HAT050, sizeof(rec.mit_HAT050), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_mhyousisettei operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_mhyousisettei &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_mhyousisettei rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_mhyousisettei> m_Data;
};
class CR_t_mitsumori : public COdbcRecord {
public:
	CR_t_mitsumori() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_mitsumori() {}

	void Initialize() {
		mit_id = 0;
		mit_no = 0;
		mit_ait = "";
		memset(&mit_gak, 0, sizeof(mit_gak));
		mit_koj = "";
		mit_adr = "";
		mit_com = "";
		mit_ath = "";
		mit_tek = "";
		mit_HAT010 = 0;
		mit_HAT020 = "";
		mit_HAT030 = "";
		mit_HAT040 = "";
		mit_HAT050 = "";
	}

public:
	SQLINTEGER mit_id;
	SQLINTEGER mit_no;
	std::string mit_ait;
	TIMESTAMP_STRUCT mit_dat;
	SQL_NUMERIC_STRUCT mit_gak;
	std::string mit_koj;
	std::string mit_adr;
	TIMESTAMP_STRUCT mit_str;
	TIMESTAMP_STRUCT mit_end;
	std::string mit_com;
	std::string mit_ath;
	std::string mit_tek;
	SQLINTEGER mit_HAT010;
	std::string mit_HAT020;
	std::string mit_HAT030;
	std::string mit_HAT040;
	std::string mit_HAT050;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mit_id;
		} break;
		case 1: {
			ss << this->mit_no;
		} break;
		case 2: {
			ss << this->mit_ait;
		} break;
		case 3: {
			COdbcDateTime date(&this->mit_dat);
			ss << date.to_string();
		} break;
		case 4: {
			ss << COdbcColumn::NumericToString(&this->mit_gak);
		} break;
		case 5: {
			ss << this->mit_koj;
		} break;
		case 6: {
			ss << this->mit_adr;
		} break;
		case 7: {
			COdbcDateTime date(&this->mit_str);
			ss << date.to_string();
		} break;
		case 8: {
			COdbcDateTime date(&this->mit_end);
			ss << date.to_string();
		} break;
		case 9: {
			ss << this->mit_com;
		} break;
		case 10: {
			ss << this->mit_ath;
		} break;
		case 11: {
			ss << this->mit_tek;
		} break;
		case 12: {
			ss << this->mit_HAT010;
		} break;
		case 13: {
			ss << this->mit_HAT020;
		} break;
		case 14: {
			ss << this->mit_HAT030;
		} break;
		case 15: {
			ss << this->mit_HAT040;
		} break;
		case 16: {
			ss << this->mit_HAT050;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_mitsumori : public COdbcTable {
public:
	CT_t_mitsumori() : COdbcTable() {
		m_TableName = "t_mitsumori";
		m_SqlSELECT = "SELECT "
					  "mit_id,"
					  "mit_no,"
					  "mit_ait,"
					  "mit_dat,"
					  "mit_gak,"
					  "mit_koj,"
					  "mit_adr,"
					  "mit_str,"
					  "mit_end,"
					  "mit_com,"
					  "mit_ath,"
					  "mit_tek,"
					  "mit_HAT010,"
					  "mit_HAT020,"
					  "mit_HAT030,"
					  "mit_HAT040,"
					  "mit_HAT050"
					  " FROM t_mitsumori";
		m_SqlINSERT = "INSERT INTO t_mitsumori ("
					  "mit_id,"
					  "mit_no,"
					  "mit_ait,"
					  "mit_dat,"
					  "mit_gak,"
					  "mit_koj,"
					  "mit_adr,"
					  "mit_str,"
					  "mit_end,"
					  "mit_com,"
					  "mit_ath,"
					  "mit_tek,"
					  "mit_HAT010,"
					  "mit_HAT020,"
					  "mit_HAT030,"
					  "mit_HAT040,"
					  "mit_HAT050)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_mitsumori SET "
					  "mit_id = ?,"
					  "mit_no = ?,"
					  "mit_ait = ?,"
					  "mit_dat = ?,"
					  "mit_gak = ?,"
					  "mit_koj = ?,"
					  "mit_adr = ?,"
					  "mit_str = ?,"
					  "mit_end = ?,"
					  "mit_com = ?,"
					  "mit_ath = ?,"
					  "mit_tek = ?,"
					  "mit_HAT010 = ?,"
					  "mit_HAT020 = ?,"
					  "mit_HAT030 = ?,"
					  "mit_HAT040 = ?,"
					  "mit_HAT050 = ?";

		m_SqlDELETE = "DELETE t_mitsumori ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_no", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_ait", "3", "", "YES", "nvarchar", "100", "200", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_dat", "4", "", "YES", "datetime", "0", "0", "0", "0", "3", "",
					 "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_gak", "5", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_koj", "6", "", "YES", "nvarchar", "100", "200", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_adr", "7", "", "YES", "nvarchar", "100", "200", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_str", "8", "", "YES", "datetime", "0", "0", "0", "0", "3", "",
					 "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_end", "9", "", "YES", "datetime", "0", "0", "0", "0", "3", "",
					 "", 0, _datetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_com", "10", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_ath", "11", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_tek", "12", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_HAT010", "13", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_HAT020", "14", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_HAT030", "15", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_HAT040", "16", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mitsumori", "mit_HAT050", "17", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_mitsumori() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mit_ait = new char[201];
		char *mit_koj = new char[201];
		char *mit_adr = new char[201];
		char *mit_com = new char[MAXBUF];
		char *mit_ath = new char[MAXBUF];
		char *mit_tek = new char[MAXBUF];
		char *mit_HAT020 = new char[101];
		char *mit_HAT030 = new char[101];
		char *mit_HAT040 = new char[101];
		char *mit_HAT050 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_mitsumori rec;
				com->GetData(1, SQL_C_LONG, &rec.mit_id, sizeof(rec.mit_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mit_no, sizeof(rec.mit_no), 0);
				memset(mit_ait, 0, 201);
				com->GetData(3, SQL_C_CHAR, mit_ait, 201, 0);
				rec.mit_ait = (char *)mit_ait;
				com->GetData(4, SQL_C_TYPE_TIMESTAMP, &rec.mit_dat, sizeof(rec.mit_dat), 0);
				com->GetData(5, SQL_C_NUMERIC, &rec.mit_gak, sizeof(rec.mit_gak), 0);
				memset(mit_koj, 0, 201);
				com->GetData(6, SQL_C_CHAR, mit_koj, 201, 0);
				rec.mit_koj = (char *)mit_koj;
				memset(mit_adr, 0, 201);
				com->GetData(7, SQL_C_CHAR, mit_adr, 201, 0);
				rec.mit_adr = (char *)mit_adr;
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.mit_str, sizeof(rec.mit_str), 0);
				com->GetData(9, SQL_C_TYPE_TIMESTAMP, &rec.mit_end, sizeof(rec.mit_end), 0);
				memset(mit_com, 0, 1048576);
				com->GetData(10, SQL_C_CHAR, mit_com, 1048576, 0);
				rec.mit_com = (char *)mit_com;
				memset(mit_ath, 0, 1048576);
				com->GetData(11, SQL_C_CHAR, mit_ath, 1048576, 0);
				rec.mit_ath = (char *)mit_ath;
				memset(mit_tek, 0, 1048576);
				com->GetData(12, SQL_C_CHAR, mit_tek, 1048576, 0);
				rec.mit_tek = (char *)mit_tek;
				com->GetData(13, SQL_C_LONG, &rec.mit_HAT010, sizeof(rec.mit_HAT010), 0);
				memset(mit_HAT020, 0, 101);
				com->GetData(14, SQL_C_CHAR, mit_HAT020, 101, 0);
				rec.mit_HAT020 = (char *)mit_HAT020;
				memset(mit_HAT030, 0, 101);
				com->GetData(15, SQL_C_CHAR, mit_HAT030, 101, 0);
				rec.mit_HAT030 = (char *)mit_HAT030;
				memset(mit_HAT040, 0, 101);
				com->GetData(16, SQL_C_CHAR, mit_HAT040, 101, 0);
				rec.mit_HAT040 = (char *)mit_HAT040;
				memset(mit_HAT050, 0, 101);
				com->GetData(17, SQL_C_CHAR, mit_HAT050, 101, 0);
				rec.mit_HAT050 = (char *)mit_HAT050;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mit_ait;
		delete[] mit_koj;
		delete[] mit_adr;
		delete[] mit_com;
		delete[] mit_ath;
		delete[] mit_tek;
		delete[] mit_HAT020;
		delete[] mit_HAT030;
		delete[] mit_HAT040;
		delete[] mit_HAT050;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_mitsumori operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_mitsumori &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_mitsumori rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_mitsumori> m_Data;
};
class CR_t_mmeisai : public COdbcRecord {
public:
	CR_t_mmeisai() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_mmeisai() {}

	void Initialize() {
		mms_id = 0;
		mms_kouji = 0;
		mms_gyo = 0;
		mms_syukei = 0;
		mms_name = "";
		mms_kikaku = "";
		mms_suu = 0.0;
		mms_tani = "";
		memset(&mms_tanka, 0, sizeof(mms_tanka));
		memset(&mms_kingaku, 0, sizeof(mms_kingaku));
		mms_tekiyou = "";
	}

public:
	SQLINTEGER mms_id;
	SQLINTEGER mms_kouji;
	SQLINTEGER mms_gyo;
	SQLINTEGER mms_syukei;
	std::string mms_name;
	std::string mms_kikaku;
	SQLFLOAT mms_suu;
	std::string mms_tani;
	SQL_NUMERIC_STRUCT mms_tanka;
	SQL_NUMERIC_STRUCT mms_kingaku;
	std::string mms_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mms_id;
		} break;
		case 1: {
			ss << this->mms_kouji;
		} break;
		case 2: {
			ss << this->mms_gyo;
		} break;
		case 3: {
			ss << this->mms_syukei;
		} break;
		case 4: {
			ss << this->mms_name;
		} break;
		case 5: {
			ss << this->mms_kikaku;
		} break;
		case 6: {
			ss << this->mms_suu;
		} break;
		case 7: {
			ss << this->mms_tani;
		} break;
		case 8: {
			ss << COdbcColumn::NumericToString(&this->mms_tanka);
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->mms_kingaku);
		} break;
		case 10: {
			ss << this->mms_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_mmeisai : public COdbcTable {
public:
	CT_t_mmeisai() : COdbcTable() {
		m_TableName = "t_mmeisai";
		m_SqlSELECT = "SELECT "
					  "mms_id,"
					  "mms_kouji,"
					  "mms_gyo,"
					  "mms_syukei,"
					  "mms_name,"
					  "mms_kikaku,"
					  "mms_suu,"
					  "mms_tani,"
					  "mms_tanka,"
					  "mms_kingaku,"
					  "mms_tekiyou"
					  " FROM t_mmeisai";
		m_SqlINSERT = "INSERT INTO t_mmeisai ("
					  "mms_id,"
					  "mms_kouji,"
					  "mms_gyo,"
					  "mms_syukei,"
					  "mms_name,"
					  "mms_kikaku,"
					  "mms_suu,"
					  "mms_tani,"
					  "mms_tanka,"
					  "mms_kingaku,"
					  "mms_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_mmeisai SET "
					  "mms_id = ?,"
					  "mms_kouji = ?,"
					  "mms_gyo = ?,"
					  "mms_syukei = ?,"
					  "mms_name = ?,"
					  "mms_kikaku = ?,"
					  "mms_suu = ?,"
					  "mms_tani = ?,"
					  "mms_tanka = ?,"
					  "mms_kingaku = ?,"
					  "mms_tekiyou = ?";

		m_SqlDELETE = "DELETE t_mmeisai ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_kouji", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_gyo", "3", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_syukei", "4", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_name", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_kikaku", "6", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_suu", "7", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_tani", "8", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_tanka", "9", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_kingaku", "10", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_mmeisai", "mms_tekiyou", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_mmeisai() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mms_name = new char[511];
		char *mms_kikaku = new char[511];
		char *mms_tani = new char[101];
		char *mms_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_mmeisai rec;
				com->GetData(1, SQL_C_LONG, &rec.mms_id, sizeof(rec.mms_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mms_kouji, sizeof(rec.mms_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.mms_gyo, sizeof(rec.mms_gyo), 0);
				com->GetData(4, SQL_C_LONG, &rec.mms_syukei, sizeof(rec.mms_syukei), 0);
				memset(mms_name, 0, 511);
				com->GetData(5, SQL_C_CHAR, mms_name, 511, 0);
				rec.mms_name = (char *)mms_name;
				memset(mms_kikaku, 0, 511);
				com->GetData(6, SQL_C_CHAR, mms_kikaku, 511, 0);
				rec.mms_kikaku = (char *)mms_kikaku;
				com->GetData(7, SQL_C_DOUBLE, &rec.mms_suu, sizeof(rec.mms_suu), 0);
				memset(mms_tani, 0, 101);
				com->GetData(8, SQL_C_CHAR, mms_tani, 101, 0);
				rec.mms_tani = (char *)mms_tani;
				com->GetData(9, SQL_C_NUMERIC, &rec.mms_tanka, sizeof(rec.mms_tanka), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.mms_kingaku, sizeof(rec.mms_kingaku), 0);
				memset(mms_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, mms_tekiyou, 511, 0);
				rec.mms_tekiyou = (char *)mms_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mms_name;
		delete[] mms_kikaku;
		delete[] mms_tani;
		delete[] mms_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_mmeisai operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_mmeisai &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_mmeisai rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_mmeisai> m_Data;
};
class CR_t_nyusatsu : public COdbcRecord {
public:
	CR_t_nyusatsu() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_nyusatsu() {}

	void Initialize() {
		n_index = 0;
		n_kname = "";
		n_kno = "";
		n_scode = 0;
		n_syubetsu = "";
		n_hatcd = 0;
		n_HAT020 = "";
		n_keiyaku = 0.0;
		n_tuika = 0.0;
		n_koukei = 0.0;
		n_yosan = 0.0;
		n_genka = 0.0;
		n_dairi = "";
		n_eigyou = "";
		n_HAT030 = "";
		n_HAT040 = "";
		n_HAT050 = "";
		n_sw = 0;
		n_bikou1 = "";
		n_bikou2 = "";
		n_nyuno = "";
		n_type = 0;
		n_sya011 = 0;
		n_sya012 = "";
		n_ucode = 0;
	}

public:
	SQLINTEGER n_index;
	std::string n_kname;
	std::string n_kno;
	SQLINTEGER n_scode;
	std::string n_syubetsu;
	SQLINTEGER n_hatcd;
	std::string n_HAT020;
	SQLFLOAT n_keiyaku;
	SQLFLOAT n_tuika;
	SQLFLOAT n_koukei;
	SQLFLOAT n_yosan;
	SQLFLOAT n_genka;
	TIMESTAMP_STRUCT n_kdate;
	TIMESTAMP_STRUCT n_kaisi;
	TIMESTAMP_STRUCT n_owari;
	TIMESTAMP_STRUCT n_tyakou;
	TIMESTAMP_STRUCT n_kansei;
	TIMESTAMP_STRUCT n_kensa;
	std::string n_dairi;
	std::string n_eigyou;
	std::string n_HAT030;
	std::string n_HAT040;
	std::string n_HAT050;
	TIMESTAMP_STRUCT n_nyuudat;
	SQLCHAR n_sw;
	std::string n_bikou1;
	std::string n_bikou2;
	std::string n_nyuno;
	TIMESTAMP_STRUCT n_sinsadat;
	TIMESTAMP_STRUCT n_mitsumori;
	SQLINTEGER n_type;
	SQLINTEGER n_sya011;
	std::string n_sya012;
	TIMESTAMP_STRUCT n_koukoku;
	SQLINTEGER n_ucode;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->n_index;
		} break;
		case 1: {
			ss << this->n_kname;
		} break;
		case 2: {
			ss << this->n_kno;
		} break;
		case 3: {
			ss << this->n_scode;
		} break;
		case 4: {
			ss << this->n_syubetsu;
		} break;
		case 5: {
			ss << this->n_hatcd;
		} break;
		case 6: {
			ss << this->n_HAT020;
		} break;
		case 7: {
			ss << this->n_keiyaku;
		} break;
		case 8: {
			ss << this->n_tuika;
		} break;
		case 9: {
			ss << this->n_koukei;
		} break;
		case 10: {
			ss << this->n_yosan;
		} break;
		case 11: {
			ss << this->n_genka;
		} break;
		case 12: {
			COdbcDateTime date(&this->n_kdate);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->n_kaisi);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->n_owari);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->n_tyakou);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->n_kansei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->n_kensa);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->n_dairi;
		} break;
		case 19: {
			ss << this->n_eigyou;
		} break;
		case 20: {
			ss << this->n_HAT030;
		} break;
		case 21: {
			ss << this->n_HAT040;
		} break;
		case 22: {
			ss << this->n_HAT050;
		} break;
		case 23: {
			COdbcDateTime date(&this->n_nyuudat);
			ss << date.to_string();
		} break;
		case 24: {
			ss << this->n_sw;
		} break;
		case 25: {
			ss << this->n_bikou1;
		} break;
		case 26: {
			ss << this->n_bikou2;
		} break;
		case 27: {
			ss << this->n_nyuno;
		} break;
		case 28: {
			COdbcDateTime date(&this->n_sinsadat);
			ss << date.to_string();
		} break;
		case 29: {
			COdbcDateTime date(&this->n_mitsumori);
			ss << date.to_string();
		} break;
		case 30: {
			ss << this->n_type;
		} break;
		case 31: {
			ss << this->n_sya011;
		} break;
		case 32: {
			ss << this->n_sya012;
		} break;
		case 33: {
			COdbcDateTime date(&this->n_koukoku);
			ss << date.to_string();
		} break;
		case 34: {
			ss << this->n_ucode;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_nyusatsu : public COdbcTable {
public:
	CT_t_nyusatsu() : COdbcTable() {
		m_TableName = "t_nyusatsu";
		m_SqlSELECT = "SELECT "
					  "n_index,"
					  "n_kname,"
					  "n_kno,"
					  "n_scode,"
					  "n_syubetsu,"
					  "n_hatcd,"
					  "n_HAT020,"
					  "n_keiyaku,"
					  "n_tuika,"
					  "n_koukei,"
					  "n_yosan,"
					  "n_genka,"
					  "n_kdate,"
					  "n_kaisi,"
					  "n_owari,"
					  "n_tyakou,"
					  "n_kansei,"
					  "n_kensa,"
					  "n_dairi,"
					  "n_eigyou,"
					  "n_HAT030,"
					  "n_HAT040,"
					  "n_HAT050,"
					  "n_nyuudat,"
					  "n_sw,"
					  "n_bikou1,"
					  "n_bikou2,"
					  "n_nyuno,"
					  "n_sinsadat,"
					  "n_mitsumori,"
					  "n_type,"
					  "n_sya011,"
					  "n_sya012,"
					  "n_koukoku,"
					  "n_ucode"
					  " FROM t_nyusatsu";
		m_SqlINSERT = "INSERT INTO t_nyusatsu ("
					  "n_index,"
					  "n_kname,"
					  "n_kno,"
					  "n_scode,"
					  "n_syubetsu,"
					  "n_hatcd,"
					  "n_HAT020,"
					  "n_keiyaku,"
					  "n_tuika,"
					  "n_koukei,"
					  "n_yosan,"
					  "n_genka,"
					  "n_kdate,"
					  "n_kaisi,"
					  "n_owari,"
					  "n_tyakou,"
					  "n_kansei,"
					  "n_kensa,"
					  "n_dairi,"
					  "n_eigyou,"
					  "n_HAT030,"
					  "n_HAT040,"
					  "n_HAT050,"
					  "n_nyuudat,"
					  "n_sw,"
					  "n_bikou1,"
					  "n_bikou2,"
					  "n_nyuno,"
					  "n_sinsadat,"
					  "n_mitsumori,"
					  "n_type,"
					  "n_sya011,"
					  "n_sya012,"
					  "n_koukoku,"
					  "n_ucode)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_nyusatsu SET "
					  "n_index = ?,"
					  "n_kname = ?,"
					  "n_kno = ?,"
					  "n_scode = ?,"
					  "n_syubetsu = ?,"
					  "n_hatcd = ?,"
					  "n_HAT020 = ?,"
					  "n_keiyaku = ?,"
					  "n_tuika = ?,"
					  "n_koukei = ?,"
					  "n_yosan = ?,"
					  "n_genka = ?,"
					  "n_kdate = ?,"
					  "n_kaisi = ?,"
					  "n_owari = ?,"
					  "n_tyakou = ?,"
					  "n_kansei = ?,"
					  "n_kensa = ?,"
					  "n_dairi = ?,"
					  "n_eigyou = ?,"
					  "n_HAT030 = ?,"
					  "n_HAT040 = ?,"
					  "n_HAT050 = ?,"
					  "n_nyuudat = ?,"
					  "n_sw = ?,"
					  "n_bikou1 = ?,"
					  "n_bikou2 = ?,"
					  "n_nyuno = ?,"
					  "n_sinsadat = ?,"
					  "n_mitsumori = ?,"
					  "n_type = ?,"
					  "n_sya011 = ?,"
					  "n_sya012 = ?,"
					  "n_koukoku = ?,"
					  "n_ucode = ?";

		m_SqlDELETE = "DELETE t_nyusatsu ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_kname", "2", "", "NO", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_kno", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_scode", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_syubetsu", "5", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_HAT020", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_tuika", "9", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_koukei", "10", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_kdate", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_kaisi", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_owari", "15", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_tyakou", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_kansei", "17", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_kensa", "18", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_dairi", "19", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_eigyou", "20", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_HAT030", "21", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_HAT040", "22", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_HAT050", "23", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_nyuudat", "24", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_sw", "25", "", "NO", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_bikou1", "26", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_bikou2", "27", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_nyuno", "28", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_sinsadat", "29", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_mitsumori", "30", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_type", "31", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_sya011", "32", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_sya012", "33", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_koukoku", "34", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_nyusatsu", "n_ucode", "35", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_nyusatsu() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *n_kname = new char[511];
		char *n_kno = new char[511];
		char *n_syubetsu = new char[101];
		char *n_HAT020 = new char[511];
		char *n_dairi = new char[MAXBUF];
		char *n_eigyou = new char[MAXBUF];
		char *n_HAT030 = new char[101];
		char *n_HAT040 = new char[101];
		char *n_HAT050 = new char[101];
		char *n_bikou1 = new char[511];
		char *n_bikou2 = new char[511];
		char *n_nyuno = new char[101];
		char *n_sya012 = new char[81];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_nyusatsu rec;
				com->GetData(1, SQL_C_LONG, &rec.n_index, sizeof(rec.n_index), 0);
				memset(n_kname, 0, 511);
				com->GetData(2, SQL_C_CHAR, n_kname, 511, 0);
				rec.n_kname = (char *)n_kname;
				memset(n_kno, 0, 511);
				com->GetData(3, SQL_C_CHAR, n_kno, 511, 0);
				rec.n_kno = (char *)n_kno;
				com->GetData(4, SQL_C_LONG, &rec.n_scode, sizeof(rec.n_scode), 0);
				memset(n_syubetsu, 0, 101);
				com->GetData(5, SQL_C_CHAR, n_syubetsu, 101, 0);
				rec.n_syubetsu = (char *)n_syubetsu;
				com->GetData(6, SQL_C_LONG, &rec.n_hatcd, sizeof(rec.n_hatcd), 0);
				memset(n_HAT020, 0, 511);
				com->GetData(7, SQL_C_CHAR, n_HAT020, 511, 0);
				rec.n_HAT020 = (char *)n_HAT020;
				com->GetData(8, SQL_C_DOUBLE, &rec.n_keiyaku, sizeof(rec.n_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.n_tuika, sizeof(rec.n_tuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.n_koukei, sizeof(rec.n_koukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.n_yosan, sizeof(rec.n_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.n_genka, sizeof(rec.n_genka), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.n_kdate, sizeof(rec.n_kdate), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.n_kaisi, sizeof(rec.n_kaisi), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.n_owari, sizeof(rec.n_owari), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.n_tyakou, sizeof(rec.n_tyakou), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.n_kansei, sizeof(rec.n_kansei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.n_kensa, sizeof(rec.n_kensa), 0);
				memset(n_dairi, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, n_dairi, 1048576, 0);
				rec.n_dairi = (char *)n_dairi;
				memset(n_eigyou, 0, 1048576);
				com->GetData(20, SQL_C_CHAR, n_eigyou, 1048576, 0);
				rec.n_eigyou = (char *)n_eigyou;
				memset(n_HAT030, 0, 101);
				com->GetData(21, SQL_C_CHAR, n_HAT030, 101, 0);
				rec.n_HAT030 = (char *)n_HAT030;
				memset(n_HAT040, 0, 101);
				com->GetData(22, SQL_C_CHAR, n_HAT040, 101, 0);
				rec.n_HAT040 = (char *)n_HAT040;
				memset(n_HAT050, 0, 101);
				com->GetData(23, SQL_C_CHAR, n_HAT050, 101, 0);
				rec.n_HAT050 = (char *)n_HAT050;
				com->GetData(24, SQL_C_TYPE_TIMESTAMP, &rec.n_nyuudat, sizeof(rec.n_nyuudat), 0);
				com->GetData(25, SQL_C_CHAR, &rec.n_sw, sizeof(rec.n_sw), 0);
				memset(n_bikou1, 0, 511);
				com->GetData(26, SQL_C_CHAR, n_bikou1, 511, 0);
				rec.n_bikou1 = (char *)n_bikou1;
				memset(n_bikou2, 0, 511);
				com->GetData(27, SQL_C_CHAR, n_bikou2, 511, 0);
				rec.n_bikou2 = (char *)n_bikou2;
				memset(n_nyuno, 0, 101);
				com->GetData(28, SQL_C_CHAR, n_nyuno, 101, 0);
				rec.n_nyuno = (char *)n_nyuno;
				com->GetData(29, SQL_C_TYPE_TIMESTAMP, &rec.n_sinsadat, sizeof(rec.n_sinsadat), 0);
				com->GetData(30, SQL_C_TYPE_TIMESTAMP, &rec.n_mitsumori, sizeof(rec.n_mitsumori), 0);
				com->GetData(31, SQL_C_LONG, &rec.n_type, sizeof(rec.n_type), 0);
				com->GetData(32, SQL_C_LONG, &rec.n_sya011, sizeof(rec.n_sya011), 0);
				memset(n_sya012, 0, 81);
				com->GetData(33, SQL_C_CHAR, n_sya012, 81, 0);
				rec.n_sya012 = (char *)n_sya012;
				com->GetData(34, SQL_C_TYPE_TIMESTAMP, &rec.n_koukoku, sizeof(rec.n_koukoku), 0);
				com->GetData(35, SQL_C_LONG, &rec.n_ucode, sizeof(rec.n_ucode), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] n_kname;
		delete[] n_kno;
		delete[] n_syubetsu;
		delete[] n_HAT020;
		delete[] n_dairi;
		delete[] n_eigyou;
		delete[] n_HAT030;
		delete[] n_HAT040;
		delete[] n_HAT050;
		delete[] n_bikou1;
		delete[] n_bikou2;
		delete[] n_nyuno;
		delete[] n_sya012;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_nyusatsu operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_nyusatsu &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_nyusatsu rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_nyusatsu> m_Data;
};
class CR_t_recycle : public COdbcRecord {
public:
	CR_t_recycle() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_recycle() {}

	void Initialize() {
		recycleID = 0;
		rc_class1 = 0;
		rc_class2 = 0;
		rc_classname = "";
		rc_spec_con = 0;
		rc_spec_2 = 0;
		rc_spec_as = 0;
		rc_spec_wood = 0;
	}

public:
	SQLINTEGER recycleID;
	TIMESTAMP_STRUCT rc_date;
	SQLINTEGER rc_class1;
	SQLINTEGER rc_class2;
	std::string rc_classname;
	SQLCHAR rc_spec_con;
	SQLCHAR rc_spec_2;
	SQLCHAR rc_spec_as;
	SQLCHAR rc_spec_wood;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->recycleID;
		} break;
		case 1: {
			COdbcDateTime date(&this->rc_date);
			ss << date.to_string();
		} break;
		case 2: {
			ss << this->rc_class1;
		} break;
		case 3: {
			ss << this->rc_class2;
		} break;
		case 4: {
			ss << this->rc_classname;
		} break;
		case 5: {
			ss << this->rc_spec_con;
		} break;
		case 6: {
			ss << this->rc_spec_2;
		} break;
		case 7: {
			ss << this->rc_spec_as;
		} break;
		case 8: {
			ss << this->rc_spec_wood;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_recycle : public COdbcTable {
public:
	CT_t_recycle() : COdbcTable() {
		m_TableName = "t_recycle";
		m_SqlSELECT = "SELECT "
					  "recycleID,"
					  "rc_date,"
					  "rc_class1,"
					  "rc_class2,"
					  "rc_classname,"
					  "rc_spec_con,"
					  "rc_spec_2,"
					  "rc_spec_as,"
					  "rc_spec_wood"
					  " FROM t_recycle";
		m_SqlINSERT = "INSERT INTO t_recycle ("
					  "recycleID,"
					  "rc_date,"
					  "rc_class1,"
					  "rc_class2,"
					  "rc_classname,"
					  "rc_spec_con,"
					  "rc_spec_2,"
					  "rc_spec_as,"
					  "rc_spec_wood)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_recycle SET "
					  "recycleID = ?,"
					  "rc_date = ?,"
					  "rc_class1 = ?,"
					  "rc_class2 = ?,"
					  "rc_classname = ?,"
					  "rc_spec_con = ?,"
					  "rc_spec_2 = ?,"
					  "rc_spec_as = ?,"
					  "rc_spec_wood = ?";

		m_SqlDELETE = "DELETE t_recycle ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_recycle", "recycleID", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_recycle", "rc_date", "2", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_recycle", "rc_class1", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_recycle", "rc_class2", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_recycle", "rc_classname", "5", "", "YES", "nvarchar", "-1", "-1", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_recycle", "rc_spec_con", "6", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_recycle", "rc_spec_2", "7", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_recycle", "rc_spec_as", "8", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_recycle", "rc_spec_wood", "9", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_recycle() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *rc_classname = new char[0];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_recycle rec;
				com->GetData(1, SQL_C_LONG, &rec.recycleID, sizeof(rec.recycleID), 0);
				com->GetData(2, SQL_C_TYPE_TIMESTAMP, &rec.rc_date, sizeof(rec.rc_date), 0);
				com->GetData(3, SQL_C_LONG, &rec.rc_class1, sizeof(rec.rc_class1), 0);
				com->GetData(4, SQL_C_LONG, &rec.rc_class2, sizeof(rec.rc_class2), 0);
				memset(rc_classname, 0, 0);
				com->GetData(5, SQL_C_CHAR, rc_classname, 0, 0);
				rec.rc_classname = (char *)rc_classname;
				com->GetData(6, SQL_C_CHAR, &rec.rc_spec_con, sizeof(rec.rc_spec_con), 0);
				com->GetData(7, SQL_C_CHAR, &rec.rc_spec_2, sizeof(rec.rc_spec_2), 0);
				com->GetData(8, SQL_C_CHAR, &rec.rc_spec_as, sizeof(rec.rc_spec_as), 0);
				com->GetData(9, SQL_C_CHAR, &rec.rc_spec_wood, sizeof(rec.rc_spec_wood), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] rc_classname;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_recycle operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_recycle &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_recycle rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_recycle> m_Data;
};
class CR_t_rirekiwork : public COdbcRecord {
public:
	CR_t_rirekiwork() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_rirekiwork() {}

	void Initialize() {
		kr_index = 0;
		kr_syacd = 0;
		kr_nengo = "";
		kr_nendo = 0;
		kr_tuki = 0;
		kr_kouji = 0;
		kr_name = "";
		kr_no = "";
		kr_hat = "";
		kr_syozoku = "";
		kr_motouke = "";
		kr_syokumu = "";
		kr_bikou1 = "";
	}

public:
	SQLINTEGER kr_index;
	SQLINTEGER kr_syacd;
	std::string kr_nengo;
	SQLINTEGER kr_nendo;
	SQLINTEGER kr_tuki;
	SQLINTEGER kr_kouji;
	std::string kr_name;
	std::string kr_no;
	TIMESTAMP_STRUCT kr_kaisi;
	TIMESTAMP_STRUCT kr_owari;
	std::string kr_hat;
	std::string kr_syozoku;
	std::string kr_motouke;
	std::string kr_syokumu;
	std::string kr_bikou1;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kr_index;
		} break;
		case 1: {
			ss << this->kr_syacd;
		} break;
		case 2: {
			ss << this->kr_nengo;
		} break;
		case 3: {
			ss << this->kr_nendo;
		} break;
		case 4: {
			ss << this->kr_tuki;
		} break;
		case 5: {
			ss << this->kr_kouji;
		} break;
		case 6: {
			ss << this->kr_name;
		} break;
		case 7: {
			ss << this->kr_no;
		} break;
		case 8: {
			COdbcDateTime date(&this->kr_kaisi);
			ss << date.to_string();
		} break;
		case 9: {
			COdbcDateTime date(&this->kr_owari);
			ss << date.to_string();
		} break;
		case 10: {
			ss << this->kr_hat;
		} break;
		case 11: {
			ss << this->kr_syozoku;
		} break;
		case 12: {
			ss << this->kr_motouke;
		} break;
		case 13: {
			ss << this->kr_syokumu;
		} break;
		case 14: {
			ss << this->kr_bikou1;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_rirekiwork : public COdbcTable {
public:
	CT_t_rirekiwork() : COdbcTable() {
		m_TableName = "t_rirekiwork";
		m_SqlSELECT = "SELECT "
					  "kr_index,"
					  "kr_syacd,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_tuki,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1"
					  " FROM t_rirekiwork";
		m_SqlINSERT = "INSERT INTO t_rirekiwork ("
					  "kr_index,"
					  "kr_syacd,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_tuki,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_rirekiwork SET "
					  "kr_index = ?,"
					  "kr_syacd = ?,"
					  "kr_nengo = ?,"
					  "kr_nendo = ?,"
					  "kr_tuki = ?,"
					  "kr_kouji = ?,"
					  "kr_name = ?,"
					  "kr_no = ?,"
					  "kr_kaisi = ?,"
					  "kr_owari = ?,"
					  "kr_hat = ?,"
					  "kr_syozoku = ?,"
					  "kr_motouke = ?,"
					  "kr_syokumu = ?,"
					  "kr_bikou1 = ?";

		m_SqlDELETE = "DELETE t_rirekiwork ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_syacd", "2", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_nengo", "3", "", "NO", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_nendo", "4", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_tuki", "5", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_kouji", "6", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_name", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_no", "8", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_kaisi", "9", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_owari", "10", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_hat", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_syozoku", "12", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_motouke", "13", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_syokumu", "14", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_rirekiwork", "kr_bikou1", "15", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_rirekiwork() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *kr_nengo = new char[101];
		char *kr_name = new char[511];
		char *kr_no = new char[511];
		char *kr_hat = new char[511];
		char *kr_syozoku = new char[511];
		char *kr_motouke = new char[101];
		char *kr_syokumu = new char[101];
		char *kr_bikou1 = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_rirekiwork rec;
				com->GetData(1, SQL_C_LONG, &rec.kr_index, sizeof(rec.kr_index), 0);
				com->GetData(2, SQL_C_LONG, &rec.kr_syacd, sizeof(rec.kr_syacd), 0);
				memset(kr_nengo, 0, 101);
				com->GetData(3, SQL_C_CHAR, kr_nengo, 101, 0);
				rec.kr_nengo = (char *)kr_nengo;
				com->GetData(4, SQL_C_LONG, &rec.kr_nendo, sizeof(rec.kr_nendo), 0);
				com->GetData(5, SQL_C_LONG, &rec.kr_tuki, sizeof(rec.kr_tuki), 0);
				com->GetData(6, SQL_C_LONG, &rec.kr_kouji, sizeof(rec.kr_kouji), 0);
				memset(kr_name, 0, 511);
				com->GetData(7, SQL_C_CHAR, kr_name, 511, 0);
				rec.kr_name = (char *)kr_name;
				memset(kr_no, 0, 511);
				com->GetData(8, SQL_C_CHAR, kr_no, 511, 0);
				rec.kr_no = (char *)kr_no;
				com->GetData(9, SQL_C_TYPE_TIMESTAMP, &rec.kr_kaisi, sizeof(rec.kr_kaisi), 0);
				com->GetData(10, SQL_C_TYPE_TIMESTAMP, &rec.kr_owari, sizeof(rec.kr_owari), 0);
				memset(kr_hat, 0, 511);
				com->GetData(11, SQL_C_CHAR, kr_hat, 511, 0);
				rec.kr_hat = (char *)kr_hat;
				memset(kr_syozoku, 0, 511);
				com->GetData(12, SQL_C_CHAR, kr_syozoku, 511, 0);
				rec.kr_syozoku = (char *)kr_syozoku;
				memset(kr_motouke, 0, 101);
				com->GetData(13, SQL_C_CHAR, kr_motouke, 101, 0);
				rec.kr_motouke = (char *)kr_motouke;
				memset(kr_syokumu, 0, 101);
				com->GetData(14, SQL_C_CHAR, kr_syokumu, 101, 0);
				rec.kr_syokumu = (char *)kr_syokumu;
				memset(kr_bikou1, 0, 511);
				com->GetData(15, SQL_C_CHAR, kr_bikou1, 511, 0);
				rec.kr_bikou1 = (char *)kr_bikou1;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] kr_nengo;
		delete[] kr_name;
		delete[] kr_no;
		delete[] kr_hat;
		delete[] kr_syozoku;
		delete[] kr_motouke;
		delete[] kr_syokumu;
		delete[] kr_bikou1;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_rirekiwork operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_rirekiwork &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_rirekiwork rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_rirekiwork> m_Data;
};
class CR_t_sikaku : public COdbcRecord {
public:
	CR_t_sikaku() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_sikaku() {}

	void Initialize() {
		sikaku010 = 0;
		sikaku020 = 0;
		sikaku040 = "";
		sikaku050 = "";
		sikaku060 = 0;
		sikaku070 = 0;
		sikaku090 = "";
		sikaku_link = "";
	}

public:
	SQLINTEGER sikaku010;
	SQLINTEGER sikaku020;
	TIMESTAMP_STRUCT sikaku030;
	std::string sikaku040;
	std::string sikaku050;
	SQLINTEGER sikaku060;
	SQLCHAR sikaku070;
	TIMESTAMP_STRUCT sikaku080;
	std::string sikaku090;
	std::string sikaku_link;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->sikaku010;
		} break;
		case 1: {
			ss << this->sikaku020;
		} break;
		case 2: {
			COdbcDateTime date(&this->sikaku030);
			ss << date.to_string();
		} break;
		case 3: {
			ss << this->sikaku040;
		} break;
		case 4: {
			ss << this->sikaku050;
		} break;
		case 5: {
			ss << this->sikaku060;
		} break;
		case 6: {
			ss << this->sikaku070;
		} break;
		case 7: {
			COdbcDateTime date(&this->sikaku080);
			ss << date.to_string();
		} break;
		case 8: {
			ss << this->sikaku090;
		} break;
		case 9: {
			ss << this->sikaku_link;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_sikaku : public COdbcTable {
public:
	CT_t_sikaku() : COdbcTable() {
		m_TableName = "t_sikaku";
		m_SqlSELECT = "SELECT "
					  "sikaku010,"
					  "sikaku020,"
					  "sikaku030,"
					  "sikaku040,"
					  "sikaku050,"
					  "sikaku060,"
					  "sikaku070,"
					  "sikaku080,"
					  "sikaku090,"
					  "sikaku_link"
					  " FROM t_sikaku";
		m_SqlINSERT = "INSERT INTO t_sikaku ("
					  "sikaku010,"
					  "sikaku020,"
					  "sikaku030,"
					  "sikaku040,"
					  "sikaku050,"
					  "sikaku060,"
					  "sikaku070,"
					  "sikaku080,"
					  "sikaku090,"
					  "sikaku_link)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_sikaku SET "
					  "sikaku010 = ?,"
					  "sikaku020 = ?,"
					  "sikaku030 = ?,"
					  "sikaku040 = ?,"
					  "sikaku050 = ?,"
					  "sikaku060 = ?,"
					  "sikaku070 = ?,"
					  "sikaku080 = ?,"
					  "sikaku090 = ?,"
					  "sikaku_link = ?";

		m_SqlDELETE = "DELETE t_sikaku ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku010", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku020", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku030", "3", "", "NO", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku040", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku050", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku060", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku070", "7", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku080", "8", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku090", "9", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku", "sikaku_link", "10", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_sikaku() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *sikaku040 = new char[511];
		char *sikaku050 = new char[511];
		char *sikaku090 = new char[101];
		char *sikaku_link = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_sikaku rec;
				com->GetData(1, SQL_C_LONG, &rec.sikaku010, sizeof(rec.sikaku010), 0);
				com->GetData(2, SQL_C_LONG, &rec.sikaku020, sizeof(rec.sikaku020), 0);
				com->GetData(3, SQL_C_TYPE_TIMESTAMP, &rec.sikaku030, sizeof(rec.sikaku030), 0);
				memset(sikaku040, 0, 511);
				com->GetData(4, SQL_C_CHAR, sikaku040, 511, 0);
				rec.sikaku040 = (char *)sikaku040;
				memset(sikaku050, 0, 511);
				com->GetData(5, SQL_C_CHAR, sikaku050, 511, 0);
				rec.sikaku050 = (char *)sikaku050;
				com->GetData(6, SQL_C_LONG, &rec.sikaku060, sizeof(rec.sikaku060), 0);
				com->GetData(7, SQL_C_CHAR, &rec.sikaku070, sizeof(rec.sikaku070), 0);
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.sikaku080, sizeof(rec.sikaku080), 0);
				memset(sikaku090, 0, 101);
				com->GetData(9, SQL_C_CHAR, sikaku090, 101, 0);
				rec.sikaku090 = (char *)sikaku090;
				memset(sikaku_link, 0, 511);
				com->GetData(10, SQL_C_CHAR, sikaku_link, 511, 0);
				rec.sikaku_link = (char *)sikaku_link;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] sikaku040;
		delete[] sikaku050;
		delete[] sikaku090;
		delete[] sikaku_link;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_sikaku operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_sikaku &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_sikaku rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_sikaku> m_Data;
};
class CR_t_sikaku_obj : public COdbcRecord {
public:
	CR_t_sikaku_obj() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_sikaku_obj() {}

	void Initialize() {
		sikaku010 = 0;
		sikaku020 = 0;
		sikaku040 = "";
		sikaku050 = "";
		sikaku060 = 0;
		sikaku070 = 0;
	}

public:
	SQLINTEGER sikaku010;
	SQLINTEGER sikaku020;
	TIMESTAMP_STRUCT sikaku030;
	std::string sikaku040;
	std::string sikaku050;
	SQLINTEGER sikaku060;
	SQLCHAR sikaku070;
	TIMESTAMP_STRUCT sikaku080;
	SQLCHAR sikaku_image;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->sikaku010;
		} break;
		case 1: {
			ss << this->sikaku020;
		} break;
		case 2: {
			COdbcDateTime date(&this->sikaku030);
			ss << date.to_string();
		} break;
		case 3: {
			ss << this->sikaku040;
		} break;
		case 4: {
			ss << this->sikaku050;
		} break;
		case 5: {
			ss << this->sikaku060;
		} break;
		case 6: {
			ss << this->sikaku070;
		} break;
		case 7: {
			COdbcDateTime date(&this->sikaku080);
			ss << date.to_string();
		} break;
		case 8: {
			ss << this->sikaku_image;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_sikaku_obj : public COdbcTable {
public:
	CT_t_sikaku_obj() : COdbcTable() {
		m_TableName = "t_sikaku_obj";
		m_SqlSELECT = "SELECT "
					  "sikaku010,"
					  "sikaku020,"
					  "sikaku030,"
					  "sikaku040,"
					  "sikaku050,"
					  "sikaku060,"
					  "sikaku070,"
					  "sikaku080,"
					  "sikaku_image"
					  " FROM t_sikaku_obj";
		m_SqlINSERT = "INSERT INTO t_sikaku_obj ("
					  "sikaku010,"
					  "sikaku020,"
					  "sikaku030,"
					  "sikaku040,"
					  "sikaku050,"
					  "sikaku060,"
					  "sikaku070,"
					  "sikaku080,"
					  "sikaku_image)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_sikaku_obj SET "
					  "sikaku010 = ?,"
					  "sikaku020 = ?,"
					  "sikaku030 = ?,"
					  "sikaku040 = ?,"
					  "sikaku050 = ?,"
					  "sikaku060 = ?,"
					  "sikaku070 = ?,"
					  "sikaku080 = ?,"
					  "sikaku_image = ?";

		m_SqlDELETE = "DELETE t_sikaku_obj ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_sikaku_obj", "sikaku010", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku_obj", "sikaku020", "2", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku_obj", "sikaku030", "3", "", "NO", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku_obj", "sikaku040", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku_obj", "sikaku050", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku_obj", "sikaku060", "6", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku_obj", "sikaku070", "7", "", "YES", "bit", "0", "0", "0", "0", "0", "",
					 "", 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku_obj", "sikaku080", "8", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sikaku_obj", "sikaku_image", "9", "", "YES", "image", "2147483647",
					 "2147483647", "0", "0", "0", "", "", 0, _unknown, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_sikaku_obj() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *sikaku040 = new char[511];
		char *sikaku050 = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_sikaku_obj rec;
				com->GetData(1, SQL_C_LONG, &rec.sikaku010, sizeof(rec.sikaku010), 0);
				com->GetData(2, SQL_C_LONG, &rec.sikaku020, sizeof(rec.sikaku020), 0);
				com->GetData(3, SQL_C_TYPE_TIMESTAMP, &rec.sikaku030, sizeof(rec.sikaku030), 0);
				memset(sikaku040, 0, 511);
				com->GetData(4, SQL_C_CHAR, sikaku040, 511, 0);
				rec.sikaku040 = (char *)sikaku040;
				memset(sikaku050, 0, 511);
				com->GetData(5, SQL_C_CHAR, sikaku050, 511, 0);
				rec.sikaku050 = (char *)sikaku050;
				com->GetData(6, SQL_C_LONG, &rec.sikaku060, sizeof(rec.sikaku060), 0);
				com->GetData(7, SQL_C_CHAR, &rec.sikaku070, sizeof(rec.sikaku070), 0);
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.sikaku080, sizeof(rec.sikaku080), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] sikaku040;
		delete[] sikaku050;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_sikaku_obj operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_sikaku_obj &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_sikaku_obj rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_sikaku_obj> m_Data;
};
class CR_t_SikakuImage : public COdbcRecord {
public:
	CR_t_SikakuImage() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_SikakuImage() {}

	void Initialize() {
		img_index = 0;
		img_syaincd = 0;
		img_shikakucd = 0;
		img_pass = "";
	}

public:
	SQLINTEGER img_index;
	SQLINTEGER img_syaincd;
	SQLINTEGER img_shikakucd;
	std::string img_pass;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->img_index;
		} break;
		case 1: {
			ss << this->img_syaincd;
		} break;
		case 2: {
			ss << this->img_shikakucd;
		} break;
		case 3: {
			ss << this->img_pass;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_SikakuImage : public COdbcTable {
public:
	CT_t_SikakuImage() : COdbcTable() {
		m_TableName = "t_SikakuImage";
		m_SqlSELECT = "SELECT "
					  "img_index,"
					  "img_syaincd,"
					  "img_shikakucd,"
					  "img_pass"
					  " FROM t_SikakuImage";
		m_SqlINSERT = "INSERT INTO t_SikakuImage ("
					  "img_index,"
					  "img_syaincd,"
					  "img_shikakucd,"
					  "img_pass)"
					  " VALUES ( ?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_SikakuImage SET "
					  "img_index = ?,"
					  "img_syaincd = ?,"
					  "img_shikakucd = ?,"
					  "img_pass = ?";

		m_SqlDELETE = "DELETE t_SikakuImage ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_SikakuImage", "img_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_SikakuImage", "img_syaincd", "2", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_SikakuImage", "img_shikakucd", "3", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_SikakuImage", "img_pass", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_SikakuImage() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *img_pass = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_SikakuImage rec;
				com->GetData(1, SQL_C_LONG, &rec.img_index, sizeof(rec.img_index), 0);
				com->GetData(2, SQL_C_LONG, &rec.img_syaincd, sizeof(rec.img_syaincd), 0);
				com->GetData(3, SQL_C_LONG, &rec.img_shikakucd, sizeof(rec.img_shikakucd), 0);
				memset(img_pass, 0, 511);
				com->GetData(4, SQL_C_CHAR, img_pass, 511, 0);
				rec.img_pass = (char *)img_pass;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] img_pass;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_SikakuImage operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_SikakuImage &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_SikakuImage rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_SikakuImage> m_Data;
};
class CR_t_simulation : public COdbcRecord {
public:
	CR_t_simulation() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_simulation() {}

	void Initialize() {
		sim_id = 0;
		sim_kouji = 0;
		sim_no = 0;
		sim_gyo = 0;
		sim_name = "";
		sim_kikaku = "";
		sim_suu = 0.0;
		sim_tani = "";
		memset(&sim_tanka, 0, sizeof(sim_tanka));
		sim_syukei = 0;
		memset(&sim_kingaku, 0, sizeof(sim_kingaku));
		sim_tekiyou = "";
		sim_rand = 0.0;
	}

public:
	SQLINTEGER sim_id;
	SQLINTEGER sim_kouji;
	SQLINTEGER sim_no;
	SQLINTEGER sim_gyo;
	std::string sim_name;
	std::string sim_kikaku;
	SQLFLOAT sim_suu;
	std::string sim_tani;
	SQL_NUMERIC_STRUCT sim_tanka;
	SQLINTEGER sim_syukei;
	SQL_NUMERIC_STRUCT sim_kingaku;
	std::string sim_tekiyou;
	SQLFLOAT sim_rand;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->sim_id;
		} break;
		case 1: {
			ss << this->sim_kouji;
		} break;
		case 2: {
			ss << this->sim_no;
		} break;
		case 3: {
			ss << this->sim_gyo;
		} break;
		case 4: {
			ss << this->sim_name;
		} break;
		case 5: {
			ss << this->sim_kikaku;
		} break;
		case 6: {
			ss << this->sim_suu;
		} break;
		case 7: {
			ss << this->sim_tani;
		} break;
		case 8: {
			ss << COdbcColumn::NumericToString(&this->sim_tanka);
		} break;
		case 9: {
			ss << this->sim_syukei;
		} break;
		case 10: {
			ss << COdbcColumn::NumericToString(&this->sim_kingaku);
		} break;
		case 11: {
			ss << this->sim_tekiyou;
		} break;
		case 12: {
			ss << this->sim_rand;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_simulation : public COdbcTable {
public:
	CT_t_simulation() : COdbcTable() {
		m_TableName = "t_simulation";
		m_SqlSELECT = "SELECT "
					  "sim_id,"
					  "sim_kouji,"
					  "sim_no,"
					  "sim_gyo,"
					  "sim_name,"
					  "sim_kikaku,"
					  "sim_suu,"
					  "sim_tani,"
					  "sim_tanka,"
					  "sim_syukei,"
					  "sim_kingaku,"
					  "sim_tekiyou,"
					  "sim_rand"
					  " FROM t_simulation";
		m_SqlINSERT = "INSERT INTO t_simulation ("
					  "sim_id,"
					  "sim_kouji,"
					  "sim_no,"
					  "sim_gyo,"
					  "sim_name,"
					  "sim_kikaku,"
					  "sim_suu,"
					  "sim_tani,"
					  "sim_tanka,"
					  "sim_syukei,"
					  "sim_kingaku,"
					  "sim_tekiyou,"
					  "sim_rand)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_simulation SET "
					  "sim_id = ?,"
					  "sim_kouji = ?,"
					  "sim_no = ?,"
					  "sim_gyo = ?,"
					  "sim_name = ?,"
					  "sim_kikaku = ?,"
					  "sim_suu = ?,"
					  "sim_tani = ?,"
					  "sim_tanka = ?,"
					  "sim_syukei = ?,"
					  "sim_kingaku = ?,"
					  "sim_tekiyou = ?,"
					  "sim_rand = ?";

		m_SqlDELETE = "DELETE t_simulation ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_kouji", "2", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_no", "3", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_gyo", "4", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_name", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_kikaku", "6", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_suu", "7", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_tani", "8", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_tanka", "9", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_syukei", "10", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_kingaku", "11", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_tekiyou", "12", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_simulation", "sim_rand", "13", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_simulation() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *sim_name = new char[511];
		char *sim_kikaku = new char[511];
		char *sim_tani = new char[101];
		char *sim_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_simulation rec;
				com->GetData(1, SQL_C_LONG, &rec.sim_id, sizeof(rec.sim_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.sim_kouji, sizeof(rec.sim_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.sim_no, sizeof(rec.sim_no), 0);
				com->GetData(4, SQL_C_LONG, &rec.sim_gyo, sizeof(rec.sim_gyo), 0);
				memset(sim_name, 0, 511);
				com->GetData(5, SQL_C_CHAR, sim_name, 511, 0);
				rec.sim_name = (char *)sim_name;
				memset(sim_kikaku, 0, 511);
				com->GetData(6, SQL_C_CHAR, sim_kikaku, 511, 0);
				rec.sim_kikaku = (char *)sim_kikaku;
				com->GetData(7, SQL_C_DOUBLE, &rec.sim_suu, sizeof(rec.sim_suu), 0);
				memset(sim_tani, 0, 101);
				com->GetData(8, SQL_C_CHAR, sim_tani, 101, 0);
				rec.sim_tani = (char *)sim_tani;
				com->GetData(9, SQL_C_NUMERIC, &rec.sim_tanka, sizeof(rec.sim_tanka), 0);
				com->GetData(10, SQL_C_LONG, &rec.sim_syukei, sizeof(rec.sim_syukei), 0);
				com->GetData(11, SQL_C_NUMERIC, &rec.sim_kingaku, sizeof(rec.sim_kingaku), 0);
				memset(sim_tekiyou, 0, 511);
				com->GetData(12, SQL_C_CHAR, sim_tekiyou, 511, 0);
				rec.sim_tekiyou = (char *)sim_tekiyou;
				com->GetData(13, SQL_C_DOUBLE, &rec.sim_rand, sizeof(rec.sim_rand), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] sim_name;
		delete[] sim_kikaku;
		delete[] sim_tani;
		delete[] sim_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_simulation operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_simulation &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_simulation rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_simulation> m_Data;
};
class CR_t_sintyoku : public COdbcRecord {
public:
	CR_t_sintyoku() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_sintyoku() {}

	void Initialize() {
		sin_index = 0;
		sin_kouji = 0;
		sin_ritsu1 = 0.0;
		sin_ritsu2 = 0.0;
		sin_ritsu3 = 0.0;
	}

public:
	SQLINTEGER sin_index;
	SQLINTEGER sin_kouji;
	TIMESTAMP_STRUCT sin_date;
	SQLFLOAT sin_ritsu1;
	SQLFLOAT sin_ritsu2;
	SQLFLOAT sin_ritsu3;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->sin_index;
		} break;
		case 1: {
			ss << this->sin_kouji;
		} break;
		case 2: {
			COdbcDateTime date(&this->sin_date);
			ss << date.to_string();
		} break;
		case 3: {
			ss << this->sin_ritsu1;
		} break;
		case 4: {
			ss << this->sin_ritsu2;
		} break;
		case 5: {
			ss << this->sin_ritsu3;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_sintyoku : public COdbcTable {
public:
	CT_t_sintyoku() : COdbcTable() {
		m_TableName = "t_sintyoku";
		m_SqlSELECT = "SELECT "
					  "sin_index,"
					  "sin_kouji,"
					  "sin_date,"
					  "sin_ritsu1,"
					  "sin_ritsu2,"
					  "sin_ritsu3"
					  " FROM t_sintyoku";
		m_SqlINSERT = "INSERT INTO t_sintyoku ("
					  "sin_index,"
					  "sin_kouji,"
					  "sin_date,"
					  "sin_ritsu1,"
					  "sin_ritsu2,"
					  "sin_ritsu3)"
					  " VALUES ( ?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_sintyoku SET "
					  "sin_index = ?,"
					  "sin_kouji = ?,"
					  "sin_date = ?,"
					  "sin_ritsu1 = ?,"
					  "sin_ritsu2 = ?,"
					  "sin_ritsu3 = ?";

		m_SqlDELETE = "DELETE t_sintyoku ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_sintyoku", "sin_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sintyoku", "sin_kouji", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sintyoku", "sin_date", "3", "", "NO", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sintyoku", "sin_ritsu1", "4", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sintyoku", "sin_ritsu2", "5", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sintyoku", "sin_ritsu3", "6", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_sintyoku() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_sintyoku rec;
				com->GetData(1, SQL_C_LONG, &rec.sin_index, sizeof(rec.sin_index), 0);
				com->GetData(2, SQL_C_LONG, &rec.sin_kouji, sizeof(rec.sin_kouji), 0);
				com->GetData(3, SQL_C_TYPE_TIMESTAMP, &rec.sin_date, sizeof(rec.sin_date), 0);
				com->GetData(4, SQL_C_DOUBLE, &rec.sin_ritsu1, sizeof(rec.sin_ritsu1), 0);
				com->GetData(5, SQL_C_DOUBLE, &rec.sin_ritsu2, sizeof(rec.sin_ritsu2), 0);
				com->GetData(6, SQL_C_DOUBLE, &rec.sin_ritsu3, sizeof(rec.sin_ritsu3), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_sintyoku operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_sintyoku &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_sintyoku rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_sintyoku> m_Data;
};
class CR_t_sitaukeoi : public COdbcRecord {
public:
	CR_t_sitaukeoi() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_sitaukeoi() {}

	void Initialize() {
		sub_id = 0;
		sub_kouji = 0;
		sub_gyo = 0;
		sub_name = "";
		sub_no = "";
		sub_basyo = "";
		sub_hatcd = 0;
		sub_hatnm = "";
		sub_hatzip = "";
		sub_hataddr1 = "";
		sub_hataddr2 = "";
		sub_hatpos = "";
		sub_hatrep = "";
		sub_hattel = "";
		sub_hatfax = "";
		sub_zyucd = 0;
		sub_zyunm = "";
		sub_zyuzip = "";
		sub_zyuaddr1 = "";
		sub_zyuaddr2 = "";
		sub_zyupos = "";
		sub_zyurep = "";
		sub_zyutel = "";
		sub_zyufax = "";
		memset(&sub_kingaku, 0, sizeof(sub_kingaku));
		memset(&sub_henkou, 0, sizeof(sub_henkou));
		memset(&sub_syouhizei, 0, sizeof(sub_syouhizei));
		memset(&sub_goukei, 0, sizeof(sub_goukei));
		sub_mhatcd = 0;
		sub_mhat020 = "";
		sub_mhat030 = "";
		sub_mhat040 = "";
		sub_mhat050 = "";
	}

public:
	SQLINTEGER sub_id;
	SQLINTEGER sub_kouji;
	SQLINTEGER sub_gyo;
	std::string sub_name;
	std::string sub_no;
	std::string sub_basyo;
	SQLINTEGER sub_hatcd;
	std::string sub_hatnm;
	std::string sub_hatzip;
	std::string sub_hataddr1;
	std::string sub_hataddr2;
	std::string sub_hatpos;
	std::string sub_hatrep;
	std::string sub_hattel;
	std::string sub_hatfax;
	SQLINTEGER sub_zyucd;
	std::string sub_zyunm;
	std::string sub_zyuzip;
	std::string sub_zyuaddr1;
	std::string sub_zyuaddr2;
	std::string sub_zyupos;
	std::string sub_zyurep;
	std::string sub_zyutel;
	std::string sub_zyufax;
	TIMESTAMP_STRUCT sub_kaisi;
	TIMESTAMP_STRUCT sub_owari;
	TIMESTAMP_STRUCT sub_keiyaku;
	SQL_NUMERIC_STRUCT sub_kingaku;
	SQL_NUMERIC_STRUCT sub_henkou;
	SQL_NUMERIC_STRUCT sub_syouhizei;
	SQL_NUMERIC_STRUCT sub_goukei;
	SQLINTEGER sub_mhatcd;
	std::string sub_mhat020;
	std::string sub_mhat030;
	std::string sub_mhat040;
	std::string sub_mhat050;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->sub_id;
		} break;
		case 1: {
			ss << this->sub_kouji;
		} break;
		case 2: {
			ss << this->sub_gyo;
		} break;
		case 3: {
			ss << this->sub_name;
		} break;
		case 4: {
			ss << this->sub_no;
		} break;
		case 5: {
			ss << this->sub_basyo;
		} break;
		case 6: {
			ss << this->sub_hatcd;
		} break;
		case 7: {
			ss << this->sub_hatnm;
		} break;
		case 8: {
			ss << this->sub_hatzip;
		} break;
		case 9: {
			ss << this->sub_hataddr1;
		} break;
		case 10: {
			ss << this->sub_hataddr2;
		} break;
		case 11: {
			ss << this->sub_hatpos;
		} break;
		case 12: {
			ss << this->sub_hatrep;
		} break;
		case 13: {
			ss << this->sub_hattel;
		} break;
		case 14: {
			ss << this->sub_hatfax;
		} break;
		case 15: {
			ss << this->sub_zyucd;
		} break;
		case 16: {
			ss << this->sub_zyunm;
		} break;
		case 17: {
			ss << this->sub_zyuzip;
		} break;
		case 18: {
			ss << this->sub_zyuaddr1;
		} break;
		case 19: {
			ss << this->sub_zyuaddr2;
		} break;
		case 20: {
			ss << this->sub_zyupos;
		} break;
		case 21: {
			ss << this->sub_zyurep;
		} break;
		case 22: {
			ss << this->sub_zyutel;
		} break;
		case 23: {
			ss << this->sub_zyufax;
		} break;
		case 24: {
			COdbcDateTime date(&this->sub_kaisi);
			ss << date.to_string();
		} break;
		case 25: {
			COdbcDateTime date(&this->sub_owari);
			ss << date.to_string();
		} break;
		case 26: {
			COdbcDateTime date(&this->sub_keiyaku);
			ss << date.to_string();
		} break;
		case 27: {
			ss << COdbcColumn::NumericToString(&this->sub_kingaku);
		} break;
		case 28: {
			ss << COdbcColumn::NumericToString(&this->sub_henkou);
		} break;
		case 29: {
			ss << COdbcColumn::NumericToString(&this->sub_syouhizei);
		} break;
		case 30: {
			ss << COdbcColumn::NumericToString(&this->sub_goukei);
		} break;
		case 31: {
			ss << this->sub_mhatcd;
		} break;
		case 32: {
			ss << this->sub_mhat020;
		} break;
		case 33: {
			ss << this->sub_mhat030;
		} break;
		case 34: {
			ss << this->sub_mhat040;
		} break;
		case 35: {
			ss << this->sub_mhat050;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_sitaukeoi : public COdbcTable {
public:
	CT_t_sitaukeoi() : COdbcTable() {
		m_TableName = "t_sitaukeoi";
		m_SqlSELECT = "SELECT "
					  "sub_id,"
					  "sub_kouji,"
					  "sub_gyo,"
					  "sub_name,"
					  "sub_no,"
					  "sub_basyo,"
					  "sub_hatcd,"
					  "sub_hatnm,"
					  "sub_hatzip,"
					  "sub_hataddr1,"
					  "sub_hataddr2,"
					  "sub_hatpos,"
					  "sub_hatrep,"
					  "sub_hattel,"
					  "sub_hatfax,"
					  "sub_zyucd,"
					  "sub_zyunm,"
					  "sub_zyuzip,"
					  "sub_zyuaddr1,"
					  "sub_zyuaddr2,"
					  "sub_zyupos,"
					  "sub_zyurep,"
					  "sub_zyutel,"
					  "sub_zyufax,"
					  "sub_kaisi,"
					  "sub_owari,"
					  "sub_keiyaku,"
					  "sub_kingaku,"
					  "sub_henkou,"
					  "sub_syouhizei,"
					  "sub_goukei,"
					  "sub_mhatcd,"
					  "sub_mhat020,"
					  "sub_mhat030,"
					  "sub_mhat040,"
					  "sub_mhat050"
					  " FROM t_sitaukeoi";
		m_SqlINSERT = "INSERT INTO t_sitaukeoi ("
					  "sub_id,"
					  "sub_kouji,"
					  "sub_gyo,"
					  "sub_name,"
					  "sub_no,"
					  "sub_basyo,"
					  "sub_hatcd,"
					  "sub_hatnm,"
					  "sub_hatzip,"
					  "sub_hataddr1,"
					  "sub_hataddr2,"
					  "sub_hatpos,"
					  "sub_hatrep,"
					  "sub_hattel,"
					  "sub_hatfax,"
					  "sub_zyucd,"
					  "sub_zyunm,"
					  "sub_zyuzip,"
					  "sub_zyuaddr1,"
					  "sub_zyuaddr2,"
					  "sub_zyupos,"
					  "sub_zyurep,"
					  "sub_zyutel,"
					  "sub_zyufax,"
					  "sub_kaisi,"
					  "sub_owari,"
					  "sub_keiyaku,"
					  "sub_kingaku,"
					  "sub_henkou,"
					  "sub_syouhizei,"
					  "sub_goukei,"
					  "sub_mhatcd,"
					  "sub_mhat020,"
					  "sub_mhat030,"
					  "sub_mhat040,"
					  "sub_mhat050)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_sitaukeoi SET "
					  "sub_id = ?,"
					  "sub_kouji = ?,"
					  "sub_gyo = ?,"
					  "sub_name = ?,"
					  "sub_no = ?,"
					  "sub_basyo = ?,"
					  "sub_hatcd = ?,"
					  "sub_hatnm = ?,"
					  "sub_hatzip = ?,"
					  "sub_hataddr1 = ?,"
					  "sub_hataddr2 = ?,"
					  "sub_hatpos = ?,"
					  "sub_hatrep = ?,"
					  "sub_hattel = ?,"
					  "sub_hatfax = ?,"
					  "sub_zyucd = ?,"
					  "sub_zyunm = ?,"
					  "sub_zyuzip = ?,"
					  "sub_zyuaddr1 = ?,"
					  "sub_zyuaddr2 = ?,"
					  "sub_zyupos = ?,"
					  "sub_zyurep = ?,"
					  "sub_zyutel = ?,"
					  "sub_zyufax = ?,"
					  "sub_kaisi = ?,"
					  "sub_owari = ?,"
					  "sub_keiyaku = ?,"
					  "sub_kingaku = ?,"
					  "sub_henkou = ?,"
					  "sub_syouhizei = ?,"
					  "sub_goukei = ?,"
					  "sub_mhatcd = ?,"
					  "sub_mhat020 = ?,"
					  "sub_mhat030 = ?,"
					  "sub_mhat040 = ?,"
					  "sub_mhat050 = ?";

		m_SqlDELETE = "DELETE t_sitaukeoi ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_name", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_no", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_basyo", "6", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_hatcd", "7", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_hatnm", "8", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_hatzip", "9", "", "YES", "nvarchar", "10", "20", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_hataddr1", "10", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_hataddr2", "11", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_hatpos", "12", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_hatrep", "13", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_hattel", "14", "", "YES", "nvarchar", "20", "40", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_hatfax", "15", "", "YES", "nvarchar", "20", "40", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_zyucd", "16", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_zyunm", "17", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_zyuzip", "18", "", "YES", "nvarchar", "10", "20", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_zyuaddr1", "19", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_zyuaddr2", "20", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_zyupos", "21", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_zyurep", "22", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_zyutel", "23", "", "YES", "nvarchar", "20", "40", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_zyufax", "24", "", "YES", "nvarchar", "20", "40", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_kaisi", "25", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_owari", "26", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_keiyaku", "27", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_kingaku", "28", "", "YES", "decimal", "0", "0", "18", "0",
					 "0", "", "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_henkou", "29", "", "YES", "decimal", "0", "0", "18", "0", "0",
					 "", "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_syouhizei", "30", "", "YES", "decimal", "0", "0", "18", "0",
					 "0", "", "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_goukei", "31", "", "YES", "decimal", "0", "0", "18", "0", "0",
					 "", "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_mhatcd", "32", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_mhat020", "33", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_mhat030", "34", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_mhat040", "35", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_sitaukeoi", "sub_mhat050", "36", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_sitaukeoi() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *sub_name = new char[511];
		char *sub_no = new char[101];
		char *sub_basyo = new char[511];
		char *sub_hatnm = new char[511];
		char *sub_hatzip = new char[21];
		char *sub_hataddr1 = new char[511];
		char *sub_hataddr2 = new char[511];
		char *sub_hatpos = new char[101];
		char *sub_hatrep = new char[101];
		char *sub_hattel = new char[41];
		char *sub_hatfax = new char[41];
		char *sub_zyunm = new char[511];
		char *sub_zyuzip = new char[21];
		char *sub_zyuaddr1 = new char[511];
		char *sub_zyuaddr2 = new char[511];
		char *sub_zyupos = new char[101];
		char *sub_zyurep = new char[101];
		char *sub_zyutel = new char[41];
		char *sub_zyufax = new char[41];
		char *sub_mhat020 = new char[101];
		char *sub_mhat030 = new char[101];
		char *sub_mhat040 = new char[101];
		char *sub_mhat050 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_sitaukeoi rec;
				com->GetData(1, SQL_C_LONG, &rec.sub_id, sizeof(rec.sub_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.sub_kouji, sizeof(rec.sub_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.sub_gyo, sizeof(rec.sub_gyo), 0);
				memset(sub_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, sub_name, 511, 0);
				rec.sub_name = (char *)sub_name;
				memset(sub_no, 0, 101);
				com->GetData(5, SQL_C_CHAR, sub_no, 101, 0);
				rec.sub_no = (char *)sub_no;
				memset(sub_basyo, 0, 511);
				com->GetData(6, SQL_C_CHAR, sub_basyo, 511, 0);
				rec.sub_basyo = (char *)sub_basyo;
				com->GetData(7, SQL_C_LONG, &rec.sub_hatcd, sizeof(rec.sub_hatcd), 0);
				memset(sub_hatnm, 0, 511);
				com->GetData(8, SQL_C_CHAR, sub_hatnm, 511, 0);
				rec.sub_hatnm = (char *)sub_hatnm;
				memset(sub_hatzip, 0, 21);
				com->GetData(9, SQL_C_CHAR, sub_hatzip, 21, 0);
				rec.sub_hatzip = (char *)sub_hatzip;
				memset(sub_hataddr1, 0, 511);
				com->GetData(10, SQL_C_CHAR, sub_hataddr1, 511, 0);
				rec.sub_hataddr1 = (char *)sub_hataddr1;
				memset(sub_hataddr2, 0, 511);
				com->GetData(11, SQL_C_CHAR, sub_hataddr2, 511, 0);
				rec.sub_hataddr2 = (char *)sub_hataddr2;
				memset(sub_hatpos, 0, 101);
				com->GetData(12, SQL_C_CHAR, sub_hatpos, 101, 0);
				rec.sub_hatpos = (char *)sub_hatpos;
				memset(sub_hatrep, 0, 101);
				com->GetData(13, SQL_C_CHAR, sub_hatrep, 101, 0);
				rec.sub_hatrep = (char *)sub_hatrep;
				memset(sub_hattel, 0, 41);
				com->GetData(14, SQL_C_CHAR, sub_hattel, 41, 0);
				rec.sub_hattel = (char *)sub_hattel;
				memset(sub_hatfax, 0, 41);
				com->GetData(15, SQL_C_CHAR, sub_hatfax, 41, 0);
				rec.sub_hatfax = (char *)sub_hatfax;
				com->GetData(16, SQL_C_LONG, &rec.sub_zyucd, sizeof(rec.sub_zyucd), 0);
				memset(sub_zyunm, 0, 511);
				com->GetData(17, SQL_C_CHAR, sub_zyunm, 511, 0);
				rec.sub_zyunm = (char *)sub_zyunm;
				memset(sub_zyuzip, 0, 21);
				com->GetData(18, SQL_C_CHAR, sub_zyuzip, 21, 0);
				rec.sub_zyuzip = (char *)sub_zyuzip;
				memset(sub_zyuaddr1, 0, 511);
				com->GetData(19, SQL_C_CHAR, sub_zyuaddr1, 511, 0);
				rec.sub_zyuaddr1 = (char *)sub_zyuaddr1;
				memset(sub_zyuaddr2, 0, 511);
				com->GetData(20, SQL_C_CHAR, sub_zyuaddr2, 511, 0);
				rec.sub_zyuaddr2 = (char *)sub_zyuaddr2;
				memset(sub_zyupos, 0, 101);
				com->GetData(21, SQL_C_CHAR, sub_zyupos, 101, 0);
				rec.sub_zyupos = (char *)sub_zyupos;
				memset(sub_zyurep, 0, 101);
				com->GetData(22, SQL_C_CHAR, sub_zyurep, 101, 0);
				rec.sub_zyurep = (char *)sub_zyurep;
				memset(sub_zyutel, 0, 41);
				com->GetData(23, SQL_C_CHAR, sub_zyutel, 41, 0);
				rec.sub_zyutel = (char *)sub_zyutel;
				memset(sub_zyufax, 0, 41);
				com->GetData(24, SQL_C_CHAR, sub_zyufax, 41, 0);
				rec.sub_zyufax = (char *)sub_zyufax;
				com->GetData(25, SQL_C_TYPE_TIMESTAMP, &rec.sub_kaisi, sizeof(rec.sub_kaisi), 0);
				com->GetData(26, SQL_C_TYPE_TIMESTAMP, &rec.sub_owari, sizeof(rec.sub_owari), 0);
				com->GetData(27, SQL_C_TYPE_TIMESTAMP, &rec.sub_keiyaku, sizeof(rec.sub_keiyaku), 0);
				com->GetData(28, SQL_C_NUMERIC, &rec.sub_kingaku, sizeof(rec.sub_kingaku), 0);
				com->GetData(29, SQL_C_NUMERIC, &rec.sub_henkou, sizeof(rec.sub_henkou), 0);
				com->GetData(30, SQL_C_NUMERIC, &rec.sub_syouhizei, sizeof(rec.sub_syouhizei), 0);
				com->GetData(31, SQL_C_NUMERIC, &rec.sub_goukei, sizeof(rec.sub_goukei), 0);
				com->GetData(32, SQL_C_LONG, &rec.sub_mhatcd, sizeof(rec.sub_mhatcd), 0);
				memset(sub_mhat020, 0, 101);
				com->GetData(33, SQL_C_CHAR, sub_mhat020, 101, 0);
				rec.sub_mhat020 = (char *)sub_mhat020;
				memset(sub_mhat030, 0, 101);
				com->GetData(34, SQL_C_CHAR, sub_mhat030, 101, 0);
				rec.sub_mhat030 = (char *)sub_mhat030;
				memset(sub_mhat040, 0, 101);
				com->GetData(35, SQL_C_CHAR, sub_mhat040, 101, 0);
				rec.sub_mhat040 = (char *)sub_mhat040;
				memset(sub_mhat050, 0, 101);
				com->GetData(36, SQL_C_CHAR, sub_mhat050, 101, 0);
				rec.sub_mhat050 = (char *)sub_mhat050;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] sub_name;
		delete[] sub_no;
		delete[] sub_basyo;
		delete[] sub_hatnm;
		delete[] sub_hatzip;
		delete[] sub_hataddr1;
		delete[] sub_hataddr2;
		delete[] sub_hatpos;
		delete[] sub_hatrep;
		delete[] sub_hattel;
		delete[] sub_hatfax;
		delete[] sub_zyunm;
		delete[] sub_zyuzip;
		delete[] sub_zyuaddr1;
		delete[] sub_zyuaddr2;
		delete[] sub_zyupos;
		delete[] sub_zyurep;
		delete[] sub_zyutel;
		delete[] sub_zyufax;
		delete[] sub_mhat020;
		delete[] sub_mhat030;
		delete[] sub_mhat040;
		delete[] sub_mhat050;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_sitaukeoi operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_sitaukeoi &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_sitaukeoi rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_sitaukeoi> m_Data;
};
class CR_t_syain : public COdbcRecord {
public:
	CR_t_syain() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_syain() {}

	void Initialize() {
		MBR010 = 0;
		MBR020 = "";
		MBR030 = 0.0;
		MBR040 = 0.0;
		MBR050 = 0.0;
		MBR060 = "";
		MBR070 = "";
		MBR090 = "";
		MBR100 = "";
		MBR110 = "";
		MBR120 = "";
		MBR130 = "";
	}

public:
	SQLINTEGER MBR010;
	std::string MBR020;
	SQLFLOAT MBR030;
	SQLFLOAT MBR040;
	SQLFLOAT MBR050;
	std::string MBR060;
	std::string MBR070;
	TIMESTAMP_STRUCT MBR080;
	std::string MBR090;
	std::string MBR100;
	std::string MBR110;
	std::string MBR120;
	std::string MBR130;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->MBR010;
		} break;
		case 1: {
			ss << this->MBR020;
		} break;
		case 2: {
			ss << this->MBR030;
		} break;
		case 3: {
			ss << this->MBR040;
		} break;
		case 4: {
			ss << this->MBR050;
		} break;
		case 5: {
			ss << this->MBR060;
		} break;
		case 6: {
			ss << this->MBR070;
		} break;
		case 7: {
			COdbcDateTime date(&this->MBR080);
			ss << date.to_string();
		} break;
		case 8: {
			ss << this->MBR090;
		} break;
		case 9: {
			ss << this->MBR100;
		} break;
		case 10: {
			ss << this->MBR110;
		} break;
		case 11: {
			ss << this->MBR120;
		} break;
		case 12: {
			ss << this->MBR130;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_syain : public COdbcTable {
public:
	CT_t_syain() : COdbcTable() {
		m_TableName = "t_syain";
		m_SqlSELECT = "SELECT "
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130"
					  " FROM t_syain";
		m_SqlINSERT = "INSERT INTO t_syain ("
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_syain SET "
					  "MBR010 = ?,"
					  "MBR020 = ?,"
					  "MBR030 = ?,"
					  "MBR040 = ?,"
					  "MBR050 = ?,"
					  "MBR060 = ?,"
					  "MBR070 = ?,"
					  "MBR080 = ?,"
					  "MBR090 = ?,"
					  "MBR100 = ?,"
					  "MBR110 = ?,"
					  "MBR120 = ?,"
					  "MBR130 = ?";

		m_SqlDELETE = "DELETE t_syain ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_syain", "MBR010", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR020", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR030", "3", "", "YES", "float", "0", "0", "53", "0", "0", "", "", 0,
					 _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR040", "4", "", "YES", "float", "0", "0", "53", "0", "0", "", "", 0,
					 _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR050", "5", "", "YES", "float", "0", "0", "53", "0", "0", "", "", 0,
					 _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR060", "6", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR070", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR080", "8", "", "YES", "smalldatetime", "0", "0", "0", "0", "0", "",
					 "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR090", "9", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR100", "10", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR110", "11", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR120", "12", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syain", "MBR130", "13", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_syain() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *MBR020 = new char[101];
		char *MBR060 = new char[511];
		char *MBR070 = new char[511];
		char *MBR090 = new char[511];
		char *MBR100 = new char[511];
		char *MBR110 = new char[511];
		char *MBR120 = new char[41];
		char *MBR130 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_syain rec;
				com->GetData(1, SQL_C_LONG, &rec.MBR010, sizeof(rec.MBR010), 0);
				memset(MBR020, 0, 101);
				com->GetData(2, SQL_C_CHAR, MBR020, 101, 0);
				rec.MBR020 = (char *)MBR020;
				com->GetData(3, SQL_C_DOUBLE, &rec.MBR030, sizeof(rec.MBR030), 0);
				com->GetData(4, SQL_C_DOUBLE, &rec.MBR040, sizeof(rec.MBR040), 0);
				com->GetData(5, SQL_C_DOUBLE, &rec.MBR050, sizeof(rec.MBR050), 0);
				memset(MBR060, 0, 511);
				com->GetData(6, SQL_C_CHAR, MBR060, 511, 0);
				rec.MBR060 = (char *)MBR060;
				memset(MBR070, 0, 511);
				com->GetData(7, SQL_C_CHAR, MBR070, 511, 0);
				rec.MBR070 = (char *)MBR070;
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.MBR080, sizeof(rec.MBR080), 0);
				memset(MBR090, 0, 511);
				com->GetData(9, SQL_C_CHAR, MBR090, 511, 0);
				rec.MBR090 = (char *)MBR090;
				memset(MBR100, 0, 511);
				com->GetData(10, SQL_C_CHAR, MBR100, 511, 0);
				rec.MBR100 = (char *)MBR100;
				memset(MBR110, 0, 511);
				com->GetData(11, SQL_C_CHAR, MBR110, 511, 0);
				rec.MBR110 = (char *)MBR110;
				memset(MBR120, 0, 41);
				com->GetData(12, SQL_C_CHAR, MBR120, 41, 0);
				rec.MBR120 = (char *)MBR120;
				memset(MBR130, 0, 101);
				com->GetData(13, SQL_C_CHAR, MBR130, 101, 0);
				rec.MBR130 = (char *)MBR130;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] MBR020;
		delete[] MBR060;
		delete[] MBR070;
		delete[] MBR090;
		delete[] MBR100;
		delete[] MBR110;
		delete[] MBR120;
		delete[] MBR130;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_syain operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_syain &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_syain rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_syain> m_Data;
};
class CR_t_syokureki : public COdbcRecord {
public:
	CR_t_syokureki() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_syokureki() {}

	void Initialize() {
		syoku010 = 0;
		syoku020 = 0;
		syoku050 = "";
		syoku060 = "";
		syoku070 = 0;
	}

public:
	SQLINTEGER syoku010;
	SQLINTEGER syoku020;
	TIMESTAMP_STRUCT syoku040;
	std::string syoku050;
	std::string syoku060;
	SQLINTEGER syoku070;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->syoku010;
		} break;
		case 1: {
			ss << this->syoku020;
		} break;
		case 2: {
			COdbcDateTime date(&this->syoku040);
			ss << date.to_string();
		} break;
		case 3: {
			ss << this->syoku050;
		} break;
		case 4: {
			ss << this->syoku060;
		} break;
		case 5: {
			ss << this->syoku070;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_syokureki : public COdbcTable {
public:
	CT_t_syokureki() : COdbcTable() {
		m_TableName = "t_syokureki";
		m_SqlSELECT = "SELECT "
					  "syoku010,"
					  "syoku020,"
					  "syoku040,"
					  "syoku050,"
					  "syoku060,"
					  "syoku070"
					  " FROM t_syokureki";
		m_SqlINSERT = "INSERT INTO t_syokureki ("
					  "syoku010,"
					  "syoku020,"
					  "syoku040,"
					  "syoku050,"
					  "syoku060,"
					  "syoku070)"
					  " VALUES ( ?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_syokureki SET "
					  "syoku010 = ?,"
					  "syoku020 = ?,"
					  "syoku040 = ?,"
					  "syoku050 = ?,"
					  "syoku060 = ?,"
					  "syoku070 = ?";

		m_SqlDELETE = "DELETE t_syokureki ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_syokureki", "syoku010", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syokureki", "syoku020", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syokureki", "syoku040", "3", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syokureki", "syoku050", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syokureki", "syoku060", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_syokureki", "syoku070", "6", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_syokureki() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *syoku050 = new char[511];
		char *syoku060 = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_syokureki rec;
				com->GetData(1, SQL_C_LONG, &rec.syoku010, sizeof(rec.syoku010), 0);
				com->GetData(2, SQL_C_LONG, &rec.syoku020, sizeof(rec.syoku020), 0);
				com->GetData(3, SQL_C_TYPE_TIMESTAMP, &rec.syoku040, sizeof(rec.syoku040), 0);
				memset(syoku050, 0, 511);
				com->GetData(4, SQL_C_CHAR, syoku050, 511, 0);
				rec.syoku050 = (char *)syoku050;
				memset(syoku060, 0, 511);
				com->GetData(5, SQL_C_CHAR, syoku060, 511, 0);
				rec.syoku060 = (char *)syoku060;
				com->GetData(6, SQL_C_LONG, &rec.syoku070, sizeof(rec.syoku070), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] syoku050;
		delete[] syoku060;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_syokureki operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_syokureki &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_syokureki rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_syokureki> m_Data;
};
class CR_t_taikei : public COdbcRecord {
public:
	CR_t_taikei() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_taikei() {}

	void Initialize() {
		tk_key = "";
		tk_kubun = 0;
		tk_kousyu = 0;
		tk_syubetsu = 0;
		tk_saibetsu = 0;
		tk_kikaku = 0;
		tk_mname = "";
		tk_kname = "";
		tk_tani = "";
		tk_tekiyou = "";
	}

public:
	std::string tk_key;
	SQLINTEGER tk_kubun;
	SQLINTEGER tk_kousyu;
	SQLINTEGER tk_syubetsu;
	SQLINTEGER tk_saibetsu;
	SQLINTEGER tk_kikaku;
	std::string tk_mname;
	std::string tk_kname;
	std::string tk_tani;
	std::string tk_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->tk_key;
		} break;
		case 1: {
			ss << this->tk_kubun;
		} break;
		case 2: {
			ss << this->tk_kousyu;
		} break;
		case 3: {
			ss << this->tk_syubetsu;
		} break;
		case 4: {
			ss << this->tk_saibetsu;
		} break;
		case 5: {
			ss << this->tk_kikaku;
		} break;
		case 6: {
			ss << this->tk_mname;
		} break;
		case 7: {
			ss << this->tk_kname;
		} break;
		case 8: {
			ss << this->tk_tani;
		} break;
		case 9: {
			ss << this->tk_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_taikei : public COdbcTable {
public:
	CT_t_taikei() : COdbcTable() {
		m_TableName = "t_taikei";
		m_SqlSELECT = "SELECT "
					  "tk_key,"
					  "tk_kubun,"
					  "tk_kousyu,"
					  "tk_syubetsu,"
					  "tk_saibetsu,"
					  "tk_kikaku,"
					  "tk_mname,"
					  "tk_kname,"
					  "tk_tani,"
					  "tk_tekiyou"
					  " FROM t_taikei";
		m_SqlINSERT = "INSERT INTO t_taikei ("
					  "tk_key,"
					  "tk_kubun,"
					  "tk_kousyu,"
					  "tk_syubetsu,"
					  "tk_saibetsu,"
					  "tk_kikaku,"
					  "tk_mname,"
					  "tk_kname,"
					  "tk_tani,"
					  "tk_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_taikei SET "
					  "tk_key = ?,"
					  "tk_kubun = ?,"
					  "tk_kousyu = ?,"
					  "tk_syubetsu = ?,"
					  "tk_saibetsu = ?,"
					  "tk_kikaku = ?,"
					  "tk_mname = ?,"
					  "tk_kname = ?,"
					  "tk_tani = ?,"
					  "tk_tekiyou = ?";

		m_SqlDELETE = "DELETE t_taikei ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_key", "1", "", "NO", "char", "21", "21", "0", "0", "0", "cp932",
					 "Japanese_CI_AS", 0, _char, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_kubun", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_kousyu", "3", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_syubetsu", "4", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_saibetsu", "5", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_kikaku", "6", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_mname", "7", "", "NO", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_kname", "8", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_tani", "9", "", "YES", "varchar", "50", "50", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_taikei", "tk_tekiyou", "10", "", "YES", "varchar", "50", "50", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_taikei() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *tk_key = new char[22];
		char *tk_mname = new char[256];
		char *tk_kname = new char[256];
		char *tk_tani = new char[51];
		char *tk_tekiyou = new char[51];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_taikei rec;
				memset(tk_key, 0, 22);
				com->GetData(1, SQL_C_CHAR, tk_key, 22, 0);
				rec.tk_key = (char *)tk_key;
				com->GetData(2, SQL_C_LONG, &rec.tk_kubun, sizeof(rec.tk_kubun), 0);
				com->GetData(3, SQL_C_LONG, &rec.tk_kousyu, sizeof(rec.tk_kousyu), 0);
				com->GetData(4, SQL_C_LONG, &rec.tk_syubetsu, sizeof(rec.tk_syubetsu), 0);
				com->GetData(5, SQL_C_LONG, &rec.tk_saibetsu, sizeof(rec.tk_saibetsu), 0);
				com->GetData(6, SQL_C_LONG, &rec.tk_kikaku, sizeof(rec.tk_kikaku), 0);
				memset(tk_mname, 0, 256);
				com->GetData(7, SQL_C_CHAR, tk_mname, 256, 0);
				rec.tk_mname = (char *)tk_mname;
				memset(tk_kname, 0, 256);
				com->GetData(8, SQL_C_CHAR, tk_kname, 256, 0);
				rec.tk_kname = (char *)tk_kname;
				memset(tk_tani, 0, 51);
				com->GetData(9, SQL_C_CHAR, tk_tani, 51, 0);
				rec.tk_tani = (char *)tk_tani;
				memset(tk_tekiyou, 0, 51);
				com->GetData(10, SQL_C_CHAR, tk_tekiyou, 51, 0);
				rec.tk_tekiyou = (char *)tk_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] tk_key;
		delete[] tk_mname;
		delete[] tk_kname;
		delete[] tk_tani;
		delete[] tk_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_taikei operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_taikei &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_taikei rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_taikei> m_Data;
};
class CR_t_tempkeireki : public COdbcRecord {
public:
	CR_t_tempkeireki() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_tempkeireki() {}

	void Initialize() {
		kr_index = 0;
		kr_syacd = 0;
		kr_nengo = "";
		kr_nendo = 0;
		kr_kouji = 0;
		kr_name = "";
		kr_no = "";
		kr_kaisi = "";
		kr_owari = "";
		kr_hat = "";
		kr_syozoku = "";
		kr_motouke = "";
		kr_syokumu = "";
		kr_bikou1 = "";
		kr_kouki = "";
		kr_strnendo = "";
	}

public:
	SQLINTEGER kr_index;
	SQLINTEGER kr_syacd;
	std::string kr_nengo;
	SQLINTEGER kr_nendo;
	SQLINTEGER kr_kouji;
	std::string kr_name;
	std::string kr_no;
	std::string kr_kaisi;
	std::string kr_owari;
	std::string kr_hat;
	std::string kr_syozoku;
	std::string kr_motouke;
	std::string kr_syokumu;
	std::string kr_bikou1;
	std::string kr_kouki;
	std::string kr_strnendo;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kr_index;
		} break;
		case 1: {
			ss << this->kr_syacd;
		} break;
		case 2: {
			ss << this->kr_nengo;
		} break;
		case 3: {
			ss << this->kr_nendo;
		} break;
		case 4: {
			ss << this->kr_kouji;
		} break;
		case 5: {
			ss << this->kr_name;
		} break;
		case 6: {
			ss << this->kr_no;
		} break;
		case 7: {
			ss << this->kr_kaisi;
		} break;
		case 8: {
			ss << this->kr_owari;
		} break;
		case 9: {
			ss << this->kr_hat;
		} break;
		case 10: {
			ss << this->kr_syozoku;
		} break;
		case 11: {
			ss << this->kr_motouke;
		} break;
		case 12: {
			ss << this->kr_syokumu;
		} break;
		case 13: {
			ss << this->kr_bikou1;
		} break;
		case 14: {
			ss << this->kr_kouki;
		} break;
		case 15: {
			ss << this->kr_strnendo;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_tempkeireki : public COdbcTable {
public:
	CT_t_tempkeireki() : COdbcTable() {
		m_TableName = "t_tempkeireki";
		m_SqlSELECT = "SELECT "
					  "kr_index,"
					  "kr_syacd,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1,"
					  "kr_kouki,"
					  "kr_strnendo"
					  " FROM t_tempkeireki";
		m_SqlINSERT = "INSERT INTO t_tempkeireki ("
					  "kr_index,"
					  "kr_syacd,"
					  "kr_nengo,"
					  "kr_nendo,"
					  "kr_kouji,"
					  "kr_name,"
					  "kr_no,"
					  "kr_kaisi,"
					  "kr_owari,"
					  "kr_hat,"
					  "kr_syozoku,"
					  "kr_motouke,"
					  "kr_syokumu,"
					  "kr_bikou1,"
					  "kr_kouki,"
					  "kr_strnendo)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_tempkeireki SET "
					  "kr_index = ?,"
					  "kr_syacd = ?,"
					  "kr_nengo = ?,"
					  "kr_nendo = ?,"
					  "kr_kouji = ?,"
					  "kr_name = ?,"
					  "kr_no = ?,"
					  "kr_kaisi = ?,"
					  "kr_owari = ?,"
					  "kr_hat = ?,"
					  "kr_syozoku = ?,"
					  "kr_motouke = ?,"
					  "kr_syokumu = ?,"
					  "kr_bikou1 = ?,"
					  "kr_kouki = ?,"
					  "kr_strnendo = ?";

		m_SqlDELETE = "DELETE t_tempkeireki ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_syacd", "2", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_nengo", "3", "", "NO", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_nendo", "4", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_kouji", "5", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_name", "6", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_no", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_kaisi", "8", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_owari", "9", "", "NO", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_hat", "10", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_syozoku", "11", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_motouke", "12", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_syokumu", "13", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_bikou1", "14", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_kouki", "15", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkeireki", "kr_strnendo", "16", "", "YES", "nvarchar", "50", "100", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_tempkeireki() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *kr_nengo = new char[101];
		char *kr_name = new char[511];
		char *kr_no = new char[511];
		char *kr_kaisi = new char[101];
		char *kr_owari = new char[101];
		char *kr_hat = new char[511];
		char *kr_syozoku = new char[511];
		char *kr_motouke = new char[101];
		char *kr_syokumu = new char[101];
		char *kr_bikou1 = new char[511];
		char *kr_kouki = new char[511];
		char *kr_strnendo = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_tempkeireki rec;
				com->GetData(1, SQL_C_LONG, &rec.kr_index, sizeof(rec.kr_index), 0);
				com->GetData(2, SQL_C_LONG, &rec.kr_syacd, sizeof(rec.kr_syacd), 0);
				memset(kr_nengo, 0, 101);
				com->GetData(3, SQL_C_CHAR, kr_nengo, 101, 0);
				rec.kr_nengo = (char *)kr_nengo;
				com->GetData(4, SQL_C_LONG, &rec.kr_nendo, sizeof(rec.kr_nendo), 0);
				com->GetData(5, SQL_C_LONG, &rec.kr_kouji, sizeof(rec.kr_kouji), 0);
				memset(kr_name, 0, 511);
				com->GetData(6, SQL_C_CHAR, kr_name, 511, 0);
				rec.kr_name = (char *)kr_name;
				memset(kr_no, 0, 511);
				com->GetData(7, SQL_C_CHAR, kr_no, 511, 0);
				rec.kr_no = (char *)kr_no;
				memset(kr_kaisi, 0, 101);
				com->GetData(8, SQL_C_CHAR, kr_kaisi, 101, 0);
				rec.kr_kaisi = (char *)kr_kaisi;
				memset(kr_owari, 0, 101);
				com->GetData(9, SQL_C_CHAR, kr_owari, 101, 0);
				rec.kr_owari = (char *)kr_owari;
				memset(kr_hat, 0, 511);
				com->GetData(10, SQL_C_CHAR, kr_hat, 511, 0);
				rec.kr_hat = (char *)kr_hat;
				memset(kr_syozoku, 0, 511);
				com->GetData(11, SQL_C_CHAR, kr_syozoku, 511, 0);
				rec.kr_syozoku = (char *)kr_syozoku;
				memset(kr_motouke, 0, 101);
				com->GetData(12, SQL_C_CHAR, kr_motouke, 101, 0);
				rec.kr_motouke = (char *)kr_motouke;
				memset(kr_syokumu, 0, 101);
				com->GetData(13, SQL_C_CHAR, kr_syokumu, 101, 0);
				rec.kr_syokumu = (char *)kr_syokumu;
				memset(kr_bikou1, 0, 511);
				com->GetData(14, SQL_C_CHAR, kr_bikou1, 511, 0);
				rec.kr_bikou1 = (char *)kr_bikou1;
				memset(kr_kouki, 0, 511);
				com->GetData(15, SQL_C_CHAR, kr_kouki, 511, 0);
				rec.kr_kouki = (char *)kr_kouki;
				memset(kr_strnendo, 0, 101);
				com->GetData(16, SQL_C_CHAR, kr_strnendo, 101, 0);
				rec.kr_strnendo = (char *)kr_strnendo;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] kr_nengo;
		delete[] kr_name;
		delete[] kr_no;
		delete[] kr_kaisi;
		delete[] kr_owari;
		delete[] kr_hat;
		delete[] kr_syozoku;
		delete[] kr_motouke;
		delete[] kr_syokumu;
		delete[] kr_bikou1;
		delete[] kr_kouki;
		delete[] kr_strnendo;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_tempkeireki operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_tempkeireki &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_tempkeireki rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_tempkeireki> m_Data;
};
class CR_t_tempkouji : public COdbcRecord {
public:
	CR_t_tempkouji() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_tempkouji() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		km_keidate = "";
		km_kaisi = "";
		km_owari = "";
		km_tyakou = "";
		km_kansei = "";
		km_kensa = "";
		km_nen = "";
		km_tuk = "";
		km_sya011 = 0;
		km_sya012 = "";
		km_sya021 = 0;
		km_sya022 = "";
		km_sya031 = 0;
		km_sya032 = "";
		km_nendo = 0;
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_sw = 0;
		km_bikou1 = "";
		km_bikou2 = "";
		km_nyuno = "";
		km_syouhizei = 0.0;
		km_kikan = 0;
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	std::string km_keidate;
	std::string km_kaisi;
	std::string km_owari;
	std::string km_tyakou;
	std::string km_kansei;
	std::string km_kensa;
	std::string km_nen;
	std::string km_tuk;
	SQLINTEGER km_sya011;
	std::string km_sya012;
	SQLINTEGER km_sya021;
	std::string km_sya022;
	SQLINTEGER km_sya031;
	std::string km_sya032;
	SQLSMALLINT km_nendo;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_bikou1;
	std::string km_bikou2;
	std::string km_nyuno;
	SQLFLOAT km_syouhizei;
	SQLINTEGER km_kikan;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_keiyaku;
		} break;
		case 8: {
			ss << this->km_tsuika;
		} break;
		case 9: {
			ss << this->km_goukei;
		} break;
		case 10: {
			ss << this->km_yosan;
		} break;
		case 11: {
			ss << this->km_genka;
		} break;
		case 12: {
			ss << this->km_keidate;
		} break;
		case 13: {
			ss << this->km_kaisi;
		} break;
		case 14: {
			ss << this->km_owari;
		} break;
		case 15: {
			ss << this->km_tyakou;
		} break;
		case 16: {
			ss << this->km_kansei;
		} break;
		case 17: {
			ss << this->km_kensa;
		} break;
		case 18: {
			ss << this->km_nen;
		} break;
		case 19: {
			ss << this->km_tuk;
		} break;
		case 20: {
			ss << this->km_sya011;
		} break;
		case 21: {
			ss << this->km_sya012;
		} break;
		case 22: {
			ss << this->km_sya021;
		} break;
		case 23: {
			ss << this->km_sya022;
		} break;
		case 24: {
			ss << this->km_sya031;
		} break;
		case 25: {
			ss << this->km_sya032;
		} break;
		case 26: {
			ss << this->km_nendo;
		} break;
		case 27: {
			ss << this->km_hat030;
		} break;
		case 28: {
			ss << this->km_hat040;
		} break;
		case 29: {
			ss << this->km_hat050;
		} break;
		case 30: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 31: {
			ss << this->km_sw;
		} break;
		case 32: {
			ss << this->km_bikou1;
		} break;
		case 33: {
			ss << this->km_bikou2;
		} break;
		case 34: {
			ss << this->km_nyuno;
		} break;
		case 35: {
			ss << this->km_syouhizei;
		} break;
		case 36: {
			ss << this->km_kikan;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_tempkouji : public COdbcTable {
public:
	CT_t_tempkouji() : COdbcTable() {
		m_TableName = "t_tempkouji";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "km_nen,"
					  "km_tuk,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_sya031,"
					  "km_sya032,"
					  "km_nendo,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno,"
					  "km_syouhizei,"
					  "km_kikan"
					  " FROM t_tempkouji";
		m_SqlINSERT = "INSERT INTO t_tempkouji ("
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "km_nen,"
					  "km_tuk,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_sya031,"
					  "km_sya032,"
					  "km_nendo,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno,"
					  "km_syouhizei,"
					  "km_kikan)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_tempkouji SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_kensa = ?,"
					  "km_nen = ?,"
					  "km_tuk = ?,"
					  "km_sya011 = ?,"
					  "km_sya012 = ?,"
					  "km_sya021 = ?,"
					  "km_sya022 = ?,"
					  "km_sya031 = ?,"
					  "km_sya032 = ?,"
					  "km_nendo = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuno = ?,"
					  "km_syouhizei = ?,"
					  "km_kikan = ?";

		m_SqlDELETE = "DELETE t_tempkouji ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_tsuika", "9", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_goukei", "10", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_keidate", "13", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_kaisi", "14", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_owari", "15", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_tyakou", "16", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_kansei", "17", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_kensa", "18", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_nen", "19", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_tuk", "20", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_sya011", "21", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_sya012", "22", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_sya021", "23", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_sya022", "24", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_sya031", "25", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_sya032", "26", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_nendo", "27", "", "YES", "smallint", "0", "0", "5", "0", "0",
					 "", "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_hat030", "28", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_hat040", "29", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_hat050", "30", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_nyuudat", "31", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_sw", "32", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_bikou1", "33", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_bikou2", "34", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_nyuno", "35", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_syouhizei", "36", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempkouji", "km_kikan", "37", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_tempkouji() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_keidate = new char[101];
		char *km_kaisi = new char[101];
		char *km_owari = new char[101];
		char *km_tyakou = new char[101];
		char *km_kansei = new char[101];
		char *km_kensa = new char[101];
		char *km_nen = new char[101];
		char *km_tuk = new char[101];
		char *km_sya012 = new char[81];
		char *km_sya022 = new char[81];
		char *km_sya032 = new char[81];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_tempkouji rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				com->GetData(8, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				memset(km_keidate, 0, 101);
				com->GetData(13, SQL_C_CHAR, km_keidate, 101, 0);
				rec.km_keidate = (char *)km_keidate;
				memset(km_kaisi, 0, 101);
				com->GetData(14, SQL_C_CHAR, km_kaisi, 101, 0);
				rec.km_kaisi = (char *)km_kaisi;
				memset(km_owari, 0, 101);
				com->GetData(15, SQL_C_CHAR, km_owari, 101, 0);
				rec.km_owari = (char *)km_owari;
				memset(km_tyakou, 0, 101);
				com->GetData(16, SQL_C_CHAR, km_tyakou, 101, 0);
				rec.km_tyakou = (char *)km_tyakou;
				memset(km_kansei, 0, 101);
				com->GetData(17, SQL_C_CHAR, km_kansei, 101, 0);
				rec.km_kansei = (char *)km_kansei;
				memset(km_kensa, 0, 101);
				com->GetData(18, SQL_C_CHAR, km_kensa, 101, 0);
				rec.km_kensa = (char *)km_kensa;
				memset(km_nen, 0, 101);
				com->GetData(19, SQL_C_CHAR, km_nen, 101, 0);
				rec.km_nen = (char *)km_nen;
				memset(km_tuk, 0, 101);
				com->GetData(20, SQL_C_CHAR, km_tuk, 101, 0);
				rec.km_tuk = (char *)km_tuk;
				com->GetData(21, SQL_C_LONG, &rec.km_sya011, sizeof(rec.km_sya011), 0);
				memset(km_sya012, 0, 81);
				com->GetData(22, SQL_C_CHAR, km_sya012, 81, 0);
				rec.km_sya012 = (char *)km_sya012;
				com->GetData(23, SQL_C_LONG, &rec.km_sya021, sizeof(rec.km_sya021), 0);
				memset(km_sya022, 0, 81);
				com->GetData(24, SQL_C_CHAR, km_sya022, 81, 0);
				rec.km_sya022 = (char *)km_sya022;
				com->GetData(25, SQL_C_LONG, &rec.km_sya031, sizeof(rec.km_sya031), 0);
				memset(km_sya032, 0, 81);
				com->GetData(26, SQL_C_CHAR, km_sya032, 81, 0);
				rec.km_sya032 = (char *)km_sya032;
				com->GetData(27, SQL_C_SHORT, &rec.km_nendo, sizeof(rec.km_nendo), 0);
				memset(km_hat030, 0, 101);
				com->GetData(28, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(29, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(30, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				com->GetData(31, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(32, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_bikou1, 0, 511);
				com->GetData(33, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(34, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				memset(km_nyuno, 0, 101);
				com->GetData(35, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				com->GetData(36, SQL_C_DOUBLE, &rec.km_syouhizei, sizeof(rec.km_syouhizei), 0);
				com->GetData(37, SQL_C_LONG, &rec.km_kikan, sizeof(rec.km_kikan), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_keidate;
		delete[] km_kaisi;
		delete[] km_owari;
		delete[] km_tyakou;
		delete[] km_kansei;
		delete[] km_kensa;
		delete[] km_nen;
		delete[] km_tuk;
		delete[] km_sya012;
		delete[] km_sya022;
		delete[] km_sya032;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_tempkouji operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_tempkouji &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_tempkouji rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_tempkouji> m_Data;
};
class CR_t_tempsikaku : public COdbcRecord {
public:
	CR_t_tempsikaku() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_tempsikaku() {}

	void Initialize() {
		sitemp020 = 0;
		sitemp130 = "";
		sitemp140 = "";
		sitemp150 = "";
		sitemp230 = "";
		sitemp240 = "";
		sitemp250 = "";
		sitemp330 = "";
		sitemp340 = "";
		sitemp350 = "";
		sitemp430 = "";
		sitemp440 = "";
		sitemp450 = "";
		sitemp530 = "";
		sitemp540 = "";
		sitemp550 = "";
		sitemp630 = "";
		sitemp640 = "";
		sitemp650 = "";
		sitemp730 = "";
		sitemp740 = "";
		sitemp750 = "";
		sitemp830 = "";
		sitemp840 = "";
		sitemp850 = "";
	}

public:
	SQLINTEGER sitemp020;
	std::string sitemp130;
	std::string sitemp140;
	std::string sitemp150;
	std::string sitemp230;
	std::string sitemp240;
	std::string sitemp250;
	std::string sitemp330;
	std::string sitemp340;
	std::string sitemp350;
	std::string sitemp430;
	std::string sitemp440;
	std::string sitemp450;
	std::string sitemp530;
	std::string sitemp540;
	std::string sitemp550;
	std::string sitemp630;
	std::string sitemp640;
	std::string sitemp650;
	std::string sitemp730;
	std::string sitemp740;
	std::string sitemp750;
	std::string sitemp830;
	std::string sitemp840;
	std::string sitemp850;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->sitemp020;
		} break;
		case 1: {
			ss << this->sitemp130;
		} break;
		case 2: {
			ss << this->sitemp140;
		} break;
		case 3: {
			ss << this->sitemp150;
		} break;
		case 4: {
			ss << this->sitemp230;
		} break;
		case 5: {
			ss << this->sitemp240;
		} break;
		case 6: {
			ss << this->sitemp250;
		} break;
		case 7: {
			ss << this->sitemp330;
		} break;
		case 8: {
			ss << this->sitemp340;
		} break;
		case 9: {
			ss << this->sitemp350;
		} break;
		case 10: {
			ss << this->sitemp430;
		} break;
		case 11: {
			ss << this->sitemp440;
		} break;
		case 12: {
			ss << this->sitemp450;
		} break;
		case 13: {
			ss << this->sitemp530;
		} break;
		case 14: {
			ss << this->sitemp540;
		} break;
		case 15: {
			ss << this->sitemp550;
		} break;
		case 16: {
			ss << this->sitemp630;
		} break;
		case 17: {
			ss << this->sitemp640;
		} break;
		case 18: {
			ss << this->sitemp650;
		} break;
		case 19: {
			ss << this->sitemp730;
		} break;
		case 20: {
			ss << this->sitemp740;
		} break;
		case 21: {
			ss << this->sitemp750;
		} break;
		case 22: {
			ss << this->sitemp830;
		} break;
		case 23: {
			ss << this->sitemp840;
		} break;
		case 24: {
			ss << this->sitemp850;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_tempsikaku : public COdbcTable {
public:
	CT_t_tempsikaku() : COdbcTable() {
		m_TableName = "t_tempsikaku";
		m_SqlSELECT = "SELECT "
					  "sitemp020,"
					  "sitemp130,"
					  "sitemp140,"
					  "sitemp150,"
					  "sitemp230,"
					  "sitemp240,"
					  "sitemp250,"
					  "sitemp330,"
					  "sitemp340,"
					  "sitemp350,"
					  "sitemp430,"
					  "sitemp440,"
					  "sitemp450,"
					  "sitemp530,"
					  "sitemp540,"
					  "sitemp550,"
					  "sitemp630,"
					  "sitemp640,"
					  "sitemp650,"
					  "sitemp730,"
					  "sitemp740,"
					  "sitemp750,"
					  "sitemp830,"
					  "sitemp840,"
					  "sitemp850"
					  " FROM t_tempsikaku";
		m_SqlINSERT = "INSERT INTO t_tempsikaku ("
					  "sitemp020,"
					  "sitemp130,"
					  "sitemp140,"
					  "sitemp150,"
					  "sitemp230,"
					  "sitemp240,"
					  "sitemp250,"
					  "sitemp330,"
					  "sitemp340,"
					  "sitemp350,"
					  "sitemp430,"
					  "sitemp440,"
					  "sitemp450,"
					  "sitemp530,"
					  "sitemp540,"
					  "sitemp550,"
					  "sitemp630,"
					  "sitemp640,"
					  "sitemp650,"
					  "sitemp730,"
					  "sitemp740,"
					  "sitemp750,"
					  "sitemp830,"
					  "sitemp840,"
					  "sitemp850)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_tempsikaku SET "
					  "sitemp020 = ?,"
					  "sitemp130 = ?,"
					  "sitemp140 = ?,"
					  "sitemp150 = ?,"
					  "sitemp230 = ?,"
					  "sitemp240 = ?,"
					  "sitemp250 = ?,"
					  "sitemp330 = ?,"
					  "sitemp340 = ?,"
					  "sitemp350 = ?,"
					  "sitemp430 = ?,"
					  "sitemp440 = ?,"
					  "sitemp450 = ?,"
					  "sitemp530 = ?,"
					  "sitemp540 = ?,"
					  "sitemp550 = ?,"
					  "sitemp630 = ?,"
					  "sitemp640 = ?,"
					  "sitemp650 = ?,"
					  "sitemp730 = ?,"
					  "sitemp740 = ?,"
					  "sitemp750 = ?,"
					  "sitemp830 = ?,"
					  "sitemp840 = ?,"
					  "sitemp850 = ?";

		m_SqlDELETE = "DELETE t_tempsikaku ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp020", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp130", "2", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp140", "3", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp150", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp230", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp240", "6", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp250", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp330", "8", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp340", "9", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp350", "10", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp430", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp440", "12", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp450", "13", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp530", "14", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp540", "15", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp550", "16", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp630", "17", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp640", "18", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp650", "19", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp730", "20", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp740", "21", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp750", "22", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp830", "23", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp840", "24", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsikaku", "sitemp850", "25", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_tempsikaku() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *sitemp130 = new char[511];
		char *sitemp140 = new char[511];
		char *sitemp150 = new char[511];
		char *sitemp230 = new char[511];
		char *sitemp240 = new char[511];
		char *sitemp250 = new char[511];
		char *sitemp330 = new char[511];
		char *sitemp340 = new char[511];
		char *sitemp350 = new char[511];
		char *sitemp430 = new char[511];
		char *sitemp440 = new char[511];
		char *sitemp450 = new char[511];
		char *sitemp530 = new char[511];
		char *sitemp540 = new char[511];
		char *sitemp550 = new char[511];
		char *sitemp630 = new char[511];
		char *sitemp640 = new char[511];
		char *sitemp650 = new char[511];
		char *sitemp730 = new char[511];
		char *sitemp740 = new char[511];
		char *sitemp750 = new char[511];
		char *sitemp830 = new char[511];
		char *sitemp840 = new char[511];
		char *sitemp850 = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_tempsikaku rec;
				com->GetData(1, SQL_C_LONG, &rec.sitemp020, sizeof(rec.sitemp020), 0);
				memset(sitemp130, 0, 511);
				com->GetData(2, SQL_C_CHAR, sitemp130, 511, 0);
				rec.sitemp130 = (char *)sitemp130;
				memset(sitemp140, 0, 511);
				com->GetData(3, SQL_C_CHAR, sitemp140, 511, 0);
				rec.sitemp140 = (char *)sitemp140;
				memset(sitemp150, 0, 511);
				com->GetData(4, SQL_C_CHAR, sitemp150, 511, 0);
				rec.sitemp150 = (char *)sitemp150;
				memset(sitemp230, 0, 511);
				com->GetData(5, SQL_C_CHAR, sitemp230, 511, 0);
				rec.sitemp230 = (char *)sitemp230;
				memset(sitemp240, 0, 511);
				com->GetData(6, SQL_C_CHAR, sitemp240, 511, 0);
				rec.sitemp240 = (char *)sitemp240;
				memset(sitemp250, 0, 511);
				com->GetData(7, SQL_C_CHAR, sitemp250, 511, 0);
				rec.sitemp250 = (char *)sitemp250;
				memset(sitemp330, 0, 511);
				com->GetData(8, SQL_C_CHAR, sitemp330, 511, 0);
				rec.sitemp330 = (char *)sitemp330;
				memset(sitemp340, 0, 511);
				com->GetData(9, SQL_C_CHAR, sitemp340, 511, 0);
				rec.sitemp340 = (char *)sitemp340;
				memset(sitemp350, 0, 511);
				com->GetData(10, SQL_C_CHAR, sitemp350, 511, 0);
				rec.sitemp350 = (char *)sitemp350;
				memset(sitemp430, 0, 511);
				com->GetData(11, SQL_C_CHAR, sitemp430, 511, 0);
				rec.sitemp430 = (char *)sitemp430;
				memset(sitemp440, 0, 511);
				com->GetData(12, SQL_C_CHAR, sitemp440, 511, 0);
				rec.sitemp440 = (char *)sitemp440;
				memset(sitemp450, 0, 511);
				com->GetData(13, SQL_C_CHAR, sitemp450, 511, 0);
				rec.sitemp450 = (char *)sitemp450;
				memset(sitemp530, 0, 511);
				com->GetData(14, SQL_C_CHAR, sitemp530, 511, 0);
				rec.sitemp530 = (char *)sitemp530;
				memset(sitemp540, 0, 511);
				com->GetData(15, SQL_C_CHAR, sitemp540, 511, 0);
				rec.sitemp540 = (char *)sitemp540;
				memset(sitemp550, 0, 511);
				com->GetData(16, SQL_C_CHAR, sitemp550, 511, 0);
				rec.sitemp550 = (char *)sitemp550;
				memset(sitemp630, 0, 511);
				com->GetData(17, SQL_C_CHAR, sitemp630, 511, 0);
				rec.sitemp630 = (char *)sitemp630;
				memset(sitemp640, 0, 511);
				com->GetData(18, SQL_C_CHAR, sitemp640, 511, 0);
				rec.sitemp640 = (char *)sitemp640;
				memset(sitemp650, 0, 511);
				com->GetData(19, SQL_C_CHAR, sitemp650, 511, 0);
				rec.sitemp650 = (char *)sitemp650;
				memset(sitemp730, 0, 511);
				com->GetData(20, SQL_C_CHAR, sitemp730, 511, 0);
				rec.sitemp730 = (char *)sitemp730;
				memset(sitemp740, 0, 511);
				com->GetData(21, SQL_C_CHAR, sitemp740, 511, 0);
				rec.sitemp740 = (char *)sitemp740;
				memset(sitemp750, 0, 511);
				com->GetData(22, SQL_C_CHAR, sitemp750, 511, 0);
				rec.sitemp750 = (char *)sitemp750;
				memset(sitemp830, 0, 511);
				com->GetData(23, SQL_C_CHAR, sitemp830, 511, 0);
				rec.sitemp830 = (char *)sitemp830;
				memset(sitemp840, 0, 511);
				com->GetData(24, SQL_C_CHAR, sitemp840, 511, 0);
				rec.sitemp840 = (char *)sitemp840;
				memset(sitemp850, 0, 511);
				com->GetData(25, SQL_C_CHAR, sitemp850, 511, 0);
				rec.sitemp850 = (char *)sitemp850;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] sitemp130;
		delete[] sitemp140;
		delete[] sitemp150;
		delete[] sitemp230;
		delete[] sitemp240;
		delete[] sitemp250;
		delete[] sitemp330;
		delete[] sitemp340;
		delete[] sitemp350;
		delete[] sitemp430;
		delete[] sitemp440;
		delete[] sitemp450;
		delete[] sitemp530;
		delete[] sitemp540;
		delete[] sitemp550;
		delete[] sitemp630;
		delete[] sitemp640;
		delete[] sitemp650;
		delete[] sitemp730;
		delete[] sitemp740;
		delete[] sitemp750;
		delete[] sitemp830;
		delete[] sitemp840;
		delete[] sitemp850;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_tempsikaku operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_tempsikaku &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_tempsikaku rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_tempsikaku> m_Data;
};
class CR_t_tempsyain : public COdbcRecord {
public:
	CR_t_tempsyain() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_tempsyain() {}

	void Initialize() {
		MBR010 = 0;
		MBR020 = "";
		MBR060 = "";
		MBR070 = "";
		MBR080 = "";
		MBR090 = "";
		MBR100 = "";
		MBR110 = "";
		MBR120 = "";
		MBR130 = "";
		MBR_nenrei = "";
	}

public:
	SQLINTEGER MBR010;
	std::string MBR020;
	std::string MBR060;
	std::string MBR070;
	std::string MBR080;
	std::string MBR090;
	std::string MBR100;
	std::string MBR110;
	std::string MBR120;
	std::string MBR130;
	std::string MBR_nenrei;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->MBR010;
		} break;
		case 1: {
			ss << this->MBR020;
		} break;
		case 2: {
			ss << this->MBR060;
		} break;
		case 3: {
			ss << this->MBR070;
		} break;
		case 4: {
			ss << this->MBR080;
		} break;
		case 5: {
			ss << this->MBR090;
		} break;
		case 6: {
			ss << this->MBR100;
		} break;
		case 7: {
			ss << this->MBR110;
		} break;
		case 8: {
			ss << this->MBR120;
		} break;
		case 9: {
			ss << this->MBR130;
		} break;
		case 10: {
			ss << this->MBR_nenrei;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_tempsyain : public COdbcTable {
public:
	CT_t_tempsyain() : COdbcTable() {
		m_TableName = "t_tempsyain";
		m_SqlSELECT = "SELECT "
					  "MBR010,"
					  "MBR020,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130,"
					  "MBR_nenrei"
					  " FROM t_tempsyain";
		m_SqlINSERT = "INSERT INTO t_tempsyain ("
					  "MBR010,"
					  "MBR020,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130,"
					  "MBR_nenrei)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_tempsyain SET "
					  "MBR010 = ?,"
					  "MBR020 = ?,"
					  "MBR060 = ?,"
					  "MBR070 = ?,"
					  "MBR080 = ?,"
					  "MBR090 = ?,"
					  "MBR100 = ?,"
					  "MBR110 = ?,"
					  "MBR120 = ?,"
					  "MBR130 = ?,"
					  "MBR_nenrei = ?";

		m_SqlDELETE = "DELETE t_tempsyain ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR010", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR020", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR060", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR070", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR080", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR090", "6", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR100", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR110", "8", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR120", "9", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR130", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tempsyain", "MBR_nenrei", "11", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_tempsyain() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *MBR020 = new char[101];
		char *MBR060 = new char[511];
		char *MBR070 = new char[511];
		char *MBR080 = new char[511];
		char *MBR090 = new char[511];
		char *MBR100 = new char[511];
		char *MBR110 = new char[511];
		char *MBR120 = new char[41];
		char *MBR130 = new char[101];
		char *MBR_nenrei = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_tempsyain rec;
				com->GetData(1, SQL_C_LONG, &rec.MBR010, sizeof(rec.MBR010), 0);
				memset(MBR020, 0, 101);
				com->GetData(2, SQL_C_CHAR, MBR020, 101, 0);
				rec.MBR020 = (char *)MBR020;
				memset(MBR060, 0, 511);
				com->GetData(3, SQL_C_CHAR, MBR060, 511, 0);
				rec.MBR060 = (char *)MBR060;
				memset(MBR070, 0, 511);
				com->GetData(4, SQL_C_CHAR, MBR070, 511, 0);
				rec.MBR070 = (char *)MBR070;
				memset(MBR080, 0, 511);
				com->GetData(5, SQL_C_CHAR, MBR080, 511, 0);
				rec.MBR080 = (char *)MBR080;
				memset(MBR090, 0, 511);
				com->GetData(6, SQL_C_CHAR, MBR090, 511, 0);
				rec.MBR090 = (char *)MBR090;
				memset(MBR100, 0, 511);
				com->GetData(7, SQL_C_CHAR, MBR100, 511, 0);
				rec.MBR100 = (char *)MBR100;
				memset(MBR110, 0, 511);
				com->GetData(8, SQL_C_CHAR, MBR110, 511, 0);
				rec.MBR110 = (char *)MBR110;
				memset(MBR120, 0, 41);
				com->GetData(9, SQL_C_CHAR, MBR120, 41, 0);
				rec.MBR120 = (char *)MBR120;
				memset(MBR130, 0, 101);
				com->GetData(10, SQL_C_CHAR, MBR130, 101, 0);
				rec.MBR130 = (char *)MBR130;
				memset(MBR_nenrei, 0, 101);
				com->GetData(11, SQL_C_CHAR, MBR_nenrei, 101, 0);
				rec.MBR_nenrei = (char *)MBR_nenrei;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] MBR020;
		delete[] MBR060;
		delete[] MBR070;
		delete[] MBR080;
		delete[] MBR090;
		delete[] MBR100;
		delete[] MBR110;
		delete[] MBR120;
		delete[] MBR130;
		delete[] MBR_nenrei;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_tempsyain operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_tempsyain &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_tempsyain rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_tempsyain> m_Data;
};
class CR_t_testyobi : public COdbcRecord {
public:
	CR_t_testyobi() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_testyobi() {}

	void Initialize() { ts_idx = 0; }

public:
	SQLINTEGER ts_idx;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->ts_idx;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_testyobi : public COdbcTable {
public:
	CT_t_testyobi() : COdbcTable() {
		m_TableName = "t_testyobi";
		m_SqlSELECT = "SELECT "
					  "ts_idx"
					  " FROM t_testyobi";
		m_SqlINSERT = "INSERT INTO t_testyobi ("
					  "ts_idx)"
					  " VALUES ( ?)";
		m_SqlUPDATE = "UPDATE t_testyobi SET "
					  "ts_idx = ?";

		m_SqlDELETE = "DELETE t_testyobi ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_testyobi", "ts_idx", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_testyobi() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_testyobi rec;
				com->GetData(1, SQL_C_LONG, &rec.ts_idx, sizeof(rec.ts_idx), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_testyobi operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_testyobi &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_testyobi rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_testyobi> m_Data;
};
class CR_t_text : public COdbcRecord {
public:
	CR_t_text() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_text() {}

	void Initialize() {
		txt_id = 0;
		txt_name = "";
		txt_text = "";
	}

public:
	SQLINTEGER txt_id;
	std::string txt_name;
	std::string txt_text;
	TIMESTAMP_STRUCT txt_datetime;
	TIMESTAMP_STRUCT txt_update;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->txt_id;
		} break;
		case 1: {
			ss << this->txt_name;
		} break;
		case 2: {
			ss << this->txt_text;
		} break;
		case 3: {
			COdbcDateTime date(&this->txt_datetime);
			ss << date.to_string();
		} break;
		case 4: {
			COdbcDateTime date(&this->txt_update);
			ss << date.to_string();
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_text : public COdbcTable {
public:
	CT_t_text() : COdbcTable() {
		m_TableName = "t_text";
		m_SqlSELECT = "SELECT "
					  "txt_id,"
					  "txt_name,"
					  "txt_text,"
					  "txt_datetime,"
					  "txt_update"
					  " FROM t_text";
		m_SqlINSERT = "INSERT INTO t_text ("
					  "txt_id,"
					  "txt_name,"
					  "txt_text,"
					  "txt_datetime,"
					  "txt_update)"
					  " VALUES ( ?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_text SET "
					  "txt_id = ?,"
					  "txt_name = ?,"
					  "txt_text = ?,"
					  "txt_datetime = ?,"
					  "txt_update = ?";

		m_SqlDELETE = "DELETE t_text ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_text", "txt_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_text", "txt_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_text", "txt_text", "3", "", "YES", "text", "2147483647", "2147483647", "0",
					 "0", "0", "cp932", "Japanese_CI_AS", 0, _text, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_text", "txt_datetime", "4", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_text", "txt_update", "5", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_text() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *txt_name = new char[511];
		char *txt_text = new char[MAXBUF];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_text rec;
				com->GetData(1, SQL_C_LONG, &rec.txt_id, sizeof(rec.txt_id), 0);
				memset(txt_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, txt_name, 511, 0);
				rec.txt_name = (char *)txt_name;
				memset(txt_text, 0, MAXBUF);
				com->GetData(3, SQL_C_CHAR, txt_text, MAXBUF, 0);
				rec.txt_text = (char *)txt_text;
				com->GetData(4, SQL_C_TYPE_TIMESTAMP, &rec.txt_datetime, sizeof(rec.txt_datetime), 0);
				com->GetData(5, SQL_C_TYPE_TIMESTAMP, &rec.txt_update, sizeof(rec.txt_update), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] txt_name;
		delete[] txt_text;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_text operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_text &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_text rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_text> m_Data;
};
class CR_t_textbak : public COdbcRecord {
public:
	CR_t_textbak() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_textbak() {}

	void Initialize() {
		txt_id = 0;
		txt_name = "";
		txt_text = "";
	}

public:
	SQLINTEGER txt_id;
	std::string txt_name;
	std::string txt_text;
	TIMESTAMP_STRUCT txt_datetime;
	TIMESTAMP_STRUCT txt_update;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->txt_id;
		} break;
		case 1: {
			ss << this->txt_name;
		} break;
		case 2: {
			ss << this->txt_text;
		} break;
		case 3: {
			COdbcDateTime date(&this->txt_datetime);
			ss << date.to_string();
		} break;
		case 4: {
			COdbcDateTime date(&this->txt_update);
			ss << date.to_string();
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_textbak : public COdbcTable {
public:
	CT_t_textbak() : COdbcTable() {
		m_TableName = "t_textbak";
		m_SqlSELECT = "SELECT "
					  "txt_id,"
					  "txt_name,"
					  "txt_text,"
					  "txt_datetime,"
					  "txt_update"
					  " FROM t_textbak";
		m_SqlINSERT = "INSERT INTO t_textbak ("
					  "txt_id,"
					  "txt_name,"
					  "txt_text,"
					  "txt_datetime,"
					  "txt_update)"
					  " VALUES ( ?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_textbak SET "
					  "txt_id = ?,"
					  "txt_name = ?,"
					  "txt_text = ?,"
					  "txt_datetime = ?,"
					  "txt_update = ?";

		m_SqlDELETE = "DELETE t_textbak ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_textbak", "txt_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_textbak", "txt_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_textbak", "txt_text", "3", "", "YES", "text", "2147483647", "2147483647", "0",
					 "0", "0", "cp932", "Japanese_CI_AS", 0, _text, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_textbak", "txt_datetime", "4", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_textbak", "txt_update", "5", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_textbak() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *txt_name = new char[511];
		char *txt_text = new char[MAXBUF];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_textbak rec;
				com->GetData(1, SQL_C_LONG, &rec.txt_id, sizeof(rec.txt_id), 0);
				memset(txt_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, txt_name, 511, 0);
				rec.txt_name = (char *)txt_name;
				memset(txt_text, 0, MAXBUF);
				com->GetData(3, SQL_C_CHAR, txt_text, MAXBUF, 0);
				rec.txt_text = (char *)txt_text;
				com->GetData(4, SQL_C_TYPE_TIMESTAMP, &rec.txt_datetime, sizeof(rec.txt_datetime), 0);
				com->GetData(5, SQL_C_TYPE_TIMESTAMP, &rec.txt_update, sizeof(rec.txt_update), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] txt_name;
		delete[] txt_text;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_textbak operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_textbak &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_textbak rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_textbak> m_Data;
};
class CR_t_type : public COdbcRecord {
public:
	CR_t_type() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_type() {}

	void Initialize() {
		ty_id = 0;
		ty_name = "";
	}

public:
	SQLINTEGER ty_id;
	std::string ty_name;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->ty_id;
		} break;
		case 1: {
			ss << this->ty_name;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_type : public COdbcTable {
public:
	CT_t_type() : COdbcTable() {
		m_TableName = "t_type";
		m_SqlSELECT = "SELECT "
					  "ty_id,"
					  "ty_name"
					  " FROM t_type";
		m_SqlINSERT = "INSERT INTO t_type ("
					  "ty_id,"
					  "ty_name)"
					  " VALUES ( ?,?)";
		m_SqlUPDATE = "UPDATE t_type SET "
					  "ty_id = ?,"
					  "ty_name = ?";

		m_SqlDELETE = "DELETE t_type ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_type", "ty_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_type", "ty_name", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_type() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *ty_name = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_type rec;
				com->GetData(1, SQL_C_LONG, &rec.ty_id, sizeof(rec.ty_id), 0);
				memset(ty_name, 0, 101);
				com->GetData(2, SQL_C_CHAR, ty_name, 101, 0);
				rec.ty_name = (char *)ty_name;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] ty_name;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_type operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_type &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_type rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_type> m_Data;
};
class CR_t_uke_test : public COdbcRecord {
public:
	CR_t_uke_test() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_uke_test() {}

	void Initialize() {
		kai00 = 0;
		Kai01 = "";
		Kai02 = "";
		Kai03 = "";
		Kai04 = "";
		Kai05 = "";
		Kai06 = "";
		Kai07 = "";
		Kai08 = "";
		Kai09 = "";
		Kai10 = "";
		Kai11 = "";
		Kai12 = "";
	}

public:
	SQLINTEGER kai00;
	std::string Kai01;
	std::string Kai02;
	std::string Kai03;
	std::string Kai04;
	std::string Kai05;
	std::string Kai06;
	std::string Kai07;
	std::string Kai08;
	std::string Kai09;
	std::string Kai10;
	std::string Kai11;
	std::string Kai12;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kai00;
		} break;
		case 1: {
			ss << this->Kai01;
		} break;
		case 2: {
			ss << this->Kai02;
		} break;
		case 3: {
			ss << this->Kai03;
		} break;
		case 4: {
			ss << this->Kai04;
		} break;
		case 5: {
			ss << this->Kai05;
		} break;
		case 6: {
			ss << this->Kai06;
		} break;
		case 7: {
			ss << this->Kai07;
		} break;
		case 8: {
			ss << this->Kai08;
		} break;
		case 9: {
			ss << this->Kai09;
		} break;
		case 10: {
			ss << this->Kai10;
		} break;
		case 11: {
			ss << this->Kai11;
		} break;
		case 12: {
			ss << this->Kai12;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_uke_test : public COdbcTable {
public:
	CT_t_uke_test() : COdbcTable() {
		m_TableName = "t_uke_test";
		m_SqlSELECT = "SELECT "
					  "kai00,"
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08,"
					  "Kai09,"
					  "Kai10,"
					  "Kai11,"
					  "Kai12"
					  " FROM t_uke_test";
		m_SqlINSERT = "INSERT INTO t_uke_test ("
					  "kai00,"
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08,"
					  "Kai09,"
					  "Kai10,"
					  "Kai11,"
					  "Kai12)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_uke_test SET "
					  "kai00 = ?,"
					  "Kai01 = ?,"
					  "Kai02 = ?,"
					  "Kai03 = ?,"
					  "Kai04 = ?,"
					  "Kai05 = ?,"
					  "Kai06 = ?,"
					  "Kai07 = ?,"
					  "Kai08 = ?,"
					  "Kai09 = ?,"
					  "Kai10 = ?,"
					  "Kai11 = ?,"
					  "Kai12 = ?";

		m_SqlDELETE = "DELETE t_uke_test ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_uke_test", "kai00", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai01", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai02", "3", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai03", "4", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai04", "5", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai05", "6", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai06", "7", "", "YES", "nvarchar", "30", "60", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai07", "8", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai08", "9", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai09", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai10", "11", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai11", "12", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_uke_test", "Kai12", "13", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_uke_test() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *Kai01 = new char[101];
		char *Kai02 = new char[101];
		char *Kai03 = new char[101];
		char *Kai04 = new char[41];
		char *Kai05 = new char[101];
		char *Kai06 = new char[61];
		char *Kai07 = new char[41];
		char *Kai08 = new char[41];
		char *Kai09 = new char[101];
		char *Kai10 = new char[101];
		char *Kai11 = new char[101];
		char *Kai12 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_uke_test rec;
				com->GetData(1, SQL_C_LONG, &rec.kai00, sizeof(rec.kai00), 0);
				memset(Kai01, 0, 101);
				com->GetData(2, SQL_C_CHAR, Kai01, 101, 0);
				rec.Kai01 = (char *)Kai01;
				memset(Kai02, 0, 101);
				com->GetData(3, SQL_C_CHAR, Kai02, 101, 0);
				rec.Kai02 = (char *)Kai02;
				memset(Kai03, 0, 101);
				com->GetData(4, SQL_C_CHAR, Kai03, 101, 0);
				rec.Kai03 = (char *)Kai03;
				memset(Kai04, 0, 41);
				com->GetData(5, SQL_C_CHAR, Kai04, 41, 0);
				rec.Kai04 = (char *)Kai04;
				memset(Kai05, 0, 101);
				com->GetData(6, SQL_C_CHAR, Kai05, 101, 0);
				rec.Kai05 = (char *)Kai05;
				memset(Kai06, 0, 61);
				com->GetData(7, SQL_C_CHAR, Kai06, 61, 0);
				rec.Kai06 = (char *)Kai06;
				memset(Kai07, 0, 41);
				com->GetData(8, SQL_C_CHAR, Kai07, 41, 0);
				rec.Kai07 = (char *)Kai07;
				memset(Kai08, 0, 41);
				com->GetData(9, SQL_C_CHAR, Kai08, 41, 0);
				rec.Kai08 = (char *)Kai08;
				memset(Kai09, 0, 101);
				com->GetData(10, SQL_C_CHAR, Kai09, 101, 0);
				rec.Kai09 = (char *)Kai09;
				memset(Kai10, 0, 101);
				com->GetData(11, SQL_C_CHAR, Kai10, 101, 0);
				rec.Kai10 = (char *)Kai10;
				memset(Kai11, 0, 101);
				com->GetData(12, SQL_C_CHAR, Kai11, 101, 0);
				rec.Kai11 = (char *)Kai11;
				memset(Kai12, 0, 101);
				com->GetData(13, SQL_C_CHAR, Kai12, 101, 0);
				rec.Kai12 = (char *)Kai12;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] Kai01;
		delete[] Kai02;
		delete[] Kai03;
		delete[] Kai04;
		delete[] Kai05;
		delete[] Kai06;
		delete[] Kai07;
		delete[] Kai08;
		delete[] Kai09;
		delete[] Kai10;
		delete[] Kai11;
		delete[] Kai12;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_uke_test operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_uke_test &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_uke_test rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_uke_test> m_Data;
};
class CR_t_tyumon : public COdbcRecord {
public:
	CR_t_tyumon() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_tyumon() {}

	void Initialize() {
		tyu_id = 0;
		tyu_kouji = 0;
		tyu_gyosya = 0;
		tyu_seq = 0;
		tyu_name = "";
		tyu_basyo = "";
		tyu_zyoken = "";
		memset(&tyu_kingaku, 0, sizeof(tyu_kingaku));
		memset(&tyu_zei, 0, sizeof(tyu_zei));
		memset(&tyu_goukei, 0, sizeof(tyu_goukei));
		memset(&tyu_ritsu, 0, sizeof(tyu_ritsu));
		tyu_kousyu = "";
	}

public:
	SQLINTEGER tyu_id;
	SQLINTEGER tyu_kouji;
	SQLINTEGER tyu_gyosya;
	SQLINTEGER tyu_seq;
	std::string tyu_name;
	std::string tyu_basyo;
	std::string tyu_zyoken;
	TIMESTAMP_STRUCT tyu_date;
	TIMESTAMP_STRUCT tyu_kaisi;
	TIMESTAMP_STRUCT tyu_owari;
	SQL_NUMERIC_STRUCT tyu_kingaku;
	SQL_NUMERIC_STRUCT tyu_zei;
	SQL_NUMERIC_STRUCT tyu_goukei;
	SQL_NUMERIC_STRUCT tyu_ritsu;
	std::string tyu_kousyu;
	TIMESTAMP_STRUCT tyu_irai;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->tyu_id;
		} break;
		case 1: {
			ss << this->tyu_kouji;
		} break;
		case 2: {
			ss << this->tyu_gyosya;
		} break;
		case 3: {
			ss << this->tyu_seq;
		} break;
		case 4: {
			ss << this->tyu_name;
		} break;
		case 5: {
			ss << this->tyu_basyo;
		} break;
		case 6: {
			ss << this->tyu_zyoken;
		} break;
		case 7: {
			COdbcDateTime date(&this->tyu_date);
			ss << date.to_string();
		} break;
		case 8: {
			COdbcDateTime date(&this->tyu_kaisi);
			ss << date.to_string();
		} break;
		case 9: {
			COdbcDateTime date(&this->tyu_owari);
			ss << date.to_string();
		} break;
		case 10: {
			ss << COdbcColumn::NumericToString(&this->tyu_kingaku);
		} break;
		case 11: {
			ss << COdbcColumn::NumericToString(&this->tyu_zei);
		} break;
		case 12: {
			ss << COdbcColumn::NumericToString(&this->tyu_goukei);
		} break;
		case 13: {
			ss << COdbcColumn::NumericToString(&this->tyu_ritsu);
		} break;
		case 14: {
			ss << this->tyu_kousyu;
		} break;
		case 15: {
			COdbcDateTime date(&this->tyu_irai);
			ss << date.to_string();
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_tyumon : public COdbcTable {
public:
	CT_t_tyumon() : COdbcTable() {
		m_TableName = "t_tyumon";
		m_SqlSELECT = "SELECT "
					  "tyu_id,"
					  "tyu_kouji,"
					  "tyu_gyosya,"
					  "tyu_seq,"
					  "tyu_name,"
					  "tyu_basyo,"
					  "tyu_zyoken,"
					  "tyu_date,"
					  "tyu_kaisi,"
					  "tyu_owari,"
					  "tyu_kingaku,"
					  "tyu_zei,"
					  "tyu_goukei,"
					  "tyu_ritsu,"
					  "tyu_kousyu,"
					  "tyu_irai"
					  " FROM t_tyumon";
		m_SqlINSERT = "INSERT INTO t_tyumon ("
					  "tyu_kouji,"
					  "tyu_gyosya,"
					  "tyu_seq,"
					  "tyu_name,"
					  "tyu_basyo,"
					  "tyu_zyoken,"
					  "tyu_date,"
					  "tyu_kaisi,"
					  "tyu_owari,"
					  "tyu_kingaku,"
					  "tyu_zei,"
					  "tyu_goukei,"
					  "tyu_ritsu,"
					  "tyu_kousyu,"
					  "tyu_irai)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_tyumon SET "
					  "tyu_kouji = ?,"
					  "tyu_gyosya = ?,"
					  "tyu_seq = ?,"
					  "tyu_name = ?,"
					  "tyu_basyo = ?,"
					  "tyu_zyoken = ?,"
					  "tyu_date = ?,"
					  "tyu_kaisi = ?,"
					  "tyu_owari = ?,"
					  "tyu_kingaku = ?,"
					  "tyu_zei = ?,"
					  "tyu_goukei = ?,"
					  "tyu_ritsu = ?,"
					  "tyu_kousyu = ?,"
					  "tyu_irai = ?";

		m_SqlDELETE = "DELETE t_tyumon ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_gyosya", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_seq", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_name", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_basyo", "6", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_zyoken", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_date", "8", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_kaisi", "9", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_owari", "10", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_kingaku", "11", "", "YES", "decimal", "0", "0", "18", "0", "0",
					 "", "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_zei", "12", "", "YES", "decimal", "0", "0", "18", "0", "0", "",
					 "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_goukei", "13", "", "YES", "decimal", "0", "0", "18", "0", "0",
					 "", "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_ritsu", "14", "", "YES", "decimal", "0", "0", "18", "0", "0", "",
					 "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_kousyu", "15", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_tyumon", "tyu_irai", "16", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_tyumon", "tyu_id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_tyumon() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *tyu_name = new char[511];
		char *tyu_basyo = new char[511];
		char *tyu_zyoken = new char[511];
		char *tyu_kousyu = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_tyumon rec;
				com->GetData(1, SQL_C_LONG, &rec.tyu_id, sizeof(rec.tyu_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.tyu_kouji, sizeof(rec.tyu_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.tyu_gyosya, sizeof(rec.tyu_gyosya), 0);
				com->GetData(4, SQL_C_LONG, &rec.tyu_seq, sizeof(rec.tyu_seq), 0);
				memset(tyu_name, 0, 511);
				com->GetData(5, SQL_C_CHAR, tyu_name, 511, 0);
				rec.tyu_name = (char *)tyu_name;
				memset(tyu_basyo, 0, 511);
				com->GetData(6, SQL_C_CHAR, tyu_basyo, 511, 0);
				rec.tyu_basyo = (char *)tyu_basyo;
				memset(tyu_zyoken, 0, 511);
				com->GetData(7, SQL_C_CHAR, tyu_zyoken, 511, 0);
				rec.tyu_zyoken = (char *)tyu_zyoken;
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.tyu_date, sizeof(rec.tyu_date), 0);
				com->GetData(9, SQL_C_TYPE_TIMESTAMP, &rec.tyu_kaisi, sizeof(rec.tyu_kaisi), 0);
				com->GetData(10, SQL_C_TYPE_TIMESTAMP, &rec.tyu_owari, sizeof(rec.tyu_owari), 0);
				com->GetData(11, SQL_C_NUMERIC, &rec.tyu_kingaku, sizeof(rec.tyu_kingaku), 0);
				com->GetData(12, SQL_C_NUMERIC, &rec.tyu_zei, sizeof(rec.tyu_zei), 0);
				com->GetData(13, SQL_C_NUMERIC, &rec.tyu_goukei, sizeof(rec.tyu_goukei), 0);
				com->GetData(14, SQL_C_NUMERIC, &rec.tyu_ritsu, sizeof(rec.tyu_ritsu), 0);
				memset(tyu_kousyu, 0, 511);
				com->GetData(15, SQL_C_CHAR, tyu_kousyu, 511, 0);
				rec.tyu_kousyu = (char *)tyu_kousyu;
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.tyu_irai, sizeof(rec.tyu_irai), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] tyu_name;
		delete[] tyu_basyo;
		delete[] tyu_zyoken;
		delete[] tyu_kousyu;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_tyumon operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_tyumon &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_tyumon rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_tyumon> m_Data;
};
class CR_t_ukeoi : public COdbcRecord {
public:
	CR_t_ukeoi() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_ukeoi() {}

	void Initialize() {
		kai00 = 0;
		Kai01 = "";
		Kai02 = "";
		Kai03 = "";
		Kai04 = "";
		Kai05 = "";
		Kai06 = "";
		Kai07 = "";
		Kai08 = "";
		Kai09 = "";
		Kai10 = "";
		Kai11 = "";
		Kai12 = "";
	}

public:
	SQLINTEGER kai00;
	std::string Kai01;
	std::string Kai02;
	std::string Kai03;
	std::string Kai04;
	std::string Kai05;
	std::string Kai06;
	std::string Kai07;
	std::string Kai08;
	std::string Kai09;
	std::string Kai10;
	std::string Kai11;
	std::string Kai12;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kai00;
		} break;
		case 1: {
			ss << this->Kai01;
		} break;
		case 2: {
			ss << this->Kai02;
		} break;
		case 3: {
			ss << this->Kai03;
		} break;
		case 4: {
			ss << this->Kai04;
		} break;
		case 5: {
			ss << this->Kai05;
		} break;
		case 6: {
			ss << this->Kai06;
		} break;
		case 7: {
			ss << this->Kai07;
		} break;
		case 8: {
			ss << this->Kai08;
		} break;
		case 9: {
			ss << this->Kai09;
		} break;
		case 10: {
			ss << this->Kai10;
		} break;
		case 11: {
			ss << this->Kai11;
		} break;
		case 12: {
			ss << this->Kai12;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_ukeoi : public COdbcTable {
public:
	CT_t_ukeoi() : COdbcTable() {
		m_TableName = "t_ukeoi";
		m_SqlSELECT = "SELECT "
					  "kai00,"
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08,"
					  "Kai09,"
					  "Kai10,"
					  "Kai11,"
					  "Kai12"
					  " FROM t_ukeoi";
		m_SqlINSERT = "INSERT INTO t_ukeoi ("
					  "kai00,"
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08,"
					  "Kai09,"
					  "Kai10,"
					  "Kai11,"
					  "Kai12)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_ukeoi SET "
					  "kai00 = ?,"
					  "Kai01 = ?,"
					  "Kai02 = ?,"
					  "Kai03 = ?,"
					  "Kai04 = ?,"
					  "Kai05 = ?,"
					  "Kai06 = ?,"
					  "Kai07 = ?,"
					  "Kai08 = ?,"
					  "Kai09 = ?,"
					  "Kai10 = ?,"
					  "Kai11 = ?,"
					  "Kai12 = ?";

		m_SqlDELETE = "DELETE t_ukeoi ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_ukeoi", "kai00", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai01", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai02", "3", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai03", "4", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai04", "5", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai05", "6", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai06", "7", "", "YES", "nvarchar", "30", "60", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai07", "8", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai08", "9", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai09", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai10", "11", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai11", "12", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_ukeoi", "Kai12", "13", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_ukeoi() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *Kai01 = new char[101];
		char *Kai02 = new char[101];
		char *Kai03 = new char[101];
		char *Kai04 = new char[41];
		char *Kai05 = new char[101];
		char *Kai06 = new char[61];
		char *Kai07 = new char[41];
		char *Kai08 = new char[41];
		char *Kai09 = new char[101];
		char *Kai10 = new char[101];
		char *Kai11 = new char[101];
		char *Kai12 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_ukeoi rec;
				com->GetData(1, SQL_C_LONG, &rec.kai00, sizeof(rec.kai00), 0);
				memset(Kai01, 0, 101);
				com->GetData(2, SQL_C_CHAR, Kai01, 101, 0);
				rec.Kai01 = (char *)Kai01;
				memset(Kai02, 0, 101);
				com->GetData(3, SQL_C_CHAR, Kai02, 101, 0);
				rec.Kai02 = (char *)Kai02;
				memset(Kai03, 0, 101);
				com->GetData(4, SQL_C_CHAR, Kai03, 101, 0);
				rec.Kai03 = (char *)Kai03;
				memset(Kai04, 0, 41);
				com->GetData(5, SQL_C_CHAR, Kai04, 41, 0);
				rec.Kai04 = (char *)Kai04;
				memset(Kai05, 0, 101);
				com->GetData(6, SQL_C_CHAR, Kai05, 101, 0);
				rec.Kai05 = (char *)Kai05;
				memset(Kai06, 0, 61);
				com->GetData(7, SQL_C_CHAR, Kai06, 61, 0);
				rec.Kai06 = (char *)Kai06;
				memset(Kai07, 0, 41);
				com->GetData(8, SQL_C_CHAR, Kai07, 41, 0);
				rec.Kai07 = (char *)Kai07;
				memset(Kai08, 0, 41);
				com->GetData(9, SQL_C_CHAR, Kai08, 41, 0);
				rec.Kai08 = (char *)Kai08;
				memset(Kai09, 0, 101);
				com->GetData(10, SQL_C_CHAR, Kai09, 101, 0);
				rec.Kai09 = (char *)Kai09;
				memset(Kai10, 0, 101);
				com->GetData(11, SQL_C_CHAR, Kai10, 101, 0);
				rec.Kai10 = (char *)Kai10;
				memset(Kai11, 0, 101);
				com->GetData(12, SQL_C_CHAR, Kai11, 101, 0);
				rec.Kai11 = (char *)Kai11;
				memset(Kai12, 0, 101);
				com->GetData(13, SQL_C_CHAR, Kai12, 101, 0);
				rec.Kai12 = (char *)Kai12;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] Kai01;
		delete[] Kai02;
		delete[] Kai03;
		delete[] Kai04;
		delete[] Kai05;
		delete[] Kai06;
		delete[] Kai07;
		delete[] Kai08;
		delete[] Kai09;
		delete[] Kai10;
		delete[] Kai11;
		delete[] Kai12;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_ukeoi operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_ukeoi &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_ukeoi rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_ukeoi> m_Data;
};
class CR_t_zairyou : public COdbcRecord {
public:
	CR_t_zairyou() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_zairyou() {}

	void Initialize() {
		zaicode = 0;
		zainame = "";
		zaikana = "";
		zaikikaku = "";
		zaitani = "";
		zaitanka = 0;
	}

public:
	SQLINTEGER zaicode;
	std::string zainame;
	std::string zaikana;
	std::string zaikikaku;
	std::string zaitani;
	SQLINTEGER zaitanka;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->zaicode;
		} break;
		case 1: {
			ss << this->zainame;
		} break;
		case 2: {
			ss << this->zaikana;
		} break;
		case 3: {
			ss << this->zaikikaku;
		} break;
		case 4: {
			ss << this->zaitani;
		} break;
		case 5: {
			ss << this->zaitanka;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_zairyou : public COdbcTable {
public:
	CT_t_zairyou() : COdbcTable() {
		m_TableName = "t_zairyou";
		m_SqlSELECT = "SELECT "
					  "zaicode,"
					  "zainame,"
					  "zaikana,"
					  "zaikikaku,"
					  "zaitani,"
					  "zaitanka"
					  " FROM t_zairyou";
		m_SqlINSERT = "INSERT INTO t_zairyou ("
					  "zaicode,"
					  "zainame,"
					  "zaikana,"
					  "zaikikaku,"
					  "zaitani,"
					  "zaitanka)"
					  " VALUES ( ?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_zairyou SET "
					  "zaicode = ?,"
					  "zainame = ?,"
					  "zaikana = ?,"
					  "zaikikaku = ?,"
					  "zaitani = ?,"
					  "zaitanka = ?";

		m_SqlDELETE = "DELETE t_zairyou ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_zairyou", "zaicode", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyou", "zainame", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyou", "zaikana", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyou", "zaikikaku", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyou", "zaitani", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyou", "zaitanka", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_zairyou() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *zainame = new char[511];
		char *zaikana = new char[511];
		char *zaikikaku = new char[511];
		char *zaitani = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_zairyou rec;
				com->GetData(1, SQL_C_LONG, &rec.zaicode, sizeof(rec.zaicode), 0);
				memset(zainame, 0, 511);
				com->GetData(2, SQL_C_CHAR, zainame, 511, 0);
				rec.zainame = (char *)zainame;
				memset(zaikana, 0, 511);
				com->GetData(3, SQL_C_CHAR, zaikana, 511, 0);
				rec.zaikana = (char *)zaikana;
				memset(zaikikaku, 0, 511);
				com->GetData(4, SQL_C_CHAR, zaikikaku, 511, 0);
				rec.zaikikaku = (char *)zaikikaku;
				memset(zaitani, 0, 511);
				com->GetData(5, SQL_C_CHAR, zaitani, 511, 0);
				rec.zaitani = (char *)zaitani;
				com->GetData(6, SQL_C_LONG, &rec.zaitanka, sizeof(rec.zaitanka), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] zainame;
		delete[] zaikana;
		delete[] zaikikaku;
		delete[] zaitani;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_zairyou operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_zairyou &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_zairyou rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_zairyou> m_Data;
};
class CR_t_zairyoudata : public COdbcRecord {
public:
	CR_t_zairyoudata() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_zairyoudata() {}

	void Initialize() {
		zdkouji = 0;
		zdcode = 0;
		zdname = "";
		zdkikaku = "";
		zdsuu = 0.0;
		zdtani = "";
		zdtanka = 0.0;
		zdkingaku = 0.0;
	}

public:
	SQLINTEGER zdkouji;
	SQLINTEGER zdcode;
	std::string zdname;
	std::string zdkikaku;
	SQLFLOAT zdsuu;
	std::string zdtani;
	SQLFLOAT zdtanka;
	SQLFLOAT zdkingaku;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->zdkouji;
		} break;
		case 1: {
			ss << this->zdcode;
		} break;
		case 2: {
			ss << this->zdname;
		} break;
		case 3: {
			ss << this->zdkikaku;
		} break;
		case 4: {
			ss << this->zdsuu;
		} break;
		case 5: {
			ss << this->zdtani;
		} break;
		case 6: {
			ss << this->zdtanka;
		} break;
		case 7: {
			ss << this->zdkingaku;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_zairyoudata : public COdbcTable {
public:
	CT_t_zairyoudata() : COdbcTable() {
		m_TableName = "t_zairyoudata";
		m_SqlSELECT = "SELECT "
					  "zdkouji,"
					  "zdcode,"
					  "zdname,"
					  "zdkikaku,"
					  "zdsuu,"
					  "zdtani,"
					  "zdtanka,"
					  "zdkingaku"
					  " FROM t_zairyoudata";
		m_SqlINSERT = "INSERT INTO t_zairyoudata ("
					  "zdkouji,"
					  "zdcode,"
					  "zdname,"
					  "zdkikaku,"
					  "zdsuu,"
					  "zdtani,"
					  "zdtanka,"
					  "zdkingaku)"
					  " VALUES ( ?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_zairyoudata SET "
					  "zdkouji = ?,"
					  "zdcode = ?,"
					  "zdname = ?,"
					  "zdkikaku = ?,"
					  "zdsuu = ?,"
					  "zdtani = ?,"
					  "zdtanka = ?,"
					  "zdkingaku = ?";

		m_SqlDELETE = "DELETE t_zairyoudata ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_zairyoudata", "zdkouji", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyoudata", "zdcode", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyoudata", "zdname", "3", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyoudata", "zdkikaku", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyoudata", "zdsuu", "5", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyoudata", "zdtani", "6", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyoudata", "zdtanka", "7", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_zairyoudata", "zdkingaku", "8", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_t_zairyoudata() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *zdname = new char[511];
		char *zdkikaku = new char[511];
		char *zdtani = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_zairyoudata rec;
				com->GetData(1, SQL_C_LONG, &rec.zdkouji, sizeof(rec.zdkouji), 0);
				com->GetData(2, SQL_C_LONG, &rec.zdcode, sizeof(rec.zdcode), 0);
				memset(zdname, 0, 511);
				com->GetData(3, SQL_C_CHAR, zdname, 511, 0);
				rec.zdname = (char *)zdname;
				memset(zdkikaku, 0, 511);
				com->GetData(4, SQL_C_CHAR, zdkikaku, 511, 0);
				rec.zdkikaku = (char *)zdkikaku;
				com->GetData(5, SQL_C_DOUBLE, &rec.zdsuu, sizeof(rec.zdsuu), 0);
				memset(zdtani, 0, 511);
				com->GetData(6, SQL_C_CHAR, zdtani, 511, 0);
				rec.zdtani = (char *)zdtani;
				com->GetData(7, SQL_C_DOUBLE, &rec.zdtanka, sizeof(rec.zdtanka), 0);
				com->GetData(8, SQL_C_DOUBLE, &rec.zdkingaku, sizeof(rec.zdkingaku), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] zdname;
		delete[] zdkikaku;
		delete[] zdtani;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_zairyoudata operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_zairyoudata &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_zairyoudata rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_zairyoudata> m_Data;
};
class CR_t_meisai : public COdbcRecord {
public:
	CR_t_meisai() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_meisai() {}

	void Initialize() {
		mes_id = 0;
		mes_kouji = 0;
		mes_gyo = 0;
		mes_name = "";
		mes_kikaku = "";
		mes_suu = 0.0;
		mes_tani = "";
		memset(&mes_tanka, 0, sizeof(mes_tanka));
		mes_syukei = 0;
		memset(&mes_kingaku, 0, sizeof(mes_kingaku));
		mes_tekiyou = "";
	}

public:
	SQLINTEGER mes_id;
	SQLINTEGER mes_kouji;
	SQLINTEGER mes_gyo;
	std::string mes_name;
	std::string mes_kikaku;
	SQLFLOAT mes_suu;
	std::string mes_tani;
	SQL_NUMERIC_STRUCT mes_tanka;
	SQLINTEGER mes_syukei;
	SQL_NUMERIC_STRUCT mes_kingaku;
	std::string mes_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->mes_id;
		} break;
		case 1: {
			ss << this->mes_kouji;
		} break;
		case 2: {
			ss << this->mes_gyo;
		} break;
		case 3: {
			ss << this->mes_name;
		} break;
		case 4: {
			ss << this->mes_kikaku;
		} break;
		case 5: {
			ss << this->mes_suu;
		} break;
		case 6: {
			ss << this->mes_tani;
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->mes_tanka);
		} break;
		case 8: {
			ss << this->mes_syukei;
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->mes_kingaku);
		} break;
		case 10: {
			ss << this->mes_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_meisai : public COdbcTable {
public:
	CT_t_meisai() : COdbcTable() {
		m_TableName = "t_meisai";
		m_SqlSELECT = "SELECT "
					  "mes_id,"
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou"
					  " FROM t_meisai";
		m_SqlINSERT = "INSERT INTO t_meisai ("
					  "mes_kouji,"
					  "mes_gyo,"
					  "mes_name,"
					  "mes_kikaku,"
					  "mes_suu,"
					  "mes_tani,"
					  "mes_tanka,"
					  "mes_syukei,"
					  "mes_kingaku,"
					  "mes_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_meisai SET "
					  "mes_kouji = ?,"
					  "mes_gyo = ?,"
					  "mes_name = ?,"
					  "mes_kikaku = ?,"
					  "mes_suu = ?,"
					  "mes_tani = ?,"
					  "mes_tanka = ?,"
					  "mes_syukei = ?,"
					  "mes_kingaku = ?,"
					  "mes_tekiyou = ?";

		m_SqlDELETE = "DELETE t_meisai ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_name", "4", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_kikaku", "5", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_suu", "6", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_tani", "7", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_tanka", "8", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_syukei", "9", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_kingaku", "10", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_meisai", "mes_tekiyou", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_meisai", "mes_id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_meisai() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *mes_name = new char[511];
		char *mes_kikaku = new char[511];
		char *mes_tani = new char[101];
		char *mes_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_meisai rec;
				com->GetData(1, SQL_C_LONG, &rec.mes_id, sizeof(rec.mes_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.mes_kouji, sizeof(rec.mes_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.mes_gyo, sizeof(rec.mes_gyo), 0);
				memset(mes_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, mes_name, 511, 0);
				rec.mes_name = (char *)mes_name;
				memset(mes_kikaku, 0, 511);
				com->GetData(5, SQL_C_CHAR, mes_kikaku, 511, 0);
				rec.mes_kikaku = (char *)mes_kikaku;
				com->GetData(6, SQL_C_DOUBLE, &rec.mes_suu, sizeof(rec.mes_suu), 0);
				memset(mes_tani, 0, 101);
				com->GetData(7, SQL_C_CHAR, mes_tani, 101, 0);
				rec.mes_tani = (char *)mes_tani;
				com->GetData(8, SQL_C_NUMERIC, &rec.mes_tanka, sizeof(rec.mes_tanka), 0);
				com->GetData(9, SQL_C_LONG, &rec.mes_syukei, sizeof(rec.mes_syukei), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.mes_kingaku, sizeof(rec.mes_kingaku), 0);
				memset(mes_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, mes_tekiyou, 511, 0);
				rec.mes_tekiyou = (char *)mes_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] mes_name;
		delete[] mes_kikaku;
		delete[] mes_tani;
		delete[] mes_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_meisai operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_meisai &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_meisai rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_meisai> m_Data;
};
class CR_tem : public COdbcRecord {
public:
	CR_tem() : COdbcRecord() { Initialize(); }
	virtual ~CR_tem() {}

	void Initialize() {
		id = 0;
		name = "";
	}

public:
	SQLINTEGER id;
	std::string name;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->id;
		} break;
		case 1: {
			ss << this->name;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_tem : public COdbcTable {
public:
	CT_tem() : COdbcTable() {
		m_TableName = "tem";
		m_SqlSELECT = "SELECT "
					  "id,"
					  "name"
					  " FROM tem";
		m_SqlINSERT = "INSERT INTO tem ("
					  "id,"
					  "name)"
					  " VALUES ( ?,?)";
		m_SqlUPDATE = "UPDATE tem SET "
					  "id = ?,"
					  "name = ?";

		m_SqlDELETE = "DELETE tem ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "tem", "id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "tem", "name", "2", "", "YES", "nvarchar", "-1", "-1", "0", "0", "0", "UNICODE",
					 "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_tem() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *name = new char[0];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_tem rec;
				com->GetData(1, SQL_C_LONG, &rec.id, sizeof(rec.id), 0);
				memset(name, 0, 0);
				com->GetData(2, SQL_C_CHAR, name, 0, 0);
				rec.name = (char *)name;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] name;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_tem operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_tem &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_tem rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_tem> m_Data;
};
class CR_t_temp_meisai : public COdbcRecord {
public:
	CR_t_temp_meisai() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_temp_meisai() {}

	void Initialize() {
		tmm_id = 0;
		tmm_kouji = 0;
		tmm_gyo = 0;
		tmm_name = "";
		tmm_kikaku = "";
		tmm_suu = 0.0;
		tmm_tani = "";
		memset(&tmm_tanka, 0, sizeof(tmm_tanka));
		tmm_syukei = 0;
		memset(&tmm_kingaku, 0, sizeof(tmm_kingaku));
		tmm_tekiyou = "";
	}

public:
	SQLINTEGER tmm_id;
	SQLINTEGER tmm_kouji;
	SQLINTEGER tmm_gyo;
	std::string tmm_name;
	std::string tmm_kikaku;
	SQLFLOAT tmm_suu;
	std::string tmm_tani;
	SQL_NUMERIC_STRUCT tmm_tanka;
	SQLINTEGER tmm_syukei;
	SQL_NUMERIC_STRUCT tmm_kingaku;
	std::string tmm_tekiyou;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->tmm_id;
		} break;
		case 1: {
			ss << this->tmm_kouji;
		} break;
		case 2: {
			ss << this->tmm_gyo;
		} break;
		case 3: {
			ss << this->tmm_name;
		} break;
		case 4: {
			ss << this->tmm_kikaku;
		} break;
		case 5: {
			ss << this->tmm_suu;
		} break;
		case 6: {
			ss << this->tmm_tani;
		} break;
		case 7: {
			ss << COdbcColumn::NumericToString(&this->tmm_tanka);
		} break;
		case 8: {
			ss << this->tmm_syukei;
		} break;
		case 9: {
			ss << COdbcColumn::NumericToString(&this->tmm_kingaku);
		} break;
		case 10: {
			ss << this->tmm_tekiyou;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_temp_meisai : public COdbcTable {
public:
	CT_t_temp_meisai() : COdbcTable() {
		m_TableName = "t_temp_meisai";
		m_SqlSELECT = "SELECT "
					  "tmm_id,"
					  "tmm_kouji,"
					  "tmm_gyo,"
					  "tmm_name,"
					  "tmm_kikaku,"
					  "tmm_suu,"
					  "tmm_tani,"
					  "tmm_tanka,"
					  "tmm_syukei,"
					  "tmm_kingaku,"
					  "tmm_tekiyou"
					  " FROM t_temp_meisai";
		m_SqlINSERT = "INSERT INTO t_temp_meisai ("
					  "tmm_kouji,"
					  "tmm_gyo,"
					  "tmm_name,"
					  "tmm_kikaku,"
					  "tmm_suu,"
					  "tmm_tani,"
					  "tmm_tanka,"
					  "tmm_syukei,"
					  "tmm_kingaku,"
					  "tmm_tekiyou)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE t_temp_meisai SET "
					  "tmm_kouji = ?,"
					  "tmm_gyo = ?,"
					  "tmm_name = ?,"
					  "tmm_kikaku = ?,"
					  "tmm_suu = ?,"
					  "tmm_tani = ?,"
					  "tmm_tanka = ?,"
					  "tmm_syukei = ?,"
					  "tmm_kingaku = ?,"
					  "tmm_tekiyou = ?";

		m_SqlDELETE = "DELETE t_temp_meisai ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 1, _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_kouji", "2", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_gyo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_name", "4", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_kikaku", "5", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_suu", "6", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_tani", "7", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_tanka", "8", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_syukei", "9", "", "YES", "int", "0", "0", "10", "0", "0",
					 "", "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_kingaku", "10", "", "YES", "money", "0", "0", "19", "4",
					 "0", "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_temp_meisai", "tmm_tekiyou", "11", "", "YES", "nvarchar", "255", "510", "0",
					 "0", "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_temp_meisai", "tmm_id", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_temp_meisai() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *tmm_name = new char[511];
		char *tmm_kikaku = new char[511];
		char *tmm_tani = new char[101];
		char *tmm_tekiyou = new char[511];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_temp_meisai rec;
				com->GetData(1, SQL_C_LONG, &rec.tmm_id, sizeof(rec.tmm_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.tmm_kouji, sizeof(rec.tmm_kouji), 0);
				com->GetData(3, SQL_C_LONG, &rec.tmm_gyo, sizeof(rec.tmm_gyo), 0);
				memset(tmm_name, 0, 511);
				com->GetData(4, SQL_C_CHAR, tmm_name, 511, 0);
				rec.tmm_name = (char *)tmm_name;
				memset(tmm_kikaku, 0, 511);
				com->GetData(5, SQL_C_CHAR, tmm_kikaku, 511, 0);
				rec.tmm_kikaku = (char *)tmm_kikaku;
				com->GetData(6, SQL_C_DOUBLE, &rec.tmm_suu, sizeof(rec.tmm_suu), 0);
				memset(tmm_tani, 0, 101);
				com->GetData(7, SQL_C_CHAR, tmm_tani, 101, 0);
				rec.tmm_tani = (char *)tmm_tani;
				com->GetData(8, SQL_C_NUMERIC, &rec.tmm_tanka, sizeof(rec.tmm_tanka), 0);
				com->GetData(9, SQL_C_LONG, &rec.tmm_syukei, sizeof(rec.tmm_syukei), 0);
				com->GetData(10, SQL_C_NUMERIC, &rec.tmm_kingaku, sizeof(rec.tmm_kingaku), 0);
				memset(tmm_tekiyou, 0, 511);
				com->GetData(11, SQL_C_CHAR, tmm_tekiyou, 511, 0);
				rec.tmm_tekiyou = (char *)tmm_tekiyou;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] tmm_name;
		delete[] tmm_kikaku;
		delete[] tmm_tani;
		delete[] tmm_tekiyou;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_temp_meisai operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_temp_meisai &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_temp_meisai rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_temp_meisai> m_Data;
};
class CR_v_syain1 : public COdbcRecord {
public:
	CR_v_syain1() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_syain1() {}

	void Initialize() {
		MBR010 = 0;
		MBR020 = "";
		MBR030 = 0.0;
		MBR040 = 0.0;
		MBR050 = 0.0;
		MBR060 = "";
		MBR070 = "";
		MBR090 = "";
		MBR100 = "";
		MBR110 = "";
		MBR120 = "";
		MBR130 = "";
	}

public:
	SQLINTEGER MBR010;
	std::string MBR020;
	SQLFLOAT MBR030;
	SQLFLOAT MBR040;
	SQLFLOAT MBR050;
	std::string MBR060;
	std::string MBR070;
	TIMESTAMP_STRUCT MBR080;
	std::string MBR090;
	std::string MBR100;
	std::string MBR110;
	std::string MBR120;
	std::string MBR130;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->MBR010;
		} break;
		case 1: {
			ss << this->MBR020;
		} break;
		case 2: {
			ss << this->MBR030;
		} break;
		case 3: {
			ss << this->MBR040;
		} break;
		case 4: {
			ss << this->MBR050;
		} break;
		case 5: {
			ss << this->MBR060;
		} break;
		case 6: {
			ss << this->MBR070;
		} break;
		case 7: {
			COdbcDateTime date(&this->MBR080);
			ss << date.to_string();
		} break;
		case 8: {
			ss << this->MBR090;
		} break;
		case 9: {
			ss << this->MBR100;
		} break;
		case 10: {
			ss << this->MBR110;
		} break;
		case 11: {
			ss << this->MBR120;
		} break;
		case 12: {
			ss << this->MBR130;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_syain1 : public COdbcTable {
public:
	CT_v_syain1() : COdbcTable() {
		m_TableName = "v_syain1";
		m_SqlSELECT = "SELECT "
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130"
					  " FROM v_syain1";
		m_SqlINSERT = "INSERT INTO v_syain1 ("
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_syain1 SET "
					  "MBR010 = ?,"
					  "MBR020 = ?,"
					  "MBR030 = ?,"
					  "MBR040 = ?,"
					  "MBR050 = ?,"
					  "MBR060 = ?,"
					  "MBR070 = ?,"
					  "MBR080 = ?,"
					  "MBR090 = ?,"
					  "MBR100 = ?,"
					  "MBR110 = ?,"
					  "MBR120 = ?,"
					  "MBR130 = ?";

		m_SqlDELETE = "DELETE v_syain1 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR010", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR020", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR030", "3", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR040", "4", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR050", "5", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR060", "6", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR070", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR080", "8", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR090", "9", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR100", "10", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR110", "11", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR120", "12", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain1", "MBR130", "13", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_syain1() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *MBR020 = new char[101];
		char *MBR060 = new char[511];
		char *MBR070 = new char[511];
		char *MBR090 = new char[511];
		char *MBR100 = new char[511];
		char *MBR110 = new char[511];
		char *MBR120 = new char[41];
		char *MBR130 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_syain1 rec;
				com->GetData(1, SQL_C_LONG, &rec.MBR010, sizeof(rec.MBR010), 0);
				memset(MBR020, 0, 101);
				com->GetData(2, SQL_C_CHAR, MBR020, 101, 0);
				rec.MBR020 = (char *)MBR020;
				com->GetData(3, SQL_C_DOUBLE, &rec.MBR030, sizeof(rec.MBR030), 0);
				com->GetData(4, SQL_C_DOUBLE, &rec.MBR040, sizeof(rec.MBR040), 0);
				com->GetData(5, SQL_C_DOUBLE, &rec.MBR050, sizeof(rec.MBR050), 0);
				memset(MBR060, 0, 511);
				com->GetData(6, SQL_C_CHAR, MBR060, 511, 0);
				rec.MBR060 = (char *)MBR060;
				memset(MBR070, 0, 511);
				com->GetData(7, SQL_C_CHAR, MBR070, 511, 0);
				rec.MBR070 = (char *)MBR070;
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.MBR080, sizeof(rec.MBR080), 0);
				memset(MBR090, 0, 511);
				com->GetData(9, SQL_C_CHAR, MBR090, 511, 0);
				rec.MBR090 = (char *)MBR090;
				memset(MBR100, 0, 511);
				com->GetData(10, SQL_C_CHAR, MBR100, 511, 0);
				rec.MBR100 = (char *)MBR100;
				memset(MBR110, 0, 511);
				com->GetData(11, SQL_C_CHAR, MBR110, 511, 0);
				rec.MBR110 = (char *)MBR110;
				memset(MBR120, 0, 41);
				com->GetData(12, SQL_C_CHAR, MBR120, 41, 0);
				rec.MBR120 = (char *)MBR120;
				memset(MBR130, 0, 101);
				com->GetData(13, SQL_C_CHAR, MBR130, 101, 0);
				rec.MBR130 = (char *)MBR130;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] MBR020;
		delete[] MBR060;
		delete[] MBR070;
		delete[] MBR090;
		delete[] MBR100;
		delete[] MBR110;
		delete[] MBR120;
		delete[] MBR130;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_syain1 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_syain1 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_syain1 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_syain1> m_Data;
};
class CR_v_syain2 : public COdbcRecord {
public:
	CR_v_syain2() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_syain2() {}

	void Initialize() {
		MBR010 = 0;
		MBR020 = "";
		MBR030 = 0.0;
		MBR040 = 0.0;
		MBR050 = 0.0;
		MBR060 = "";
		MBR070 = "";
		MBR090 = "";
		MBR100 = "";
		MBR110 = "";
		MBR120 = "";
		MBR130 = "";
	}

public:
	SQLINTEGER MBR010;
	std::string MBR020;
	SQLFLOAT MBR030;
	SQLFLOAT MBR040;
	SQLFLOAT MBR050;
	std::string MBR060;
	std::string MBR070;
	TIMESTAMP_STRUCT MBR080;
	std::string MBR090;
	std::string MBR100;
	std::string MBR110;
	std::string MBR120;
	std::string MBR130;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->MBR010;
		} break;
		case 1: {
			ss << this->MBR020;
		} break;
		case 2: {
			ss << this->MBR030;
		} break;
		case 3: {
			ss << this->MBR040;
		} break;
		case 4: {
			ss << this->MBR050;
		} break;
		case 5: {
			ss << this->MBR060;
		} break;
		case 6: {
			ss << this->MBR070;
		} break;
		case 7: {
			COdbcDateTime date(&this->MBR080);
			ss << date.to_string();
		} break;
		case 8: {
			ss << this->MBR090;
		} break;
		case 9: {
			ss << this->MBR100;
		} break;
		case 10: {
			ss << this->MBR110;
		} break;
		case 11: {
			ss << this->MBR120;
		} break;
		case 12: {
			ss << this->MBR130;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_syain2 : public COdbcTable {
public:
	CT_v_syain2() : COdbcTable() {
		m_TableName = "v_syain2";
		m_SqlSELECT = "SELECT "
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130"
					  " FROM v_syain2";
		m_SqlINSERT = "INSERT INTO v_syain2 ("
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_syain2 SET "
					  "MBR010 = ?,"
					  "MBR020 = ?,"
					  "MBR030 = ?,"
					  "MBR040 = ?,"
					  "MBR050 = ?,"
					  "MBR060 = ?,"
					  "MBR070 = ?,"
					  "MBR080 = ?,"
					  "MBR090 = ?,"
					  "MBR100 = ?,"
					  "MBR110 = ?,"
					  "MBR120 = ?,"
					  "MBR130 = ?";

		m_SqlDELETE = "DELETE v_syain2 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR010", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR020", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR030", "3", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR040", "4", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR050", "5", "", "YES", "float", "0", "0", "53", "0", "0", "", "",
					 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR060", "6", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR070", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR080", "8", "", "YES", "smalldatetime", "0", "0", "0", "0", "0",
					 "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR090", "9", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR100", "10", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR110", "11", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR120", "12", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_syain2", "MBR130", "13", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_syain2() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *MBR020 = new char[101];
		char *MBR060 = new char[511];
		char *MBR070 = new char[511];
		char *MBR090 = new char[511];
		char *MBR100 = new char[511];
		char *MBR110 = new char[511];
		char *MBR120 = new char[41];
		char *MBR130 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_syain2 rec;
				com->GetData(1, SQL_C_LONG, &rec.MBR010, sizeof(rec.MBR010), 0);
				memset(MBR020, 0, 101);
				com->GetData(2, SQL_C_CHAR, MBR020, 101, 0);
				rec.MBR020 = (char *)MBR020;
				com->GetData(3, SQL_C_DOUBLE, &rec.MBR030, sizeof(rec.MBR030), 0);
				com->GetData(4, SQL_C_DOUBLE, &rec.MBR040, sizeof(rec.MBR040), 0);
				com->GetData(5, SQL_C_DOUBLE, &rec.MBR050, sizeof(rec.MBR050), 0);
				memset(MBR060, 0, 511);
				com->GetData(6, SQL_C_CHAR, MBR060, 511, 0);
				rec.MBR060 = (char *)MBR060;
				memset(MBR070, 0, 511);
				com->GetData(7, SQL_C_CHAR, MBR070, 511, 0);
				rec.MBR070 = (char *)MBR070;
				com->GetData(8, SQL_C_TYPE_TIMESTAMP, &rec.MBR080, sizeof(rec.MBR080), 0);
				memset(MBR090, 0, 511);
				com->GetData(9, SQL_C_CHAR, MBR090, 511, 0);
				rec.MBR090 = (char *)MBR090;
				memset(MBR100, 0, 511);
				com->GetData(10, SQL_C_CHAR, MBR100, 511, 0);
				rec.MBR100 = (char *)MBR100;
				memset(MBR110, 0, 511);
				com->GetData(11, SQL_C_CHAR, MBR110, 511, 0);
				rec.MBR110 = (char *)MBR110;
				memset(MBR120, 0, 41);
				com->GetData(12, SQL_C_CHAR, MBR120, 41, 0);
				rec.MBR120 = (char *)MBR120;
				memset(MBR130, 0, 101);
				com->GetData(13, SQL_C_CHAR, MBR130, 101, 0);
				rec.MBR130 = (char *)MBR130;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] MBR020;
		delete[] MBR060;
		delete[] MBR070;
		delete[] MBR090;
		delete[] MBR100;
		delete[] MBR110;
		delete[] MBR120;
		delete[] MBR130;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_syain2 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_syain2 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_syain2 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_syain2> m_Data;
};
class CR_v_koujisyain : public COdbcRecord {
public:
	CR_v_koujisyain() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_koujisyain() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		km_syoken = "";
		km_zai00 = 0.0;
		km_zai01 = 0.0;
		km_zai02 = 0.0;
		km_zai03 = 0.0;
		km_zai04 = 0.0;
		km_rou01 = 0.0;
		km_rou02 = 0.0;
		km_rou03 = 0.0;
		km_rou04 = 0.0;
		km_gai01 = 0.0;
		km_gai02 = 0.0;
		km_gai03 = 0.0;
		km_gai04 = 0.0;
		km_kik01 = 0.0;
		km_kik02 = 0.0;
		km_kik03 = 0.0;
		km_kik04 = 0.0;
		km_kas01 = 0.0;
		km_kas02 = 0.0;
		km_kas03 = 0.0;
		km_kas04 = 0.0;
		km_kyuyo01 = 0.0;
		km_kyuyo02 = 0.0;
		km_kyuyo03 = 0.0;
		km_kyuyo04 = 0.0;
		km_tyo01 = 0.0;
		km_tyo02 = 0.0;
		km_tyo03 = 0.0;
		km_tyo04 = 0.0;
		km_kan01 = 0.0;
		km_kan02 = 0.0;
		km_gou01 = 0.0;
		km_gou02 = 0.0;
		km_gou03 = 0.0;
		km_gou04 = 0.0;
		km_yos01 = 0.0;
		km_yos02 = 0.0;
		km_yos03 = 0.0;
		km_yos04 = 0.0;
		km_ipn01 = 0.0;
		km_ipn02 = 0.0;
		km_yosankei = 0.0;
		km_zisekikei = 0.0;
		km_rie01 = 0.0;
		km_rie02 = 0.0;
		km_rie03 = 0.0;
		km_rie04 = 0.0;
		km_hok01 = 0.0;
		km_hok02 = 0.0;
		km_nen = 0;
		km_tuk = 0;
		km_sya011 = 0;
		km_sya012 = "";
		km_sya021 = 0;
		km_sya022 = "";
		km_sya031 = 0;
		km_sya032 = "";
		km_nendo = 0;
		km_kei01 = 0.0;
		km_kei02 = 0.0;
		km_man01 = 0.0;
		km_man02 = 0.0;
		km_man03 = 0.0;
		km_man04 = 0.0;
		km_man05 = 0.0;
		km_wom01 = 0.0;
		km_wom02 = 0.0;
		km_wom03 = 0.0;
		km_wom04 = 0.0;
		km_wom05 = 0.0;
		km_syoteate = 0.0;
		km_tingin = 0.0;
		km_syaho01 = 0.0;
		km_koyou01 = 0.0;
		km_kyosai01 = 0.0;
		km_fukuri01 = 0.0;
		km_kyu011 = 0.0;
		km_kyu012 = 0.0;
		km_kyu013 = 0.0;
		km_kyu021 = 0.0;
		km_kyu022 = 0.0;
		km_kyu023 = 0.0;
		km_kyu031 = 0.0;
		km_kyu032 = 0.0;
		km_kyu033 = 0.0;
		km_kyu014 = 0.0;
		km_kyu015 = 0.0;
		km_kyu016 = 0.0;
		km_kyu024 = 0.0;
		km_kyu025 = 0.0;
		km_kyu026 = 0.0;
		km_kyu034 = 0.0;
		km_kyu035 = 0.0;
		km_kyu036 = 0.0;
		km_kyuyokei = 0.0;
		km_syaho02 = 0.0;
		km_koyou02 = 0.0;
		km_kyosai02 = 0.0;
		km_fukuri02 = 0.0;
		km_kyuyosou = 0.0;
		km_rousaihoken = 0.0;
		km_kks01 = 0.0;
		km_kks02 = 0.0;
		km_kks03 = 0.0;
		km_kks04 = 0.0;
		km_chidai = 0.0;
		km_kukakin = 0.0;
		km_tusin = 0.0;
		km_hokenryo = 0.0;
		km_zappi = 0.0;
		km_sonota = 0.0;
		km_corins = 0.0;
		km_kaigihi = 0.0;
		km_kaihi = 0.0;
		km_anzen = 0.0;
		km_kousai = 0.0;
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_sw = 0;
		km_bikou1 = "";
		km_bikou2 = "";
		km_nyuno = "";
		km_syouhizei = 0.0;
		km_ritsu = 0.0;
		MBR010 = 0;
		MBR020 = "";
		MBR030 = 0.0;
		MBR040 = 0.0;
		MBR050 = 0.0;
		MBR060 = "";
		MBR070 = "";
		MBR090 = "";
		MBR100 = "";
		MBR110 = "";
		MBR120 = "";
		MBR130 = "";
		Expr1 = 0;
		Expr2 = "";
		Expr3 = 0.0;
		Expr4 = 0.0;
		Expr5 = 0.0;
		Expr6 = "";
		Expr7 = "";
		Expr9 = "";
		Expr10 = "";
		Expr11 = "";
		Expr12 = "";
		Expr13 = "";
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	TIMESTAMP_STRUCT km_keidate;
	TIMESTAMP_STRUCT km_kaisi;
	TIMESTAMP_STRUCT km_owari;
	TIMESTAMP_STRUCT km_tyakou;
	TIMESTAMP_STRUCT km_kansei;
	TIMESTAMP_STRUCT km_kensa;
	std::string km_syoken;
	SQLFLOAT km_zai00;
	SQLFLOAT km_zai01;
	SQLFLOAT km_zai02;
	SQLFLOAT km_zai03;
	SQLFLOAT km_zai04;
	SQLFLOAT km_rou01;
	SQLFLOAT km_rou02;
	SQLFLOAT km_rou03;
	SQLFLOAT km_rou04;
	SQLFLOAT km_gai01;
	SQLFLOAT km_gai02;
	SQLFLOAT km_gai03;
	SQLFLOAT km_gai04;
	SQLFLOAT km_kik01;
	SQLFLOAT km_kik02;
	SQLFLOAT km_kik03;
	SQLFLOAT km_kik04;
	SQLFLOAT km_kas01;
	SQLFLOAT km_kas02;
	SQLFLOAT km_kas03;
	SQLFLOAT km_kas04;
	SQLFLOAT km_kyuyo01;
	SQLFLOAT km_kyuyo02;
	SQLFLOAT km_kyuyo03;
	SQLFLOAT km_kyuyo04;
	SQLFLOAT km_tyo01;
	SQLFLOAT km_tyo02;
	SQLFLOAT km_tyo03;
	SQLFLOAT km_tyo04;
	SQLFLOAT km_kan01;
	SQLFLOAT km_kan02;
	SQLFLOAT km_gou01;
	SQLFLOAT km_gou02;
	SQLFLOAT km_gou03;
	SQLFLOAT km_gou04;
	SQLFLOAT km_yos01;
	SQLFLOAT km_yos02;
	SQLFLOAT km_yos03;
	SQLFLOAT km_yos04;
	SQLFLOAT km_ipn01;
	SQLFLOAT km_ipn02;
	SQLFLOAT km_yosankei;
	SQLFLOAT km_zisekikei;
	SQLFLOAT km_rie01;
	SQLFLOAT km_rie02;
	SQLFLOAT km_rie03;
	SQLFLOAT km_rie04;
	SQLFLOAT km_hok01;
	SQLFLOAT km_hok02;
	SQLSMALLINT km_nen;
	SQLSMALLINT km_tuk;
	SQLINTEGER km_sya011;
	std::string km_sya012;
	SQLINTEGER km_sya021;
	std::string km_sya022;
	SQLINTEGER km_sya031;
	std::string km_sya032;
	SQLSMALLINT km_nendo;
	SQLFLOAT km_kei01;
	SQLFLOAT km_kei02;
	SQLFLOAT km_man01;
	SQLFLOAT km_man02;
	SQLFLOAT km_man03;
	SQLFLOAT km_man04;
	SQLFLOAT km_man05;
	SQLFLOAT km_wom01;
	SQLFLOAT km_wom02;
	SQLFLOAT km_wom03;
	SQLFLOAT km_wom04;
	SQLFLOAT km_wom05;
	SQLFLOAT km_syoteate;
	SQLFLOAT km_tingin;
	SQLFLOAT km_syaho01;
	SQLFLOAT km_koyou01;
	SQLFLOAT km_kyosai01;
	SQLFLOAT km_fukuri01;
	SQLFLOAT km_kyu011;
	SQLFLOAT km_kyu012;
	SQLFLOAT km_kyu013;
	SQLFLOAT km_kyu021;
	SQLFLOAT km_kyu022;
	SQLFLOAT km_kyu023;
	SQLFLOAT km_kyu031;
	SQLFLOAT km_kyu032;
	SQLFLOAT km_kyu033;
	SQLFLOAT km_kyu014;
	SQLFLOAT km_kyu015;
	SQLFLOAT km_kyu016;
	SQLFLOAT km_kyu024;
	SQLFLOAT km_kyu025;
	SQLFLOAT km_kyu026;
	SQLFLOAT km_kyu034;
	SQLFLOAT km_kyu035;
	SQLFLOAT km_kyu036;
	SQLFLOAT km_kyuyokei;
	SQLFLOAT km_syaho02;
	SQLFLOAT km_koyou02;
	SQLFLOAT km_kyosai02;
	SQLFLOAT km_fukuri02;
	SQLFLOAT km_kyuyosou;
	SQLFLOAT km_rousaihoken;
	SQLFLOAT km_kks01;
	SQLFLOAT km_kks02;
	SQLFLOAT km_kks03;
	SQLFLOAT km_kks04;
	SQLFLOAT km_chidai;
	SQLFLOAT km_kukakin;
	SQLFLOAT km_tusin;
	SQLFLOAT km_hokenryo;
	SQLFLOAT km_zappi;
	SQLFLOAT km_sonota;
	SQLFLOAT km_corins;
	SQLFLOAT km_kaigihi;
	SQLFLOAT km_kaihi;
	SQLFLOAT km_anzen;
	SQLFLOAT km_kousai;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_bikou1;
	std::string km_bikou2;
	std::string km_nyuno;
	SQLFLOAT km_syouhizei;
	TIMESTAMP_STRUCT km_mitsumori;
	SQLFLOAT km_ritsu;
	SQLINTEGER MBR010;
	std::string MBR020;
	SQLFLOAT MBR030;
	SQLFLOAT MBR040;
	SQLFLOAT MBR050;
	std::string MBR060;
	std::string MBR070;
	TIMESTAMP_STRUCT MBR080;
	std::string MBR090;
	std::string MBR100;
	std::string MBR110;
	std::string MBR120;
	std::string MBR130;
	SQLINTEGER Expr1;
	std::string Expr2;
	SQLFLOAT Expr3;
	SQLFLOAT Expr4;
	SQLFLOAT Expr5;
	std::string Expr6;
	std::string Expr7;
	TIMESTAMP_STRUCT Expr8;
	std::string Expr9;
	std::string Expr10;
	std::string Expr11;
	std::string Expr12;
	std::string Expr13;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_keiyaku;
		} break;
		case 8: {
			ss << this->km_tsuika;
		} break;
		case 9: {
			ss << this->km_goukei;
		} break;
		case 10: {
			ss << this->km_yosan;
		} break;
		case 11: {
			ss << this->km_genka;
		} break;
		case 12: {
			COdbcDateTime date(&this->km_keidate);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->km_kaisi);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->km_owari);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->km_tyakou);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->km_kansei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->km_kensa);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->km_syoken;
		} break;
		case 19: {
			ss << this->km_zai00;
		} break;
		case 20: {
			ss << this->km_zai01;
		} break;
		case 21: {
			ss << this->km_zai02;
		} break;
		case 22: {
			ss << this->km_zai03;
		} break;
		case 23: {
			ss << this->km_zai04;
		} break;
		case 24: {
			ss << this->km_rou01;
		} break;
		case 25: {
			ss << this->km_rou02;
		} break;
		case 26: {
			ss << this->km_rou03;
		} break;
		case 27: {
			ss << this->km_rou04;
		} break;
		case 28: {
			ss << this->km_gai01;
		} break;
		case 29: {
			ss << this->km_gai02;
		} break;
		case 30: {
			ss << this->km_gai03;
		} break;
		case 31: {
			ss << this->km_gai04;
		} break;
		case 32: {
			ss << this->km_kik01;
		} break;
		case 33: {
			ss << this->km_kik02;
		} break;
		case 34: {
			ss << this->km_kik03;
		} break;
		case 35: {
			ss << this->km_kik04;
		} break;
		case 36: {
			ss << this->km_kas01;
		} break;
		case 37: {
			ss << this->km_kas02;
		} break;
		case 38: {
			ss << this->km_kas03;
		} break;
		case 39: {
			ss << this->km_kas04;
		} break;
		case 40: {
			ss << this->km_kyuyo01;
		} break;
		case 41: {
			ss << this->km_kyuyo02;
		} break;
		case 42: {
			ss << this->km_kyuyo03;
		} break;
		case 43: {
			ss << this->km_kyuyo04;
		} break;
		case 44: {
			ss << this->km_tyo01;
		} break;
		case 45: {
			ss << this->km_tyo02;
		} break;
		case 46: {
			ss << this->km_tyo03;
		} break;
		case 47: {
			ss << this->km_tyo04;
		} break;
		case 48: {
			ss << this->km_kan01;
		} break;
		case 49: {
			ss << this->km_kan02;
		} break;
		case 50: {
			ss << this->km_gou01;
		} break;
		case 51: {
			ss << this->km_gou02;
		} break;
		case 52: {
			ss << this->km_gou03;
		} break;
		case 53: {
			ss << this->km_gou04;
		} break;
		case 54: {
			ss << this->km_yos01;
		} break;
		case 55: {
			ss << this->km_yos02;
		} break;
		case 56: {
			ss << this->km_yos03;
		} break;
		case 57: {
			ss << this->km_yos04;
		} break;
		case 58: {
			ss << this->km_ipn01;
		} break;
		case 59: {
			ss << this->km_ipn02;
		} break;
		case 60: {
			ss << this->km_yosankei;
		} break;
		case 61: {
			ss << this->km_zisekikei;
		} break;
		case 62: {
			ss << this->km_rie01;
		} break;
		case 63: {
			ss << this->km_rie02;
		} break;
		case 64: {
			ss << this->km_rie03;
		} break;
		case 65: {
			ss << this->km_rie04;
		} break;
		case 66: {
			ss << this->km_hok01;
		} break;
		case 67: {
			ss << this->km_hok02;
		} break;
		case 68: {
			ss << this->km_nen;
		} break;
		case 69: {
			ss << this->km_tuk;
		} break;
		case 70: {
			ss << this->km_sya011;
		} break;
		case 71: {
			ss << this->km_sya012;
		} break;
		case 72: {
			ss << this->km_sya021;
		} break;
		case 73: {
			ss << this->km_sya022;
		} break;
		case 74: {
			ss << this->km_sya031;
		} break;
		case 75: {
			ss << this->km_sya032;
		} break;
		case 76: {
			ss << this->km_nendo;
		} break;
		case 77: {
			ss << this->km_kei01;
		} break;
		case 78: {
			ss << this->km_kei02;
		} break;
		case 79: {
			ss << this->km_man01;
		} break;
		case 80: {
			ss << this->km_man02;
		} break;
		case 81: {
			ss << this->km_man03;
		} break;
		case 82: {
			ss << this->km_man04;
		} break;
		case 83: {
			ss << this->km_man05;
		} break;
		case 84: {
			ss << this->km_wom01;
		} break;
		case 85: {
			ss << this->km_wom02;
		} break;
		case 86: {
			ss << this->km_wom03;
		} break;
		case 87: {
			ss << this->km_wom04;
		} break;
		case 88: {
			ss << this->km_wom05;
		} break;
		case 89: {
			ss << this->km_syoteate;
		} break;
		case 90: {
			ss << this->km_tingin;
		} break;
		case 91: {
			ss << this->km_syaho01;
		} break;
		case 92: {
			ss << this->km_koyou01;
		} break;
		case 93: {
			ss << this->km_kyosai01;
		} break;
		case 94: {
			ss << this->km_fukuri01;
		} break;
		case 95: {
			ss << this->km_kyu011;
		} break;
		case 96: {
			ss << this->km_kyu012;
		} break;
		case 97: {
			ss << this->km_kyu013;
		} break;
		case 98: {
			ss << this->km_kyu021;
		} break;
		case 99: {
			ss << this->km_kyu022;
		} break;
		case 100: {
			ss << this->km_kyu023;
		} break;
		case 101: {
			ss << this->km_kyu031;
		} break;
		case 102: {
			ss << this->km_kyu032;
		} break;
		case 103: {
			ss << this->km_kyu033;
		} break;
		case 104: {
			ss << this->km_kyu014;
		} break;
		case 105: {
			ss << this->km_kyu015;
		} break;
		case 106: {
			ss << this->km_kyu016;
		} break;
		case 107: {
			ss << this->km_kyu024;
		} break;
		case 108: {
			ss << this->km_kyu025;
		} break;
		case 109: {
			ss << this->km_kyu026;
		} break;
		case 110: {
			ss << this->km_kyu034;
		} break;
		case 111: {
			ss << this->km_kyu035;
		} break;
		case 112: {
			ss << this->km_kyu036;
		} break;
		case 113: {
			ss << this->km_kyuyokei;
		} break;
		case 114: {
			ss << this->km_syaho02;
		} break;
		case 115: {
			ss << this->km_koyou02;
		} break;
		case 116: {
			ss << this->km_kyosai02;
		} break;
		case 117: {
			ss << this->km_fukuri02;
		} break;
		case 118: {
			ss << this->km_kyuyosou;
		} break;
		case 119: {
			ss << this->km_rousaihoken;
		} break;
		case 120: {
			ss << this->km_kks01;
		} break;
		case 121: {
			ss << this->km_kks02;
		} break;
		case 122: {
			ss << this->km_kks03;
		} break;
		case 123: {
			ss << this->km_kks04;
		} break;
		case 124: {
			ss << this->km_chidai;
		} break;
		case 125: {
			ss << this->km_kukakin;
		} break;
		case 126: {
			ss << this->km_tusin;
		} break;
		case 127: {
			ss << this->km_hokenryo;
		} break;
		case 128: {
			ss << this->km_zappi;
		} break;
		case 129: {
			ss << this->km_sonota;
		} break;
		case 130: {
			ss << this->km_corins;
		} break;
		case 131: {
			ss << this->km_kaigihi;
		} break;
		case 132: {
			ss << this->km_kaihi;
		} break;
		case 133: {
			ss << this->km_anzen;
		} break;
		case 134: {
			ss << this->km_kousai;
		} break;
		case 135: {
			ss << this->km_hat030;
		} break;
		case 136: {
			ss << this->km_hat040;
		} break;
		case 137: {
			ss << this->km_hat050;
		} break;
		case 138: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 139: {
			ss << this->km_sw;
		} break;
		case 140: {
			ss << this->km_bikou1;
		} break;
		case 141: {
			ss << this->km_bikou2;
		} break;
		case 142: {
			ss << this->km_nyuno;
		} break;
		case 143: {
			ss << this->km_syouhizei;
		} break;
		case 144: {
			COdbcDateTime date(&this->km_mitsumori);
			ss << date.to_string();
		} break;
		case 145: {
			ss << this->km_ritsu;
		} break;
		case 146: {
			ss << this->MBR010;
		} break;
		case 147: {
			ss << this->MBR020;
		} break;
		case 148: {
			ss << this->MBR030;
		} break;
		case 149: {
			ss << this->MBR040;
		} break;
		case 150: {
			ss << this->MBR050;
		} break;
		case 151: {
			ss << this->MBR060;
		} break;
		case 152: {
			ss << this->MBR070;
		} break;
		case 153: {
			COdbcDateTime date(&this->MBR080);
			ss << date.to_string();
		} break;
		case 154: {
			ss << this->MBR090;
		} break;
		case 155: {
			ss << this->MBR100;
		} break;
		case 156: {
			ss << this->MBR110;
		} break;
		case 157: {
			ss << this->MBR120;
		} break;
		case 158: {
			ss << this->MBR130;
		} break;
		case 159: {
			ss << this->Expr1;
		} break;
		case 160: {
			ss << this->Expr2;
		} break;
		case 161: {
			ss << this->Expr3;
		} break;
		case 162: {
			ss << this->Expr4;
		} break;
		case 163: {
			ss << this->Expr5;
		} break;
		case 164: {
			ss << this->Expr6;
		} break;
		case 165: {
			ss << this->Expr7;
		} break;
		case 166: {
			COdbcDateTime date(&this->Expr8);
			ss << date.to_string();
		} break;
		case 167: {
			ss << this->Expr9;
		} break;
		case 168: {
			ss << this->Expr10;
		} break;
		case 169: {
			ss << this->Expr11;
		} break;
		case 170: {
			ss << this->Expr12;
		} break;
		case 171: {
			ss << this->Expr13;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_koujisyain : public COdbcTable {
public:
	CT_v_koujisyain() : COdbcTable() {
		m_TableName = "v_koujisyain";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "km_syoken,"
					  "km_zai00,"
					  "km_zai01,"
					  "km_zai02,"
					  "km_zai03,"
					  "km_zai04,"
					  "km_rou01,"
					  "km_rou02,"
					  "km_rou03,"
					  "km_rou04,"
					  "km_gai01,"
					  "km_gai02,"
					  "km_gai03,"
					  "km_gai04,"
					  "km_kik01,"
					  "km_kik02,"
					  "km_kik03,"
					  "km_kik04,"
					  "km_kas01,"
					  "km_kas02,"
					  "km_kas03,"
					  "km_kas04,"
					  "km_kyuyo01,"
					  "km_kyuyo02,"
					  "km_kyuyo03,"
					  "km_kyuyo04,"
					  "km_tyo01,"
					  "km_tyo02,"
					  "km_tyo03,"
					  "km_tyo04,"
					  "km_kan01,"
					  "km_kan02,"
					  "km_gou01,"
					  "km_gou02,"
					  "km_gou03,"
					  "km_gou04,"
					  "km_yos01,"
					  "km_yos02,"
					  "km_yos03,"
					  "km_yos04,"
					  "km_ipn01,"
					  "km_ipn02,"
					  "km_yosankei,"
					  "km_zisekikei,"
					  "km_rie01,"
					  "km_rie02,"
					  "km_rie03,"
					  "km_rie04,"
					  "km_hok01,"
					  "km_hok02,"
					  "km_nen,"
					  "km_tuk,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_sya031,"
					  "km_sya032,"
					  "km_nendo,"
					  "km_kei01,"
					  "km_kei02,"
					  "km_man01,"
					  "km_man02,"
					  "km_man03,"
					  "km_man04,"
					  "km_man05,"
					  "km_wom01,"
					  "km_wom02,"
					  "km_wom03,"
					  "km_wom04,"
					  "km_wom05,"
					  "km_syoteate,"
					  "km_tingin,"
					  "km_syaho01,"
					  "km_koyou01,"
					  "km_kyosai01,"
					  "km_fukuri01,"
					  "km_kyu011,"
					  "km_kyu012,"
					  "km_kyu013,"
					  "km_kyu021,"
					  "km_kyu022,"
					  "km_kyu023,"
					  "km_kyu031,"
					  "km_kyu032,"
					  "km_kyu033,"
					  "km_kyu014,"
					  "km_kyu015,"
					  "km_kyu016,"
					  "km_kyu024,"
					  "km_kyu025,"
					  "km_kyu026,"
					  "km_kyu034,"
					  "km_kyu035,"
					  "km_kyu036,"
					  "km_kyuyokei,"
					  "km_syaho02,"
					  "km_koyou02,"
					  "km_kyosai02,"
					  "km_fukuri02,"
					  "km_kyuyosou,"
					  "km_rousaihoken,"
					  "km_kks01,"
					  "km_kks02,"
					  "km_kks03,"
					  "km_kks04,"
					  "km_chidai,"
					  "km_kukakin,"
					  "km_tusin,"
					  "km_hokenryo,"
					  "km_zappi,"
					  "km_sonota,"
					  "km_corins,"
					  "km_kaigihi,"
					  "km_kaihi,"
					  "km_anzen,"
					  "km_kousai,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu,"
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130,"
					  "Expr1,"
					  "Expr2,"
					  "Expr3,"
					  "Expr4,"
					  "Expr5,"
					  "Expr6,"
					  "Expr7,"
					  "Expr8,"
					  "Expr9,"
					  "Expr10,"
					  "Expr11,"
					  "Expr12,"
					  "Expr13"
					  " FROM v_koujisyain";
		m_SqlINSERT = "INSERT INTO v_koujisyain ("
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_kensa,"
					  "km_syoken,"
					  "km_zai00,"
					  "km_zai01,"
					  "km_zai02,"
					  "km_zai03,"
					  "km_zai04,"
					  "km_rou01,"
					  "km_rou02,"
					  "km_rou03,"
					  "km_rou04,"
					  "km_gai01,"
					  "km_gai02,"
					  "km_gai03,"
					  "km_gai04,"
					  "km_kik01,"
					  "km_kik02,"
					  "km_kik03,"
					  "km_kik04,"
					  "km_kas01,"
					  "km_kas02,"
					  "km_kas03,"
					  "km_kas04,"
					  "km_kyuyo01,"
					  "km_kyuyo02,"
					  "km_kyuyo03,"
					  "km_kyuyo04,"
					  "km_tyo01,"
					  "km_tyo02,"
					  "km_tyo03,"
					  "km_tyo04,"
					  "km_kan01,"
					  "km_kan02,"
					  "km_gou01,"
					  "km_gou02,"
					  "km_gou03,"
					  "km_gou04,"
					  "km_yos01,"
					  "km_yos02,"
					  "km_yos03,"
					  "km_yos04,"
					  "km_ipn01,"
					  "km_ipn02,"
					  "km_yosankei,"
					  "km_zisekikei,"
					  "km_rie01,"
					  "km_rie02,"
					  "km_rie03,"
					  "km_rie04,"
					  "km_hok01,"
					  "km_hok02,"
					  "km_nen,"
					  "km_tuk,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_sya031,"
					  "km_sya032,"
					  "km_nendo,"
					  "km_kei01,"
					  "km_kei02,"
					  "km_man01,"
					  "km_man02,"
					  "km_man03,"
					  "km_man04,"
					  "km_man05,"
					  "km_wom01,"
					  "km_wom02,"
					  "km_wom03,"
					  "km_wom04,"
					  "km_wom05,"
					  "km_syoteate,"
					  "km_tingin,"
					  "km_syaho01,"
					  "km_koyou01,"
					  "km_kyosai01,"
					  "km_fukuri01,"
					  "km_kyu011,"
					  "km_kyu012,"
					  "km_kyu013,"
					  "km_kyu021,"
					  "km_kyu022,"
					  "km_kyu023,"
					  "km_kyu031,"
					  "km_kyu032,"
					  "km_kyu033,"
					  "km_kyu014,"
					  "km_kyu015,"
					  "km_kyu016,"
					  "km_kyu024,"
					  "km_kyu025,"
					  "km_kyu026,"
					  "km_kyu034,"
					  "km_kyu035,"
					  "km_kyu036,"
					  "km_kyuyokei,"
					  "km_syaho02,"
					  "km_koyou02,"
					  "km_kyosai02,"
					  "km_fukuri02,"
					  "km_kyuyosou,"
					  "km_rousaihoken,"
					  "km_kks01,"
					  "km_kks02,"
					  "km_kks03,"
					  "km_kks04,"
					  "km_chidai,"
					  "km_kukakin,"
					  "km_tusin,"
					  "km_hokenryo,"
					  "km_zappi,"
					  "km_sonota,"
					  "km_corins,"
					  "km_kaigihi,"
					  "km_kaihi,"
					  "km_anzen,"
					  "km_kousai,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuno,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu,"
					  "MBR010,"
					  "MBR020,"
					  "MBR030,"
					  "MBR040,"
					  "MBR050,"
					  "MBR060,"
					  "MBR070,"
					  "MBR080,"
					  "MBR090,"
					  "MBR100,"
					  "MBR110,"
					  "MBR120,"
					  "MBR130,"
					  "Expr1,"
					  "Expr2,"
					  "Expr3,"
					  "Expr4,"
					  "Expr5,"
					  "Expr6,"
					  "Expr7,"
					  "Expr8,"
					  "Expr9,"
					  "Expr10,"
					  "Expr11,"
					  "Expr12,"
					  "Expr13)"
					  " VALUES ( "
					  "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
					  "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
					  "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
					  "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_koujisyain SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_kensa = ?,"
					  "km_syoken = ?,"
					  "km_zai00 = ?,"
					  "km_zai01 = ?,"
					  "km_zai02 = ?,"
					  "km_zai03 = ?,"
					  "km_zai04 = ?,"
					  "km_rou01 = ?,"
					  "km_rou02 = ?,"
					  "km_rou03 = ?,"
					  "km_rou04 = ?,"
					  "km_gai01 = ?,"
					  "km_gai02 = ?,"
					  "km_gai03 = ?,"
					  "km_gai04 = ?,"
					  "km_kik01 = ?,"
					  "km_kik02 = ?,"
					  "km_kik03 = ?,"
					  "km_kik04 = ?,"
					  "km_kas01 = ?,"
					  "km_kas02 = ?,"
					  "km_kas03 = ?,"
					  "km_kas04 = ?,"
					  "km_kyuyo01 = ?,"
					  "km_kyuyo02 = ?,"
					  "km_kyuyo03 = ?,"
					  "km_kyuyo04 = ?,"
					  "km_tyo01 = ?,"
					  "km_tyo02 = ?,"
					  "km_tyo03 = ?,"
					  "km_tyo04 = ?,"
					  "km_kan01 = ?,"
					  "km_kan02 = ?,"
					  "km_gou01 = ?,"
					  "km_gou02 = ?,"
					  "km_gou03 = ?,"
					  "km_gou04 = ?,"
					  "km_yos01 = ?,"
					  "km_yos02 = ?,"
					  "km_yos03 = ?,"
					  "km_yos04 = ?,"
					  "km_ipn01 = ?,"
					  "km_ipn02 = ?,"
					  "km_yosankei = ?,"
					  "km_zisekikei = ?,"
					  "km_rie01 = ?,"
					  "km_rie02 = ?,"
					  "km_rie03 = ?,"
					  "km_rie04 = ?,"
					  "km_hok01 = ?,"
					  "km_hok02 = ?,"
					  "km_nen = ?,"
					  "km_tuk = ?,"
					  "km_sya011 = ?,"
					  "km_sya012 = ?,"
					  "km_sya021 = ?,"
					  "km_sya022 = ?,"
					  "km_sya031 = ?,"
					  "km_sya032 = ?,"
					  "km_nendo = ?,"
					  "km_kei01 = ?,"
					  "km_kei02 = ?,"
					  "km_man01 = ?,"
					  "km_man02 = ?,"
					  "km_man03 = ?,"
					  "km_man04 = ?,"
					  "km_man05 = ?,"
					  "km_wom01 = ?,"
					  "km_wom02 = ?,"
					  "km_wom03 = ?,"
					  "km_wom04 = ?,"
					  "km_wom05 = ?,"
					  "km_syoteate = ?,"
					  "km_tingin = ?,"
					  "km_syaho01 = ?,"
					  "km_koyou01 = ?,"
					  "km_kyosai01 = ?,"
					  "km_fukuri01 = ?,"
					  "km_kyu011 = ?,"
					  "km_kyu012 = ?,"
					  "km_kyu013 = ?,"
					  "km_kyu021 = ?,"
					  "km_kyu022 = ?,"
					  "km_kyu023 = ?,"
					  "km_kyu031 = ?,"
					  "km_kyu032 = ?,"
					  "km_kyu033 = ?,"
					  "km_kyu014 = ?,"
					  "km_kyu015 = ?,"
					  "km_kyu016 = ?,"
					  "km_kyu024 = ?,"
					  "km_kyu025 = ?,"
					  "km_kyu026 = ?,"
					  "km_kyu034 = ?,"
					  "km_kyu035 = ?,"
					  "km_kyu036 = ?,"
					  "km_kyuyokei = ?,"
					  "km_syaho02 = ?,"
					  "km_koyou02 = ?,"
					  "km_kyosai02 = ?,"
					  "km_fukuri02 = ?,"
					  "km_kyuyosou = ?,"
					  "km_rousaihoken = ?,"
					  "km_kks01 = ?,"
					  "km_kks02 = ?,"
					  "km_kks03 = ?,"
					  "km_kks04 = ?,"
					  "km_chidai = ?,"
					  "km_kukakin = ?,"
					  "km_tusin = ?,"
					  "km_hokenryo = ?,"
					  "km_zappi = ?,"
					  "km_sonota = ?,"
					  "km_corins = ?,"
					  "km_kaigihi = ?,"
					  "km_kaihi = ?,"
					  "km_anzen = ?,"
					  "km_kousai = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuno = ?,"
					  "km_syouhizei = ?,"
					  "km_mitsumori = ?,"
					  "km_ritsu = ?,"
					  "MBR010 = ?,"
					  "MBR020 = ?,"
					  "MBR030 = ?,"
					  "MBR040 = ?,"
					  "MBR050 = ?,"
					  "MBR060 = ?,"
					  "MBR070 = ?,"
					  "MBR080 = ?,"
					  "MBR090 = ?,"
					  "MBR100 = ?,"
					  "MBR110 = ?,"
					  "MBR120 = ?,"
					  "MBR130 = ?,"
					  "Expr1 = ?,"
					  "Expr2 = ?,"
					  "Expr3 = ?,"
					  "Expr4 = ?,"
					  "Expr5 = ?,"
					  "Expr6 = ?,"
					  "Expr7 = ?,"
					  "Expr8 = ?,"
					  "Expr9 = ?,"
					  "Expr10 = ?,"
					  "Expr11 = ?,"
					  "Expr12 = ?,"
					  "Expr13 = ?";

		m_SqlDELETE = "DELETE v_koujisyain ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_tsuika", "9", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_goukei", "10", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_keidate", "13", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kaisi", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_owari", "15", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_tyakou", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kansei", "17", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kensa", "18", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_syoken", "19", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_zai00", "20", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_zai01", "21", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_zai02", "22", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_zai03", "23", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_zai04", "24", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_rou01", "25", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_rou02", "26", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_rou03", "27", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_rou04", "28", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_gai01", "29", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_gai02", "30", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_gai03", "31", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_gai04", "32", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kik01", "33", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kik02", "34", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kik03", "35", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kik04", "36", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kas01", "37", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kas02", "38", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kas03", "39", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kas04", "40", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyuyo01", "41", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyuyo02", "42", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyuyo03", "43", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyuyo04", "44", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_tyo01", "45", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_tyo02", "46", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_tyo03", "47", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_tyo04", "48", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kan01", "49", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kan02", "50", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_gou01", "51", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_gou02", "52", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_gou03", "53", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_gou04", "54", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_yos01", "55", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_yos02", "56", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_yos03", "57", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_yos04", "58", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_ipn01", "59", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_ipn02", "60", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_yosankei", "61", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_zisekikei", "62", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_rie01", "63", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_rie02", "64", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_rie03", "65", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_rie04", "66", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_hok01", "67", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_hok02", "68", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_nen", "69", "", "YES", "smallint", "0", "0", "5", "0", "0",
					 "", "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_tuk", "70", "", "YES", "smallint", "0", "0", "5", "0", "0",
					 "", "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_sya011", "71", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_sya012", "72", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_sya021", "73", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_sya022", "74", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_sya031", "75", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_sya032", "76", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_nendo", "77", "", "YES", "smallint", "0", "0", "5", "0", "0",
					 "", "", 0, _smallint, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kei01", "78", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kei02", "79", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_man01", "80", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_man02", "81", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_man03", "82", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_man04", "83", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_man05", "84", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_wom01", "85", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_wom02", "86", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_wom03", "87", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_wom04", "88", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_wom05", "89", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_syoteate", "90", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_tingin", "91", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_syaho01", "92", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_koyou01", "93", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyosai01", "94", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_fukuri01", "95", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu011", "96", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu012", "97", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu013", "98", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu021", "99", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu022", "100", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu023", "101", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu031", "102", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu032", "103", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu033", "104", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu014", "105", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu015", "106", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu016", "107", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu024", "108", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu025", "109", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu026", "110", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu034", "111", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu035", "112", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyu036", "113", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyuyokei", "114", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_syaho02", "115", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_koyou02", "116", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyosai02", "117", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_fukuri02", "118", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kyuyosou", "119", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_rousaihoken", "120", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kks01", "121", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kks02", "122", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kks03", "123", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kks04", "124", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_chidai", "125", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kukakin", "126", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_tusin", "127", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_hokenryo", "128", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_zappi", "129", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_sonota", "130", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_corins", "131", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kaigihi", "132", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kaihi", "133", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_anzen", "134", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_kousai", "135", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_hat030", "136", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_hat040", "137", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_hat050", "138", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_nyuudat", "139", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_sw", "140", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_bikou1", "141", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_bikou2", "142", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_nyuno", "143", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_syouhizei", "144", "", "YES", "float", "0", "0", "53", "0",
					 "0", "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_mitsumori", "145", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "km_ritsu", "146", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR010", "147", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR020", "148", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR030", "149", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR040", "150", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR050", "151", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR060", "152", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR070", "153", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR080", "154", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR090", "155", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR100", "156", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR110", "157", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR120", "158", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "MBR130", "159", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr1", "160", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr2", "161", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr3", "162", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr4", "163", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr5", "164", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr6", "165", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr7", "166", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr8", "167", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr9", "168", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr10", "169", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr11", "170", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr12", "171", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_koujisyain", "Expr13", "172", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_koujisyain() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_syoken = new char[MAXBUF];
		char *km_sya012 = new char[81];
		char *km_sya022 = new char[81];
		char *km_sya032 = new char[81];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		char *MBR020 = new char[101];
		char *MBR060 = new char[511];
		char *MBR070 = new char[511];
		char *MBR090 = new char[511];
		char *MBR100 = new char[511];
		char *MBR110 = new char[511];
		char *MBR120 = new char[41];
		char *MBR130 = new char[101];
		char *Expr2 = new char[101];
		char *Expr6 = new char[511];
		char *Expr7 = new char[511];
		char *Expr9 = new char[511];
		char *Expr10 = new char[511];
		char *Expr11 = new char[511];
		char *Expr12 = new char[41];
		char *Expr13 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_koujisyain rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				com->GetData(8, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.km_keidate, sizeof(rec.km_keidate), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.km_kaisi, sizeof(rec.km_kaisi), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.km_owari, sizeof(rec.km_owari), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.km_tyakou, sizeof(rec.km_tyakou), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.km_kansei, sizeof(rec.km_kansei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.km_kensa, sizeof(rec.km_kensa), 0);
				memset(km_syoken, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, km_syoken, 1048576, 0);
				rec.km_syoken = (char *)km_syoken;
				com->GetData(20, SQL_C_DOUBLE, &rec.km_zai00, sizeof(rec.km_zai00), 0);
				com->GetData(21, SQL_C_DOUBLE, &rec.km_zai01, sizeof(rec.km_zai01), 0);
				com->GetData(22, SQL_C_DOUBLE, &rec.km_zai02, sizeof(rec.km_zai02), 0);
				com->GetData(23, SQL_C_DOUBLE, &rec.km_zai03, sizeof(rec.km_zai03), 0);
				com->GetData(24, SQL_C_DOUBLE, &rec.km_zai04, sizeof(rec.km_zai04), 0);
				com->GetData(25, SQL_C_DOUBLE, &rec.km_rou01, sizeof(rec.km_rou01), 0);
				com->GetData(26, SQL_C_DOUBLE, &rec.km_rou02, sizeof(rec.km_rou02), 0);
				com->GetData(27, SQL_C_DOUBLE, &rec.km_rou03, sizeof(rec.km_rou03), 0);
				com->GetData(28, SQL_C_DOUBLE, &rec.km_rou04, sizeof(rec.km_rou04), 0);
				com->GetData(29, SQL_C_DOUBLE, &rec.km_gai01, sizeof(rec.km_gai01), 0);
				com->GetData(30, SQL_C_DOUBLE, &rec.km_gai02, sizeof(rec.km_gai02), 0);
				com->GetData(31, SQL_C_DOUBLE, &rec.km_gai03, sizeof(rec.km_gai03), 0);
				com->GetData(32, SQL_C_DOUBLE, &rec.km_gai04, sizeof(rec.km_gai04), 0);
				com->GetData(33, SQL_C_DOUBLE, &rec.km_kik01, sizeof(rec.km_kik01), 0);
				com->GetData(34, SQL_C_DOUBLE, &rec.km_kik02, sizeof(rec.km_kik02), 0);
				com->GetData(35, SQL_C_DOUBLE, &rec.km_kik03, sizeof(rec.km_kik03), 0);
				com->GetData(36, SQL_C_DOUBLE, &rec.km_kik04, sizeof(rec.km_kik04), 0);
				com->GetData(37, SQL_C_DOUBLE, &rec.km_kas01, sizeof(rec.km_kas01), 0);
				com->GetData(38, SQL_C_DOUBLE, &rec.km_kas02, sizeof(rec.km_kas02), 0);
				com->GetData(39, SQL_C_DOUBLE, &rec.km_kas03, sizeof(rec.km_kas03), 0);
				com->GetData(40, SQL_C_DOUBLE, &rec.km_kas04, sizeof(rec.km_kas04), 0);
				com->GetData(41, SQL_C_DOUBLE, &rec.km_kyuyo01, sizeof(rec.km_kyuyo01), 0);
				com->GetData(42, SQL_C_DOUBLE, &rec.km_kyuyo02, sizeof(rec.km_kyuyo02), 0);
				com->GetData(43, SQL_C_DOUBLE, &rec.km_kyuyo03, sizeof(rec.km_kyuyo03), 0);
				com->GetData(44, SQL_C_DOUBLE, &rec.km_kyuyo04, sizeof(rec.km_kyuyo04), 0);
				com->GetData(45, SQL_C_DOUBLE, &rec.km_tyo01, sizeof(rec.km_tyo01), 0);
				com->GetData(46, SQL_C_DOUBLE, &rec.km_tyo02, sizeof(rec.km_tyo02), 0);
				com->GetData(47, SQL_C_DOUBLE, &rec.km_tyo03, sizeof(rec.km_tyo03), 0);
				com->GetData(48, SQL_C_DOUBLE, &rec.km_tyo04, sizeof(rec.km_tyo04), 0);
				com->GetData(49, SQL_C_DOUBLE, &rec.km_kan01, sizeof(rec.km_kan01), 0);
				com->GetData(50, SQL_C_DOUBLE, &rec.km_kan02, sizeof(rec.km_kan02), 0);
				com->GetData(51, SQL_C_DOUBLE, &rec.km_gou01, sizeof(rec.km_gou01), 0);
				com->GetData(52, SQL_C_DOUBLE, &rec.km_gou02, sizeof(rec.km_gou02), 0);
				com->GetData(53, SQL_C_DOUBLE, &rec.km_gou03, sizeof(rec.km_gou03), 0);
				com->GetData(54, SQL_C_DOUBLE, &rec.km_gou04, sizeof(rec.km_gou04), 0);
				com->GetData(55, SQL_C_DOUBLE, &rec.km_yos01, sizeof(rec.km_yos01), 0);
				com->GetData(56, SQL_C_DOUBLE, &rec.km_yos02, sizeof(rec.km_yos02), 0);
				com->GetData(57, SQL_C_DOUBLE, &rec.km_yos03, sizeof(rec.km_yos03), 0);
				com->GetData(58, SQL_C_DOUBLE, &rec.km_yos04, sizeof(rec.km_yos04), 0);
				com->GetData(59, SQL_C_DOUBLE, &rec.km_ipn01, sizeof(rec.km_ipn01), 0);
				com->GetData(60, SQL_C_DOUBLE, &rec.km_ipn02, sizeof(rec.km_ipn02), 0);
				com->GetData(61, SQL_C_DOUBLE, &rec.km_yosankei, sizeof(rec.km_yosankei), 0);
				com->GetData(62, SQL_C_DOUBLE, &rec.km_zisekikei, sizeof(rec.km_zisekikei), 0);
				com->GetData(63, SQL_C_DOUBLE, &rec.km_rie01, sizeof(rec.km_rie01), 0);
				com->GetData(64, SQL_C_DOUBLE, &rec.km_rie02, sizeof(rec.km_rie02), 0);
				com->GetData(65, SQL_C_DOUBLE, &rec.km_rie03, sizeof(rec.km_rie03), 0);
				com->GetData(66, SQL_C_DOUBLE, &rec.km_rie04, sizeof(rec.km_rie04), 0);
				com->GetData(67, SQL_C_DOUBLE, &rec.km_hok01, sizeof(rec.km_hok01), 0);
				com->GetData(68, SQL_C_DOUBLE, &rec.km_hok02, sizeof(rec.km_hok02), 0);
				com->GetData(69, SQL_C_SHORT, &rec.km_nen, sizeof(rec.km_nen), 0);
				com->GetData(70, SQL_C_SHORT, &rec.km_tuk, sizeof(rec.km_tuk), 0);
				com->GetData(71, SQL_C_LONG, &rec.km_sya011, sizeof(rec.km_sya011), 0);
				memset(km_sya012, 0, 81);
				com->GetData(72, SQL_C_CHAR, km_sya012, 81, 0);
				rec.km_sya012 = (char *)km_sya012;
				com->GetData(73, SQL_C_LONG, &rec.km_sya021, sizeof(rec.km_sya021), 0);
				memset(km_sya022, 0, 81);
				com->GetData(74, SQL_C_CHAR, km_sya022, 81, 0);
				rec.km_sya022 = (char *)km_sya022;
				com->GetData(75, SQL_C_LONG, &rec.km_sya031, sizeof(rec.km_sya031), 0);
				memset(km_sya032, 0, 81);
				com->GetData(76, SQL_C_CHAR, km_sya032, 81, 0);
				rec.km_sya032 = (char *)km_sya032;
				com->GetData(77, SQL_C_SHORT, &rec.km_nendo, sizeof(rec.km_nendo), 0);
				com->GetData(78, SQL_C_DOUBLE, &rec.km_kei01, sizeof(rec.km_kei01), 0);
				com->GetData(79, SQL_C_DOUBLE, &rec.km_kei02, sizeof(rec.km_kei02), 0);
				com->GetData(80, SQL_C_DOUBLE, &rec.km_man01, sizeof(rec.km_man01), 0);
				com->GetData(81, SQL_C_DOUBLE, &rec.km_man02, sizeof(rec.km_man02), 0);
				com->GetData(82, SQL_C_DOUBLE, &rec.km_man03, sizeof(rec.km_man03), 0);
				com->GetData(83, SQL_C_DOUBLE, &rec.km_man04, sizeof(rec.km_man04), 0);
				com->GetData(84, SQL_C_DOUBLE, &rec.km_man05, sizeof(rec.km_man05), 0);
				com->GetData(85, SQL_C_DOUBLE, &rec.km_wom01, sizeof(rec.km_wom01), 0);
				com->GetData(86, SQL_C_DOUBLE, &rec.km_wom02, sizeof(rec.km_wom02), 0);
				com->GetData(87, SQL_C_DOUBLE, &rec.km_wom03, sizeof(rec.km_wom03), 0);
				com->GetData(88, SQL_C_DOUBLE, &rec.km_wom04, sizeof(rec.km_wom04), 0);
				com->GetData(89, SQL_C_DOUBLE, &rec.km_wom05, sizeof(rec.km_wom05), 0);
				com->GetData(90, SQL_C_DOUBLE, &rec.km_syoteate, sizeof(rec.km_syoteate), 0);
				com->GetData(91, SQL_C_DOUBLE, &rec.km_tingin, sizeof(rec.km_tingin), 0);
				com->GetData(92, SQL_C_DOUBLE, &rec.km_syaho01, sizeof(rec.km_syaho01), 0);
				com->GetData(93, SQL_C_DOUBLE, &rec.km_koyou01, sizeof(rec.km_koyou01), 0);
				com->GetData(94, SQL_C_DOUBLE, &rec.km_kyosai01, sizeof(rec.km_kyosai01), 0);
				com->GetData(95, SQL_C_DOUBLE, &rec.km_fukuri01, sizeof(rec.km_fukuri01), 0);
				com->GetData(96, SQL_C_DOUBLE, &rec.km_kyu011, sizeof(rec.km_kyu011), 0);
				com->GetData(97, SQL_C_DOUBLE, &rec.km_kyu012, sizeof(rec.km_kyu012), 0);
				com->GetData(98, SQL_C_DOUBLE, &rec.km_kyu013, sizeof(rec.km_kyu013), 0);
				com->GetData(99, SQL_C_DOUBLE, &rec.km_kyu021, sizeof(rec.km_kyu021), 0);
				com->GetData(100, SQL_C_DOUBLE, &rec.km_kyu022, sizeof(rec.km_kyu022), 0);
				com->GetData(101, SQL_C_DOUBLE, &rec.km_kyu023, sizeof(rec.km_kyu023), 0);
				com->GetData(102, SQL_C_DOUBLE, &rec.km_kyu031, sizeof(rec.km_kyu031), 0);
				com->GetData(103, SQL_C_DOUBLE, &rec.km_kyu032, sizeof(rec.km_kyu032), 0);
				com->GetData(104, SQL_C_DOUBLE, &rec.km_kyu033, sizeof(rec.km_kyu033), 0);
				com->GetData(105, SQL_C_DOUBLE, &rec.km_kyu014, sizeof(rec.km_kyu014), 0);
				com->GetData(106, SQL_C_DOUBLE, &rec.km_kyu015, sizeof(rec.km_kyu015), 0);
				com->GetData(107, SQL_C_DOUBLE, &rec.km_kyu016, sizeof(rec.km_kyu016), 0);
				com->GetData(108, SQL_C_DOUBLE, &rec.km_kyu024, sizeof(rec.km_kyu024), 0);
				com->GetData(109, SQL_C_DOUBLE, &rec.km_kyu025, sizeof(rec.km_kyu025), 0);
				com->GetData(110, SQL_C_DOUBLE, &rec.km_kyu026, sizeof(rec.km_kyu026), 0);
				com->GetData(111, SQL_C_DOUBLE, &rec.km_kyu034, sizeof(rec.km_kyu034), 0);
				com->GetData(112, SQL_C_DOUBLE, &rec.km_kyu035, sizeof(rec.km_kyu035), 0);
				com->GetData(113, SQL_C_DOUBLE, &rec.km_kyu036, sizeof(rec.km_kyu036), 0);
				com->GetData(114, SQL_C_DOUBLE, &rec.km_kyuyokei, sizeof(rec.km_kyuyokei), 0);
				com->GetData(115, SQL_C_DOUBLE, &rec.km_syaho02, sizeof(rec.km_syaho02), 0);
				com->GetData(116, SQL_C_DOUBLE, &rec.km_koyou02, sizeof(rec.km_koyou02), 0);
				com->GetData(117, SQL_C_DOUBLE, &rec.km_kyosai02, sizeof(rec.km_kyosai02), 0);
				com->GetData(118, SQL_C_DOUBLE, &rec.km_fukuri02, sizeof(rec.km_fukuri02), 0);
				com->GetData(119, SQL_C_DOUBLE, &rec.km_kyuyosou, sizeof(rec.km_kyuyosou), 0);
				com->GetData(120, SQL_C_DOUBLE, &rec.km_rousaihoken, sizeof(rec.km_rousaihoken), 0);
				com->GetData(121, SQL_C_DOUBLE, &rec.km_kks01, sizeof(rec.km_kks01), 0);
				com->GetData(122, SQL_C_DOUBLE, &rec.km_kks02, sizeof(rec.km_kks02), 0);
				com->GetData(123, SQL_C_DOUBLE, &rec.km_kks03, sizeof(rec.km_kks03), 0);
				com->GetData(124, SQL_C_DOUBLE, &rec.km_kks04, sizeof(rec.km_kks04), 0);
				com->GetData(125, SQL_C_DOUBLE, &rec.km_chidai, sizeof(rec.km_chidai), 0);
				com->GetData(126, SQL_C_DOUBLE, &rec.km_kukakin, sizeof(rec.km_kukakin), 0);
				com->GetData(127, SQL_C_DOUBLE, &rec.km_tusin, sizeof(rec.km_tusin), 0);
				com->GetData(128, SQL_C_DOUBLE, &rec.km_hokenryo, sizeof(rec.km_hokenryo), 0);
				com->GetData(129, SQL_C_DOUBLE, &rec.km_zappi, sizeof(rec.km_zappi), 0);
				com->GetData(130, SQL_C_DOUBLE, &rec.km_sonota, sizeof(rec.km_sonota), 0);
				com->GetData(131, SQL_C_DOUBLE, &rec.km_corins, sizeof(rec.km_corins), 0);
				com->GetData(132, SQL_C_DOUBLE, &rec.km_kaigihi, sizeof(rec.km_kaigihi), 0);
				com->GetData(133, SQL_C_DOUBLE, &rec.km_kaihi, sizeof(rec.km_kaihi), 0);
				com->GetData(134, SQL_C_DOUBLE, &rec.km_anzen, sizeof(rec.km_anzen), 0);
				com->GetData(135, SQL_C_DOUBLE, &rec.km_kousai, sizeof(rec.km_kousai), 0);
				memset(km_hat030, 0, 101);
				com->GetData(136, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(137, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(138, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				com->GetData(139, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(140, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_bikou1, 0, 511);
				com->GetData(141, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(142, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				memset(km_nyuno, 0, 101);
				com->GetData(143, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				com->GetData(144, SQL_C_DOUBLE, &rec.km_syouhizei, sizeof(rec.km_syouhizei), 0);
				com->GetData(145, SQL_C_TYPE_TIMESTAMP, &rec.km_mitsumori, sizeof(rec.km_mitsumori), 0);
				com->GetData(146, SQL_C_DOUBLE, &rec.km_ritsu, sizeof(rec.km_ritsu), 0);
				com->GetData(147, SQL_C_LONG, &rec.MBR010, sizeof(rec.MBR010), 0);
				memset(MBR020, 0, 101);
				com->GetData(148, SQL_C_CHAR, MBR020, 101, 0);
				rec.MBR020 = (char *)MBR020;
				com->GetData(149, SQL_C_DOUBLE, &rec.MBR030, sizeof(rec.MBR030), 0);
				com->GetData(150, SQL_C_DOUBLE, &rec.MBR040, sizeof(rec.MBR040), 0);
				com->GetData(151, SQL_C_DOUBLE, &rec.MBR050, sizeof(rec.MBR050), 0);
				memset(MBR060, 0, 511);
				com->GetData(152, SQL_C_CHAR, MBR060, 511, 0);
				rec.MBR060 = (char *)MBR060;
				memset(MBR070, 0, 511);
				com->GetData(153, SQL_C_CHAR, MBR070, 511, 0);
				rec.MBR070 = (char *)MBR070;
				com->GetData(154, SQL_C_TYPE_TIMESTAMP, &rec.MBR080, sizeof(rec.MBR080), 0);
				memset(MBR090, 0, 511);
				com->GetData(155, SQL_C_CHAR, MBR090, 511, 0);
				rec.MBR090 = (char *)MBR090;
				memset(MBR100, 0, 511);
				com->GetData(156, SQL_C_CHAR, MBR100, 511, 0);
				rec.MBR100 = (char *)MBR100;
				memset(MBR110, 0, 511);
				com->GetData(157, SQL_C_CHAR, MBR110, 511, 0);
				rec.MBR110 = (char *)MBR110;
				memset(MBR120, 0, 41);
				com->GetData(158, SQL_C_CHAR, MBR120, 41, 0);
				rec.MBR120 = (char *)MBR120;
				memset(MBR130, 0, 101);
				com->GetData(159, SQL_C_CHAR, MBR130, 101, 0);
				rec.MBR130 = (char *)MBR130;
				com->GetData(160, SQL_C_LONG, &rec.Expr1, sizeof(rec.Expr1), 0);
				memset(Expr2, 0, 101);
				com->GetData(161, SQL_C_CHAR, Expr2, 101, 0);
				rec.Expr2 = (char *)Expr2;
				com->GetData(162, SQL_C_DOUBLE, &rec.Expr3, sizeof(rec.Expr3), 0);
				com->GetData(163, SQL_C_DOUBLE, &rec.Expr4, sizeof(rec.Expr4), 0);
				com->GetData(164, SQL_C_DOUBLE, &rec.Expr5, sizeof(rec.Expr5), 0);
				memset(Expr6, 0, 511);
				com->GetData(165, SQL_C_CHAR, Expr6, 511, 0);
				rec.Expr6 = (char *)Expr6;
				memset(Expr7, 0, 511);
				com->GetData(166, SQL_C_CHAR, Expr7, 511, 0);
				rec.Expr7 = (char *)Expr7;
				com->GetData(167, SQL_C_TYPE_TIMESTAMP, &rec.Expr8, sizeof(rec.Expr8), 0);
				memset(Expr9, 0, 511);
				com->GetData(168, SQL_C_CHAR, Expr9, 511, 0);
				rec.Expr9 = (char *)Expr9;
				memset(Expr10, 0, 511);
				com->GetData(169, SQL_C_CHAR, Expr10, 511, 0);
				rec.Expr10 = (char *)Expr10;
				memset(Expr11, 0, 511);
				com->GetData(170, SQL_C_CHAR, Expr11, 511, 0);
				rec.Expr11 = (char *)Expr11;
				memset(Expr12, 0, 41);
				com->GetData(171, SQL_C_CHAR, Expr12, 41, 0);
				rec.Expr12 = (char *)Expr12;
				memset(Expr13, 0, 101);
				com->GetData(172, SQL_C_CHAR, Expr13, 101, 0);
				rec.Expr13 = (char *)Expr13;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_syoken;
		delete[] km_sya012;
		delete[] km_sya022;
		delete[] km_sya032;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		delete[] MBR020;
		delete[] MBR060;
		delete[] MBR070;
		delete[] MBR090;
		delete[] MBR100;
		delete[] MBR110;
		delete[] MBR120;
		delete[] MBR130;
		delete[] Expr2;
		delete[] Expr6;
		delete[] Expr7;
		delete[] Expr9;
		delete[] Expr10;
		delete[] Expr11;
		delete[] Expr12;
		delete[] Expr13;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_koujisyain operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_koujisyain &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_koujisyain rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_koujisyain> m_Data;
};
class CR_v_kouji01 : public COdbcRecord {
public:
	CR_v_kouji01() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_kouji01() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_bikou1 = "";
		km_bikou2 = "";
		km_sw = 0;
		km_nyuno = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		km_sya011 = 0;
		km_sya012 = "";
		km_sya021 = 0;
		km_sya022 = "";
		km_syouhizei = 0.0;
		km_ritsu = 0.0;
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	std::string km_bikou1;
	std::string km_bikou2;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_nyuno;
	TIMESTAMP_STRUCT km_keidate;
	TIMESTAMP_STRUCT km_kaisi;
	TIMESTAMP_STRUCT km_owari;
	TIMESTAMP_STRUCT km_tyakou;
	TIMESTAMP_STRUCT km_kansei;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	SQLINTEGER km_sya011;
	std::string km_sya012;
	SQLINTEGER km_sya021;
	std::string km_sya022;
	SQLFLOAT km_syouhizei;
	TIMESTAMP_STRUCT km_mitsumori;
	SQLFLOAT km_ritsu;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_hat030;
		} break;
		case 8: {
			ss << this->km_hat040;
		} break;
		case 9: {
			ss << this->km_hat050;
		} break;
		case 10: {
			ss << this->km_bikou1;
		} break;
		case 11: {
			ss << this->km_bikou2;
		} break;
		case 12: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 13: {
			ss << this->km_sw;
		} break;
		case 14: {
			ss << this->km_nyuno;
		} break;
		case 15: {
			COdbcDateTime date(&this->km_keidate);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->km_kaisi);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->km_owari);
			ss << date.to_string();
		} break;
		case 18: {
			COdbcDateTime date(&this->km_tyakou);
			ss << date.to_string();
		} break;
		case 19: {
			COdbcDateTime date(&this->km_kansei);
			ss << date.to_string();
		} break;
		case 20: {
			ss << this->km_keiyaku;
		} break;
		case 21: {
			ss << this->km_tsuika;
		} break;
		case 22: {
			ss << this->km_goukei;
		} break;
		case 23: {
			ss << this->km_yosan;
		} break;
		case 24: {
			ss << this->km_genka;
		} break;
		case 25: {
			ss << this->km_sya011;
		} break;
		case 26: {
			ss << this->km_sya012;
		} break;
		case 27: {
			ss << this->km_sya021;
		} break;
		case 28: {
			ss << this->km_sya022;
		} break;
		case 29: {
			ss << this->km_syouhizei;
		} break;
		case 30: {
			COdbcDateTime date(&this->km_mitsumori);
			ss << date.to_string();
		} break;
		case 31: {
			ss << this->km_ritsu;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_kouji01 : public COdbcTable {
public:
	CT_v_kouji01() : COdbcTable() {
		m_TableName = "v_kouji01";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_nyuno,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu"
					  " FROM v_kouji01";
		m_SqlINSERT = "INSERT INTO v_kouji01 ("
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_nyuno,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu)"
					  " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_kouji01 SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_nyuno = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_sya011 = ?,"
					  "km_sya012 = ?,"
					  "km_sya021 = ?,"
					  "km_sya022 = ?,"
					  "km_syouhizei = ?,"
					  "km_mitsumori = ?,"
					  "km_ritsu = ?";

		m_SqlDELETE = "DELETE v_kouji01 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_hat030", "8", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_hat040", "9", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_hat050", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_bikou1", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_bikou2", "12", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_nyuudat", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_sw", "14", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_nyuno", "15", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_keidate", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_kaisi", "17", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_owari", "18", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_tyakou", "19", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_kansei", "20", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_keiyaku", "21", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_tsuika", "22", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_goukei", "23", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_yosan", "24", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_genka", "25", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_sya011", "26", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_sya012", "27", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_sya021", "28", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_sya022", "29", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_syouhizei", "30", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_mitsumori", "31", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji01", "km_ritsu", "32", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_kouji01() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		char *km_sya012 = new char[81];
		char *km_sya022 = new char[81];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_kouji01 rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				memset(km_hat030, 0, 101);
				com->GetData(8, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(9, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(10, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				memset(km_bikou1, 0, 511);
				com->GetData(11, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(12, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(14, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_nyuno, 0, 101);
				com->GetData(15, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.km_keidate, sizeof(rec.km_keidate), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.km_kaisi, sizeof(rec.km_kaisi), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.km_owari, sizeof(rec.km_owari), 0);
				com->GetData(19, SQL_C_TYPE_TIMESTAMP, &rec.km_tyakou, sizeof(rec.km_tyakou), 0);
				com->GetData(20, SQL_C_TYPE_TIMESTAMP, &rec.km_kansei, sizeof(rec.km_kansei), 0);
				com->GetData(21, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(22, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(23, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(24, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(25, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				com->GetData(26, SQL_C_LONG, &rec.km_sya011, sizeof(rec.km_sya011), 0);
				memset(km_sya012, 0, 81);
				com->GetData(27, SQL_C_CHAR, km_sya012, 81, 0);
				rec.km_sya012 = (char *)km_sya012;
				com->GetData(28, SQL_C_LONG, &rec.km_sya021, sizeof(rec.km_sya021), 0);
				memset(km_sya022, 0, 81);
				com->GetData(29, SQL_C_CHAR, km_sya022, 81, 0);
				rec.km_sya022 = (char *)km_sya022;
				com->GetData(30, SQL_C_DOUBLE, &rec.km_syouhizei, sizeof(rec.km_syouhizei), 0);
				com->GetData(31, SQL_C_TYPE_TIMESTAMP, &rec.km_mitsumori, sizeof(rec.km_mitsumori), 0);
				com->GetData(32, SQL_C_DOUBLE, &rec.km_ritsu, sizeof(rec.km_ritsu), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		delete[] km_sya012;
		delete[] km_sya022;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_kouji01 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_kouji01 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_kouji01 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_kouji01> m_Data;
};
class CR_t_bill : public COdbcRecord {
public:
	CR_t_bill() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_bill() {}

	void Initialize() {
		bil_index = 0;
		memset(&bil_kingaku, 0, sizeof(bil_kingaku));
		memset(&bil_gen, 0, sizeof(bil_gen));
		memset(&bil_mae, 0, sizeof(bil_mae));
	}

public:
	SQLINTEGER bil_index;
	SQL_NUMERIC_STRUCT bil_kingaku;
	SQL_NUMERIC_STRUCT bil_gen;
	SQL_NUMERIC_STRUCT bil_mae;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->bil_index;
		} break;
		case 1: {
			ss << COdbcColumn::NumericToString(&this->bil_kingaku);
		} break;
		case 2: {
			ss << COdbcColumn::NumericToString(&this->bil_gen);
		} break;
		case 3: {
			ss << COdbcColumn::NumericToString(&this->bil_mae);
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_bill : public COdbcTable {
public:
	CT_t_bill() : COdbcTable() {
		m_TableName = "t_bill";
		m_SqlSELECT = "SELECT "
					  "bil_index,"
					  "bil_kingaku,"
					  "bil_gen,"
					  "bil_mae"
					  " FROM t_bill";
		m_SqlINSERT = "INSERT INTO t_bill ("
					  "bil_kingaku,"
					  "bil_gen,"
					  "bil_mae)"
					  " VALUES ( ?,?,?)";
		m_SqlUPDATE = "UPDATE t_bill SET "
					  "bil_kingaku = ?,"
					  "bil_gen = ?,"
					  "bil_mae = ?";

		m_SqlDELETE = "DELETE t_bill ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_bill", "bil_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_bill", "bil_kingaku", "2", "", "YES", "decimal", "0", "0", "18", "0", "0", "",
					 "", 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_bill", "bil_gen", "3", "", "YES", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_bill", "bil_mae", "4", "", "YES", "decimal", "0", "0", "18", "0", "0", "", "",
					 0, _decimal, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_bill", "bil_index", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_bill() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_bill rec;
				com->GetData(1, SQL_C_LONG, &rec.bil_index, sizeof(rec.bil_index), 0);
				com->GetData(2, SQL_C_NUMERIC, &rec.bil_kingaku, sizeof(rec.bil_kingaku), 0);
				com->GetData(3, SQL_C_NUMERIC, &rec.bil_gen, sizeof(rec.bil_gen), 0);
				com->GetData(4, SQL_C_NUMERIC, &rec.bil_mae, sizeof(rec.bil_mae), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_bill operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_bill &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_bill rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_bill> m_Data;
};
class CR_v_kansei00 : public COdbcRecord {
public:
	CR_v_kansei00() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_kansei00() {}

	void Initialize() {
		kk_id = 0;
		kk_ynendo = 0;
		kk_knendo = 0;
		kk_syurui = 0;
		kk_jvflg = 0;
		kk_jvritsu = 0.0;
		kk_ukeoi = 0;
		kk_kanmin = 0;
		kk_ken = "";
		kk_shi = "";
		kk_tiku = "";
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_bikou1 = "";
		km_bikou2 = "";
		km_sw = 0;
		km_nyuno = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		km_sya011 = 0;
		km_sya012 = "";
		km_syouhizei = 0.0;
		memset(&kk_kingaku, 0, sizeof(kk_kingaku));
		memset(&kk_zei, 0, sizeof(kk_zei));
		memset(&kk_goukei, 0, sizeof(kk_goukei));
		kk_key = 0;
		sy_id = 0;
		sy_name = "";
	}

public:
	SQLINTEGER kk_id;
	SQLINTEGER kk_ynendo;
	SQLINTEGER kk_knendo;
	SQLINTEGER kk_syurui;
	SQLCHAR kk_jvflg;
	SQLFLOAT kk_jvritsu;
	SQLINTEGER kk_ukeoi;
	SQLINTEGER kk_kanmin;
	std::string kk_ken;
	std::string kk_shi;
	std::string kk_tiku;
	TIMESTAMP_STRUCT kk_kaisi;
	TIMESTAMP_STRUCT kk_owari;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	std::string km_bikou1;
	std::string km_bikou2;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_nyuno;
	TIMESTAMP_STRUCT km_keidate;
	TIMESTAMP_STRUCT km_kaisi;
	TIMESTAMP_STRUCT km_owari;
	TIMESTAMP_STRUCT km_tyakou;
	TIMESTAMP_STRUCT km_kansei;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	SQLINTEGER km_sya011;
	std::string km_sya012;
	SQLFLOAT km_syouhizei;
	TIMESTAMP_STRUCT km_mitsumori;
	SQL_NUMERIC_STRUCT kk_kingaku;
	SQL_NUMERIC_STRUCT kk_zei;
	SQL_NUMERIC_STRUCT kk_goukei;
	SQLINTEGER kk_key;
	SQLINTEGER sy_id;
	std::string sy_name;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->kk_id;
		} break;
		case 1: {
			ss << this->kk_ynendo;
		} break;
		case 2: {
			ss << this->kk_knendo;
		} break;
		case 3: {
			ss << this->kk_syurui;
		} break;
		case 4: {
			ss << this->kk_jvflg;
		} break;
		case 5: {
			ss << this->kk_jvritsu;
		} break;
		case 6: {
			ss << this->kk_ukeoi;
		} break;
		case 7: {
			ss << this->kk_kanmin;
		} break;
		case 8: {
			ss << this->kk_ken;
		} break;
		case 9: {
			ss << this->kk_shi;
		} break;
		case 10: {
			ss << this->kk_tiku;
		} break;
		case 11: {
			COdbcDateTime date(&this->kk_kaisi);
			ss << date.to_string();
		} break;
		case 12: {
			COdbcDateTime date(&this->kk_owari);
			ss << date.to_string();
		} break;
		case 13: {
			ss << this->km_name;
		} break;
		case 14: {
			ss << this->km_no;
		} break;
		case 15: {
			ss << this->km_syucd;
		} break;
		case 16: {
			ss << this->km_kosyu;
		} break;
		case 17: {
			ss << this->km_hatcd;
		} break;
		case 18: {
			ss << this->km_hat02;
		} break;
		case 19: {
			ss << this->km_hat030;
		} break;
		case 20: {
			ss << this->km_hat040;
		} break;
		case 21: {
			ss << this->km_hat050;
		} break;
		case 22: {
			ss << this->km_bikou1;
		} break;
		case 23: {
			ss << this->km_bikou2;
		} break;
		case 24: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 25: {
			ss << this->km_sw;
		} break;
		case 26: {
			ss << this->km_nyuno;
		} break;
		case 27: {
			COdbcDateTime date(&this->km_keidate);
			ss << date.to_string();
		} break;
		case 28: {
			COdbcDateTime date(&this->km_kaisi);
			ss << date.to_string();
		} break;
		case 29: {
			COdbcDateTime date(&this->km_owari);
			ss << date.to_string();
		} break;
		case 30: {
			COdbcDateTime date(&this->km_tyakou);
			ss << date.to_string();
		} break;
		case 31: {
			COdbcDateTime date(&this->km_kansei);
			ss << date.to_string();
		} break;
		case 32: {
			ss << this->km_keiyaku;
		} break;
		case 33: {
			ss << this->km_tsuika;
		} break;
		case 34: {
			ss << this->km_goukei;
		} break;
		case 35: {
			ss << this->km_yosan;
		} break;
		case 36: {
			ss << this->km_genka;
		} break;
		case 37: {
			ss << this->km_sya011;
		} break;
		case 38: {
			ss << this->km_sya012;
		} break;
		case 39: {
			ss << this->km_syouhizei;
		} break;
		case 40: {
			COdbcDateTime date(&this->km_mitsumori);
			ss << date.to_string();
		} break;
		case 41: {
			ss << COdbcColumn::NumericToString(&this->kk_kingaku);
		} break;
		case 42: {
			ss << COdbcColumn::NumericToString(&this->kk_zei);
		} break;
		case 43: {
			ss << COdbcColumn::NumericToString(&this->kk_goukei);
		} break;
		case 44: {
			ss << this->kk_key;
		} break;
		case 45: {
			ss << this->sy_id;
		} break;
		case 46: {
			ss << this->sy_name;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_kansei00 : public COdbcTable {
public:
	CT_v_kansei00() : COdbcTable() {
		m_TableName = "v_kansei00";
		m_SqlSELECT = "SELECT "
					  "kk_id,"
					  "kk_ynendo,"
					  "kk_knendo,"
					  "kk_syurui,"
					  "kk_jvflg,"
					  "kk_jvritsu,"
					  "kk_ukeoi,"
					  "kk_kanmin,"
					  "kk_ken,"
					  "kk_shi,"
					  "kk_tiku,"
					  "kk_kaisi,"
					  "kk_owari,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_nyuno,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "kk_kingaku,"
					  "kk_zei,"
					  "kk_goukei,"
					  "kk_key,"
					  "sy_id,"
					  "sy_name"
					  " FROM v_kansei00";
		m_SqlINSERT =
			"INSERT INTO v_kansei00 ("
			"kk_id,"
			"kk_ynendo,"
			"kk_knendo,"
			"kk_syurui,"
			"kk_jvflg,"
			"kk_jvritsu,"
			"kk_ukeoi,"
			"kk_kanmin,"
			"kk_ken,"
			"kk_shi,"
			"kk_tiku,"
			"kk_kaisi,"
			"kk_owari,"
			"km_name,"
			"km_no,"
			"km_syucd,"
			"km_kosyu,"
			"km_hatcd,"
			"km_hat02,"
			"km_hat030,"
			"km_hat040,"
			"km_hat050,"
			"km_bikou1,"
			"km_bikou2,"
			"km_nyuudat,"
			"km_sw,"
			"km_nyuno,"
			"km_keidate,"
			"km_kaisi,"
			"km_owari,"
			"km_tyakou,"
			"km_kansei,"
			"km_keiyaku,"
			"km_tsuika,"
			"km_goukei,"
			"km_yosan,"
			"km_genka,"
			"km_sya011,"
			"km_sya012,"
			"km_syouhizei,"
			"km_mitsumori,"
			"kk_kingaku,"
			"kk_zei,"
			"kk_goukei,"
			"kk_key,"
			"sy_id,"
			"sy_name)"
			" VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_kansei00 SET "
					  "kk_id = ?,"
					  "kk_ynendo = ?,"
					  "kk_knendo = ?,"
					  "kk_syurui = ?,"
					  "kk_jvflg = ?,"
					  "kk_jvritsu = ?,"
					  "kk_ukeoi = ?,"
					  "kk_kanmin = ?,"
					  "kk_ken = ?,"
					  "kk_shi = ?,"
					  "kk_tiku = ?,"
					  "kk_kaisi = ?,"
					  "kk_owari = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_nyuno = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_sya011 = ?,"
					  "km_sya012 = ?,"
					  "km_syouhizei = ?,"
					  "km_mitsumori = ?,"
					  "kk_kingaku = ?,"
					  "kk_zei = ?,"
					  "kk_goukei = ?,"
					  "kk_key = ?,"
					  "sy_id = ?,"
					  "sy_name = ?";

		m_SqlDELETE = "DELETE v_kansei00 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_id", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_ynendo", "2", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_knendo", "3", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_syurui", "4", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_jvflg", "5", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_jvritsu", "6", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_ukeoi", "7", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_kanmin", "8", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_ken", "9", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_shi", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_tiku", "11", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_kaisi", "12", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_owari", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_name", "14", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_no", "15", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_syucd", "16", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_kosyu", "17", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_hatcd", "18", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_hat02", "19", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_hat030", "20", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_hat040", "21", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_hat050", "22", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_bikou1", "23", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_bikou2", "24", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_nyuudat", "25", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_sw", "26", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_nyuno", "27", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_keidate", "28", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_kaisi", "29", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_owari", "30", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_tyakou", "31", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_kansei", "32", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_keiyaku", "33", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_tsuika", "34", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_goukei", "35", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_yosan", "36", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_genka", "37", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_sya011", "38", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_sya012", "39", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_syouhizei", "40", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "km_mitsumori", "41", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_kingaku", "42", "", "YES", "money", "0", "0", "19", "4", "0",
					 "", "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_zei", "43", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_goukei", "44", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "kk_key", "45", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "sy_id", "46", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kansei00", "sy_name", "47", "", "YES", "varchar", "255", "255", "0", "0", "0",
					 "cp932", "Japanese_CI_AS", 0, _varchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_kansei00() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *kk_ken = new char[101];
		char *kk_shi = new char[101];
		char *kk_tiku = new char[101];
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		char *km_sya012 = new char[81];
		char *sy_name = new char[256];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_kansei00 rec;
				com->GetData(1, SQL_C_LONG, &rec.kk_id, sizeof(rec.kk_id), 0);
				com->GetData(2, SQL_C_LONG, &rec.kk_ynendo, sizeof(rec.kk_ynendo), 0);
				com->GetData(3, SQL_C_LONG, &rec.kk_knendo, sizeof(rec.kk_knendo), 0);
				com->GetData(4, SQL_C_LONG, &rec.kk_syurui, sizeof(rec.kk_syurui), 0);
				com->GetData(5, SQL_C_CHAR, &rec.kk_jvflg, sizeof(rec.kk_jvflg), 0);
				com->GetData(6, SQL_C_DOUBLE, &rec.kk_jvritsu, sizeof(rec.kk_jvritsu), 0);
				com->GetData(7, SQL_C_LONG, &rec.kk_ukeoi, sizeof(rec.kk_ukeoi), 0);
				com->GetData(8, SQL_C_LONG, &rec.kk_kanmin, sizeof(rec.kk_kanmin), 0);
				memset(kk_ken, 0, 101);
				com->GetData(9, SQL_C_CHAR, kk_ken, 101, 0);
				rec.kk_ken = (char *)kk_ken;
				memset(kk_shi, 0, 101);
				com->GetData(10, SQL_C_CHAR, kk_shi, 101, 0);
				rec.kk_shi = (char *)kk_shi;
				memset(kk_tiku, 0, 101);
				com->GetData(11, SQL_C_CHAR, kk_tiku, 101, 0);
				rec.kk_tiku = (char *)kk_tiku;
				com->GetData(12, SQL_C_TYPE_TIMESTAMP, &rec.kk_kaisi, sizeof(rec.kk_kaisi), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.kk_owari, sizeof(rec.kk_owari), 0);
				memset(km_name, 0, 511);
				com->GetData(14, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(15, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(16, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(17, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(18, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(19, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				memset(km_hat030, 0, 101);
				com->GetData(20, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(21, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(22, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				memset(km_bikou1, 0, 511);
				com->GetData(23, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(24, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				com->GetData(25, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(26, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_nyuno, 0, 101);
				com->GetData(27, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				com->GetData(28, SQL_C_TYPE_TIMESTAMP, &rec.km_keidate, sizeof(rec.km_keidate), 0);
				com->GetData(29, SQL_C_TYPE_TIMESTAMP, &rec.km_kaisi, sizeof(rec.km_kaisi), 0);
				com->GetData(30, SQL_C_TYPE_TIMESTAMP, &rec.km_owari, sizeof(rec.km_owari), 0);
				com->GetData(31, SQL_C_TYPE_TIMESTAMP, &rec.km_tyakou, sizeof(rec.km_tyakou), 0);
				com->GetData(32, SQL_C_TYPE_TIMESTAMP, &rec.km_kansei, sizeof(rec.km_kansei), 0);
				com->GetData(33, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(34, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(35, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(36, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(37, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				com->GetData(38, SQL_C_LONG, &rec.km_sya011, sizeof(rec.km_sya011), 0);
				memset(km_sya012, 0, 81);
				com->GetData(39, SQL_C_CHAR, km_sya012, 81, 0);
				rec.km_sya012 = (char *)km_sya012;
				com->GetData(40, SQL_C_DOUBLE, &rec.km_syouhizei, sizeof(rec.km_syouhizei), 0);
				com->GetData(41, SQL_C_TYPE_TIMESTAMP, &rec.km_mitsumori, sizeof(rec.km_mitsumori), 0);
				com->GetData(42, SQL_C_NUMERIC, &rec.kk_kingaku, sizeof(rec.kk_kingaku), 0);
				com->GetData(43, SQL_C_NUMERIC, &rec.kk_zei, sizeof(rec.kk_zei), 0);
				com->GetData(44, SQL_C_NUMERIC, &rec.kk_goukei, sizeof(rec.kk_goukei), 0);
				com->GetData(45, SQL_C_LONG, &rec.kk_key, sizeof(rec.kk_key), 0);
				com->GetData(46, SQL_C_LONG, &rec.sy_id, sizeof(rec.sy_id), 0);
				memset(sy_name, 0, 256);
				com->GetData(47, SQL_C_CHAR, sy_name, 256, 0);
				rec.sy_name = (char *)sy_name;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] kk_ken;
		delete[] kk_shi;
		delete[] kk_tiku;
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		delete[] km_sya012;
		delete[] sy_name;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_kansei00 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_kansei00 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_kansei00 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_kansei00> m_Data;
};
class CR_v_kouji02 : public COdbcRecord {
public:
	CR_v_kouji02() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_kouji02() {}

	void Initialize() {
		km_index = 0;
		km_name = "";
		km_no = "";
		km_syucd = 0;
		km_kosyu = "";
		km_hatcd = 0;
		km_hat02 = "";
		km_hat030 = "";
		km_hat040 = "";
		km_hat050 = "";
		km_bikou1 = "";
		km_bikou2 = "";
		km_sw = 0;
		km_nyuno = "";
		km_keiyaku = 0.0;
		km_tsuika = 0.0;
		km_goukei = 0.0;
		km_yosan = 0.0;
		km_genka = 0.0;
		km_sya011 = 0;
		km_sya012 = "";
		km_sya021 = 0;
		km_sya022 = "";
		km_syouhizei = 0.0;
		km_ritsu = 0.0;
		kk_id = 0;
		kk_ynendo = 0;
		kk_knendo = 0;
		kk_syurui = 0;
		kk_jvflg = 0;
		kk_jvritsu = 0.0;
		kk_ukeoi = 0;
		kk_kanmin = 0;
		kk_ken = "";
		kk_shi = "";
		kk_tiku = "";
		memset(&kk_kingaku, 0, sizeof(kk_kingaku));
		memset(&kk_zei, 0, sizeof(kk_zei));
		memset(&kk_goukei, 0, sizeof(kk_goukei));
		kk_point = 0;
		kk_ritsu = 0.0;
		kk_key = 0;
	}

public:
	SQLINTEGER km_index;
	std::string km_name;
	std::string km_no;
	SQLINTEGER km_syucd;
	std::string km_kosyu;
	SQLINTEGER km_hatcd;
	std::string km_hat02;
	std::string km_hat030;
	std::string km_hat040;
	std::string km_hat050;
	std::string km_bikou1;
	std::string km_bikou2;
	TIMESTAMP_STRUCT km_nyuudat;
	SQLCHAR km_sw;
	std::string km_nyuno;
	TIMESTAMP_STRUCT km_keidate;
	TIMESTAMP_STRUCT km_kaisi;
	TIMESTAMP_STRUCT km_owari;
	TIMESTAMP_STRUCT km_tyakou;
	TIMESTAMP_STRUCT km_kansei;
	SQLFLOAT km_keiyaku;
	SQLFLOAT km_tsuika;
	SQLFLOAT km_goukei;
	SQLFLOAT km_yosan;
	SQLFLOAT km_genka;
	SQLINTEGER km_sya011;
	std::string km_sya012;
	SQLINTEGER km_sya021;
	std::string km_sya022;
	SQLFLOAT km_syouhizei;
	TIMESTAMP_STRUCT km_mitsumori;
	SQLFLOAT km_ritsu;
	SQLINTEGER kk_id;
	SQLINTEGER kk_ynendo;
	SQLINTEGER kk_knendo;
	SQLINTEGER kk_syurui;
	SQLCHAR kk_jvflg;
	SQLFLOAT kk_jvritsu;
	SQLINTEGER kk_ukeoi;
	SQLINTEGER kk_kanmin;
	std::string kk_ken;
	std::string kk_shi;
	std::string kk_tiku;
	TIMESTAMP_STRUCT kk_kaisi;
	TIMESTAMP_STRUCT kk_owari;
	SQL_NUMERIC_STRUCT kk_kingaku;
	SQL_NUMERIC_STRUCT kk_zei;
	SQL_NUMERIC_STRUCT kk_goukei;
	SQLINTEGER kk_point;
	SQLFLOAT kk_ritsu;
	SQLINTEGER kk_key;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->km_index;
		} break;
		case 1: {
			ss << this->km_name;
		} break;
		case 2: {
			ss << this->km_no;
		} break;
		case 3: {
			ss << this->km_syucd;
		} break;
		case 4: {
			ss << this->km_kosyu;
		} break;
		case 5: {
			ss << this->km_hatcd;
		} break;
		case 6: {
			ss << this->km_hat02;
		} break;
		case 7: {
			ss << this->km_hat030;
		} break;
		case 8: {
			ss << this->km_hat040;
		} break;
		case 9: {
			ss << this->km_hat050;
		} break;
		case 10: {
			ss << this->km_bikou1;
		} break;
		case 11: {
			ss << this->km_bikou2;
		} break;
		case 12: {
			COdbcDateTime date(&this->km_nyuudat);
			ss << date.to_string();
		} break;
		case 13: {
			ss << this->km_sw;
		} break;
		case 14: {
			ss << this->km_nyuno;
		} break;
		case 15: {
			COdbcDateTime date(&this->km_keidate);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->km_kaisi);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->km_owari);
			ss << date.to_string();
		} break;
		case 18: {
			COdbcDateTime date(&this->km_tyakou);
			ss << date.to_string();
		} break;
		case 19: {
			COdbcDateTime date(&this->km_kansei);
			ss << date.to_string();
		} break;
		case 20: {
			ss << this->km_keiyaku;
		} break;
		case 21: {
			ss << this->km_tsuika;
		} break;
		case 22: {
			ss << this->km_goukei;
		} break;
		case 23: {
			ss << this->km_yosan;
		} break;
		case 24: {
			ss << this->km_genka;
		} break;
		case 25: {
			ss << this->km_sya011;
		} break;
		case 26: {
			ss << this->km_sya012;
		} break;
		case 27: {
			ss << this->km_sya021;
		} break;
		case 28: {
			ss << this->km_sya022;
		} break;
		case 29: {
			ss << this->km_syouhizei;
		} break;
		case 30: {
			COdbcDateTime date(&this->km_mitsumori);
			ss << date.to_string();
		} break;
		case 31: {
			ss << this->km_ritsu;
		} break;
		case 32: {
			ss << this->kk_id;
		} break;
		case 33: {
			ss << this->kk_ynendo;
		} break;
		case 34: {
			ss << this->kk_knendo;
		} break;
		case 35: {
			ss << this->kk_syurui;
		} break;
		case 36: {
			ss << this->kk_jvflg;
		} break;
		case 37: {
			ss << this->kk_jvritsu;
		} break;
		case 38: {
			ss << this->kk_ukeoi;
		} break;
		case 39: {
			ss << this->kk_kanmin;
		} break;
		case 40: {
			ss << this->kk_ken;
		} break;
		case 41: {
			ss << this->kk_shi;
		} break;
		case 42: {
			ss << this->kk_tiku;
		} break;
		case 43: {
			COdbcDateTime date(&this->kk_kaisi);
			ss << date.to_string();
		} break;
		case 44: {
			COdbcDateTime date(&this->kk_owari);
			ss << date.to_string();
		} break;
		case 45: {
			ss << COdbcColumn::NumericToString(&this->kk_kingaku);
		} break;
		case 46: {
			ss << COdbcColumn::NumericToString(&this->kk_zei);
		} break;
		case 47: {
			ss << COdbcColumn::NumericToString(&this->kk_goukei);
		} break;
		case 48: {
			ss << this->kk_point;
		} break;
		case 49: {
			ss << this->kk_ritsu;
		} break;
		case 50: {
			ss << this->kk_key;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_kouji02 : public COdbcTable {
public:
	CT_v_kouji02() : COdbcTable() {
		m_TableName = "v_kouji02";
		m_SqlSELECT = "SELECT "
					  "km_index,"
					  "km_name,"
					  "km_no,"
					  "km_syucd,"
					  "km_kosyu,"
					  "km_hatcd,"
					  "km_hat02,"
					  "km_hat030,"
					  "km_hat040,"
					  "km_hat050,"
					  "km_bikou1,"
					  "km_bikou2,"
					  "km_nyuudat,"
					  "km_sw,"
					  "km_nyuno,"
					  "km_keidate,"
					  "km_kaisi,"
					  "km_owari,"
					  "km_tyakou,"
					  "km_kansei,"
					  "km_keiyaku,"
					  "km_tsuika,"
					  "km_goukei,"
					  "km_yosan,"
					  "km_genka,"
					  "km_sya011,"
					  "km_sya012,"
					  "km_sya021,"
					  "km_sya022,"
					  "km_syouhizei,"
					  "km_mitsumori,"
					  "km_ritsu,"
					  "kk_id,"
					  "kk_ynendo,"
					  "kk_knendo,"
					  "kk_syurui,"
					  "kk_jvflg,"
					  "kk_jvritsu,"
					  "kk_ukeoi,"
					  "kk_kanmin,"
					  "kk_ken,"
					  "kk_shi,"
					  "kk_tiku,"
					  "kk_kaisi,"
					  "kk_owari,"
					  "kk_kingaku,"
					  "kk_zei,"
					  "kk_goukei,"
					  "kk_point,"
					  "kk_ritsu,"
					  "kk_key"
					  " FROM v_kouji02";
		m_SqlINSERT =
			"INSERT INTO v_kouji02 ("
			"km_index,"
			"km_name,"
			"km_no,"
			"km_syucd,"
			"km_kosyu,"
			"km_hatcd,"
			"km_hat02,"
			"km_hat030,"
			"km_hat040,"
			"km_hat050,"
			"km_bikou1,"
			"km_bikou2,"
			"km_nyuudat,"
			"km_sw,"
			"km_nyuno,"
			"km_keidate,"
			"km_kaisi,"
			"km_owari,"
			"km_tyakou,"
			"km_kansei,"
			"km_keiyaku,"
			"km_tsuika,"
			"km_goukei,"
			"km_yosan,"
			"km_genka,"
			"km_sya011,"
			"km_sya012,"
			"km_sya021,"
			"km_sya022,"
			"km_syouhizei,"
			"km_mitsumori,"
			"km_ritsu,"
			"kk_id,"
			"kk_ynendo,"
			"kk_knendo,"
			"kk_syurui,"
			"kk_jvflg,"
			"kk_jvritsu,"
			"kk_ukeoi,"
			"kk_kanmin,"
			"kk_ken,"
			"kk_shi,"
			"kk_tiku,"
			"kk_kaisi,"
			"kk_owari,"
			"kk_kingaku,"
			"kk_zei,"
			"kk_goukei,"
			"kk_point,"
			"kk_ritsu,"
			"kk_key)"
			" VALUES ( "
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_kouji02 SET "
					  "km_index = ?,"
					  "km_name = ?,"
					  "km_no = ?,"
					  "km_syucd = ?,"
					  "km_kosyu = ?,"
					  "km_hatcd = ?,"
					  "km_hat02 = ?,"
					  "km_hat030 = ?,"
					  "km_hat040 = ?,"
					  "km_hat050 = ?,"
					  "km_bikou1 = ?,"
					  "km_bikou2 = ?,"
					  "km_nyuudat = ?,"
					  "km_sw = ?,"
					  "km_nyuno = ?,"
					  "km_keidate = ?,"
					  "km_kaisi = ?,"
					  "km_owari = ?,"
					  "km_tyakou = ?,"
					  "km_kansei = ?,"
					  "km_keiyaku = ?,"
					  "km_tsuika = ?,"
					  "km_goukei = ?,"
					  "km_yosan = ?,"
					  "km_genka = ?,"
					  "km_sya011 = ?,"
					  "km_sya012 = ?,"
					  "km_sya021 = ?,"
					  "km_sya022 = ?,"
					  "km_syouhizei = ?,"
					  "km_mitsumori = ?,"
					  "km_ritsu = ?,"
					  "kk_id = ?,"
					  "kk_ynendo = ?,"
					  "kk_knendo = ?,"
					  "kk_syurui = ?,"
					  "kk_jvflg = ?,"
					  "kk_jvritsu = ?,"
					  "kk_ukeoi = ?,"
					  "kk_kanmin = ?,"
					  "kk_ken = ?,"
					  "kk_shi = ?,"
					  "kk_tiku = ?,"
					  "kk_kaisi = ?,"
					  "kk_owari = ?,"
					  "kk_kingaku = ?,"
					  "kk_zei = ?,"
					  "kk_goukei = ?,"
					  "kk_point = ?,"
					  "kk_ritsu = ?,"
					  "kk_key = ?";

		m_SqlDELETE = "DELETE v_kouji02 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_name", "2", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_no", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_syucd", "4", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_kosyu", "5", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_hat02", "7", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_hat030", "8", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_hat040", "9", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_hat050", "10", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_bikou1", "11", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_bikou2", "12", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_nyuudat", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_sw", "14", "", "YES", "bit", "0", "0", "0", "0", "0", "", "", 0,
					 _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_nyuno", "15", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_keidate", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_kaisi", "17", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_owari", "18", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_tyakou", "19", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_kansei", "20", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_keiyaku", "21", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_tsuika", "22", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_goukei", "23", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_yosan", "24", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_genka", "25", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_sya011", "26", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_sya012", "27", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_sya021", "28", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_sya022", "29", "", "YES", "nvarchar", "40", "80", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_syouhizei", "30", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_mitsumori", "31", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "km_ritsu", "32", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_id", "33", "", "YES", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_ynendo", "34", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_knendo", "35", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_syurui", "36", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_jvflg", "37", "", "YES", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_jvritsu", "38", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_ukeoi", "39", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_kanmin", "40", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_ken", "41", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_shi", "42", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_tiku", "43", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_kaisi", "44", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_owari", "45", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_kingaku", "46", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_zei", "47", "", "YES", "money", "0", "0", "19", "4", "0", "", "",
					 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_goukei", "48", "", "YES", "money", "0", "0", "19", "4", "0", "",
					 "", 0, _money, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_point", "49", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_ritsu", "50", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_kouji02", "kk_key", "51", "", "YES", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_kouji02() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *km_name = new char[511];
		char *km_no = new char[511];
		char *km_kosyu = new char[101];
		char *km_hat02 = new char[511];
		char *km_hat030 = new char[101];
		char *km_hat040 = new char[101];
		char *km_hat050 = new char[101];
		char *km_bikou1 = new char[511];
		char *km_bikou2 = new char[511];
		char *km_nyuno = new char[101];
		char *km_sya012 = new char[81];
		char *km_sya022 = new char[81];
		char *kk_ken = new char[101];
		char *kk_shi = new char[101];
		char *kk_tiku = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_kouji02 rec;
				com->GetData(1, SQL_C_LONG, &rec.km_index, sizeof(rec.km_index), 0);
				memset(km_name, 0, 511);
				com->GetData(2, SQL_C_CHAR, km_name, 511, 0);
				rec.km_name = (char *)km_name;
				memset(km_no, 0, 511);
				com->GetData(3, SQL_C_CHAR, km_no, 511, 0);
				rec.km_no = (char *)km_no;
				com->GetData(4, SQL_C_LONG, &rec.km_syucd, sizeof(rec.km_syucd), 0);
				memset(km_kosyu, 0, 101);
				com->GetData(5, SQL_C_CHAR, km_kosyu, 101, 0);
				rec.km_kosyu = (char *)km_kosyu;
				com->GetData(6, SQL_C_LONG, &rec.km_hatcd, sizeof(rec.km_hatcd), 0);
				memset(km_hat02, 0, 511);
				com->GetData(7, SQL_C_CHAR, km_hat02, 511, 0);
				rec.km_hat02 = (char *)km_hat02;
				memset(km_hat030, 0, 101);
				com->GetData(8, SQL_C_CHAR, km_hat030, 101, 0);
				rec.km_hat030 = (char *)km_hat030;
				memset(km_hat040, 0, 101);
				com->GetData(9, SQL_C_CHAR, km_hat040, 101, 0);
				rec.km_hat040 = (char *)km_hat040;
				memset(km_hat050, 0, 101);
				com->GetData(10, SQL_C_CHAR, km_hat050, 101, 0);
				rec.km_hat050 = (char *)km_hat050;
				memset(km_bikou1, 0, 511);
				com->GetData(11, SQL_C_CHAR, km_bikou1, 511, 0);
				rec.km_bikou1 = (char *)km_bikou1;
				memset(km_bikou2, 0, 511);
				com->GetData(12, SQL_C_CHAR, km_bikou2, 511, 0);
				rec.km_bikou2 = (char *)km_bikou2;
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.km_nyuudat, sizeof(rec.km_nyuudat), 0);
				com->GetData(14, SQL_C_CHAR, &rec.km_sw, sizeof(rec.km_sw), 0);
				memset(km_nyuno, 0, 101);
				com->GetData(15, SQL_C_CHAR, km_nyuno, 101, 0);
				rec.km_nyuno = (char *)km_nyuno;
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.km_keidate, sizeof(rec.km_keidate), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.km_kaisi, sizeof(rec.km_kaisi), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.km_owari, sizeof(rec.km_owari), 0);
				com->GetData(19, SQL_C_TYPE_TIMESTAMP, &rec.km_tyakou, sizeof(rec.km_tyakou), 0);
				com->GetData(20, SQL_C_TYPE_TIMESTAMP, &rec.km_kansei, sizeof(rec.km_kansei), 0);
				com->GetData(21, SQL_C_DOUBLE, &rec.km_keiyaku, sizeof(rec.km_keiyaku), 0);
				com->GetData(22, SQL_C_DOUBLE, &rec.km_tsuika, sizeof(rec.km_tsuika), 0);
				com->GetData(23, SQL_C_DOUBLE, &rec.km_goukei, sizeof(rec.km_goukei), 0);
				com->GetData(24, SQL_C_DOUBLE, &rec.km_yosan, sizeof(rec.km_yosan), 0);
				com->GetData(25, SQL_C_DOUBLE, &rec.km_genka, sizeof(rec.km_genka), 0);
				com->GetData(26, SQL_C_LONG, &rec.km_sya011, sizeof(rec.km_sya011), 0);
				memset(km_sya012, 0, 81);
				com->GetData(27, SQL_C_CHAR, km_sya012, 81, 0);
				rec.km_sya012 = (char *)km_sya012;
				com->GetData(28, SQL_C_LONG, &rec.km_sya021, sizeof(rec.km_sya021), 0);
				memset(km_sya022, 0, 81);
				com->GetData(29, SQL_C_CHAR, km_sya022, 81, 0);
				rec.km_sya022 = (char *)km_sya022;
				com->GetData(30, SQL_C_DOUBLE, &rec.km_syouhizei, sizeof(rec.km_syouhizei), 0);
				com->GetData(31, SQL_C_TYPE_TIMESTAMP, &rec.km_mitsumori, sizeof(rec.km_mitsumori), 0);
				com->GetData(32, SQL_C_DOUBLE, &rec.km_ritsu, sizeof(rec.km_ritsu), 0);
				com->GetData(33, SQL_C_LONG, &rec.kk_id, sizeof(rec.kk_id), 0);
				com->GetData(34, SQL_C_LONG, &rec.kk_ynendo, sizeof(rec.kk_ynendo), 0);
				com->GetData(35, SQL_C_LONG, &rec.kk_knendo, sizeof(rec.kk_knendo), 0);
				com->GetData(36, SQL_C_LONG, &rec.kk_syurui, sizeof(rec.kk_syurui), 0);
				com->GetData(37, SQL_C_CHAR, &rec.kk_jvflg, sizeof(rec.kk_jvflg), 0);
				com->GetData(38, SQL_C_DOUBLE, &rec.kk_jvritsu, sizeof(rec.kk_jvritsu), 0);
				com->GetData(39, SQL_C_LONG, &rec.kk_ukeoi, sizeof(rec.kk_ukeoi), 0);
				com->GetData(40, SQL_C_LONG, &rec.kk_kanmin, sizeof(rec.kk_kanmin), 0);
				memset(kk_ken, 0, 101);
				com->GetData(41, SQL_C_CHAR, kk_ken, 101, 0);
				rec.kk_ken = (char *)kk_ken;
				memset(kk_shi, 0, 101);
				com->GetData(42, SQL_C_CHAR, kk_shi, 101, 0);
				rec.kk_shi = (char *)kk_shi;
				memset(kk_tiku, 0, 101);
				com->GetData(43, SQL_C_CHAR, kk_tiku, 101, 0);
				rec.kk_tiku = (char *)kk_tiku;
				com->GetData(44, SQL_C_TYPE_TIMESTAMP, &rec.kk_kaisi, sizeof(rec.kk_kaisi), 0);
				com->GetData(45, SQL_C_TYPE_TIMESTAMP, &rec.kk_owari, sizeof(rec.kk_owari), 0);
				com->GetData(46, SQL_C_NUMERIC, &rec.kk_kingaku, sizeof(rec.kk_kingaku), 0);
				com->GetData(47, SQL_C_NUMERIC, &rec.kk_zei, sizeof(rec.kk_zei), 0);
				com->GetData(48, SQL_C_NUMERIC, &rec.kk_goukei, sizeof(rec.kk_goukei), 0);
				com->GetData(49, SQL_C_LONG, &rec.kk_point, sizeof(rec.kk_point), 0);
				com->GetData(50, SQL_C_DOUBLE, &rec.kk_ritsu, sizeof(rec.kk_ritsu), 0);
				com->GetData(51, SQL_C_LONG, &rec.kk_key, sizeof(rec.kk_key), 0);
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] km_name;
		delete[] km_no;
		delete[] km_kosyu;
		delete[] km_hat02;
		delete[] km_hat030;
		delete[] km_hat040;
		delete[] km_hat050;
		delete[] km_bikou1;
		delete[] km_bikou2;
		delete[] km_nyuno;
		delete[] km_sya012;
		delete[] km_sya022;
		delete[] kk_ken;
		delete[] kk_shi;
		delete[] kk_tiku;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_kouji02 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_kouji02 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_kouji02 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_kouji02> m_Data;
};
class CR_t_corins : public COdbcRecord {
public:
	CR_t_corins() : COdbcRecord() { Initialize(); }
	virtual ~CR_t_corins() {}

	void Initialize() {
		cr_index = 0;
		cr_no = "";
		cr_xml = "";
	}

public:
	SQLINTEGER cr_index;
	std::string cr_no;
	std::string cr_xml;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->cr_index;
		} break;
		case 1: {
			ss << this->cr_no;
		} break;
		case 2: {
			ss << this->cr_xml;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_t_corins : public COdbcTable {
public:
	CT_t_corins() : COdbcTable() {
		m_TableName = "t_corins";
		m_SqlSELECT = "SELECT "
					  "cr_index,"
					  "cr_no,"
					  "cr_xml"
					  " FROM t_corins";
		m_SqlINSERT = "INSERT INTO t_corins ("
					  "cr_no,"
					  "cr_xml)"
					  " VALUES ( ?,?)";
		m_SqlUPDATE = "UPDATE t_corins SET "
					  "cr_no = ?,"
					  "cr_xml = ?";

		m_SqlDELETE = "DELETE t_corins ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "t_corins", "cr_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 1,
					 _int, 0);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_corins", "cr_no", "2", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "t_corins", "cr_xml", "3", "", "YES", "text", "2147483647", "2147483647", "0",
					 "0", "0", "cp932", "Japanese_CI_AS", 0, _text, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
		key.Set_Value("PK_t_corins", "cr_index", 1);
		m_Key.push_back(key);
	}
	virtual ~CT_t_corins() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *cr_no = new char[101];
		char *cr_xml = new char[2147483648];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_t_corins rec;
				com->GetData(1, SQL_C_LONG, &rec.cr_index, sizeof(rec.cr_index), 0);
				memset(cr_no, 0, 101);
				com->GetData(2, SQL_C_CHAR, cr_no, 101, 0);
				rec.cr_no = (char *)cr_no;
				memset(cr_xml, 0, MAXBUF);
				com->GetData(3, SQL_C_CHAR, cr_xml, MAXBUF, 0);
				rec.cr_xml = (char *)cr_xml;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] cr_no;
		delete[] cr_xml;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_t_corins operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_t_corins &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_t_corins rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_t_corins> m_Data;
};
class CR_v__nyusatsu00 : public COdbcRecord {
public:
	CR_v__nyusatsu00() : COdbcRecord() { Initialize(); }
	virtual ~CR_v__nyusatsu00() {}

	void Initialize() {
		n_index = 0;
		n_kname = "";
		n_kno = "";
		n_scode = 0;
		n_syubetsu = "";
		n_hatcd = 0;
		n_HAT020 = "";
		n_keiyaku = 0.0;
		n_tuika = 0.0;
		n_koukei = 0.0;
		n_yosan = 0.0;
		n_genka = 0.0;
		n_dairi = "";
		n_eigyou = "";
		n_HAT030 = "";
		n_HAT040 = "";
		n_HAT050 = "";
		n_sw = 0;
		n_bikou1 = "";
		n_bikou2 = "";
		n_nyuno = "";
		n_type = 0;
		n_sya011 = 0;
		n_sya012 = "";
		n_ucode = 0;
		kai00 = 0;
		Kai01 = "";
		Kai02 = "";
		Kai03 = "";
		Kai04 = "";
		Kai05 = "";
		Kai06 = "";
		Kai07 = "";
		Kai08 = "";
		Kai09 = "";
		Kai10 = "";
		Kai11 = "";
		Kai12 = "";
	}

public:
	SQLINTEGER n_index;
	std::string n_kname;
	std::string n_kno;
	SQLINTEGER n_scode;
	std::string n_syubetsu;
	SQLINTEGER n_hatcd;
	std::string n_HAT020;
	SQLFLOAT n_keiyaku;
	SQLFLOAT n_tuika;
	SQLFLOAT n_koukei;
	SQLFLOAT n_yosan;
	SQLFLOAT n_genka;
	TIMESTAMP_STRUCT n_kdate;
	TIMESTAMP_STRUCT n_kaisi;
	TIMESTAMP_STRUCT n_owari;
	TIMESTAMP_STRUCT n_tyakou;
	TIMESTAMP_STRUCT n_kansei;
	TIMESTAMP_STRUCT n_kensa;
	std::string n_dairi;
	std::string n_eigyou;
	std::string n_HAT030;
	std::string n_HAT040;
	std::string n_HAT050;
	TIMESTAMP_STRUCT n_nyuudat;
	SQLCHAR n_sw;
	std::string n_bikou1;
	std::string n_bikou2;
	std::string n_nyuno;
	TIMESTAMP_STRUCT n_sinsadat;
	TIMESTAMP_STRUCT n_mitsumori;
	SQLINTEGER n_type;
	SQLINTEGER n_sya011;
	std::string n_sya012;
	TIMESTAMP_STRUCT n_koukoku;
	SQLINTEGER n_ucode;
	SQLINTEGER kai00;
	std::string Kai01;
	std::string Kai02;
	std::string Kai03;
	std::string Kai04;
	std::string Kai05;
	std::string Kai06;
	std::string Kai07;
	std::string Kai08;
	std::string Kai09;
	std::string Kai10;
	std::string Kai11;
	std::string Kai12;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->n_index;
		} break;
		case 1: {
			ss << this->n_kname;
		} break;
		case 2: {
			ss << this->n_kno;
		} break;
		case 3: {
			ss << this->n_scode;
		} break;
		case 4: {
			ss << this->n_syubetsu;
		} break;
		case 5: {
			ss << this->n_hatcd;
		} break;
		case 6: {
			ss << this->n_HAT020;
		} break;
		case 7: {
			ss << this->n_keiyaku;
		} break;
		case 8: {
			ss << this->n_tuika;
		} break;
		case 9: {
			ss << this->n_koukei;
		} break;
		case 10: {
			ss << this->n_yosan;
		} break;
		case 11: {
			ss << this->n_genka;
		} break;
		case 12: {
			COdbcDateTime date(&this->n_kdate);
			ss << date.to_string();
		} break;
		case 13: {
			COdbcDateTime date(&this->n_kaisi);
			ss << date.to_string();
		} break;
		case 14: {
			COdbcDateTime date(&this->n_owari);
			ss << date.to_string();
		} break;
		case 15: {
			COdbcDateTime date(&this->n_tyakou);
			ss << date.to_string();
		} break;
		case 16: {
			COdbcDateTime date(&this->n_kansei);
			ss << date.to_string();
		} break;
		case 17: {
			COdbcDateTime date(&this->n_kensa);
			ss << date.to_string();
		} break;
		case 18: {
			ss << this->n_dairi;
		} break;
		case 19: {
			ss << this->n_eigyou;
		} break;
		case 20: {
			ss << this->n_HAT030;
		} break;
		case 21: {
			ss << this->n_HAT040;
		} break;
		case 22: {
			ss << this->n_HAT050;
		} break;
		case 23: {
			COdbcDateTime date(&this->n_nyuudat);
			ss << date.to_string();
		} break;
		case 24: {
			ss << this->n_sw;
		} break;
		case 25: {
			ss << this->n_bikou1;
		} break;
		case 26: {
			ss << this->n_bikou2;
		} break;
		case 27: {
			ss << this->n_nyuno;
		} break;
		case 28: {
			COdbcDateTime date(&this->n_sinsadat);
			ss << date.to_string();
		} break;
		case 29: {
			COdbcDateTime date(&this->n_mitsumori);
			ss << date.to_string();
		} break;
		case 30: {
			ss << this->n_type;
		} break;
		case 31: {
			ss << this->n_sya011;
		} break;
		case 32: {
			ss << this->n_sya012;
		} break;
		case 33: {
			COdbcDateTime date(&this->n_koukoku);
			ss << date.to_string();
		} break;
		case 34: {
			ss << this->n_ucode;
		} break;
		case 35: {
			ss << this->kai00;
		} break;
		case 36: {
			ss << this->Kai01;
		} break;
		case 37: {
			ss << this->Kai02;
		} break;
		case 38: {
			ss << this->Kai03;
		} break;
		case 39: {
			ss << this->Kai04;
		} break;
		case 40: {
			ss << this->Kai05;
		} break;
		case 41: {
			ss << this->Kai06;
		} break;
		case 42: {
			ss << this->Kai07;
		} break;
		case 43: {
			ss << this->Kai08;
		} break;
		case 44: {
			ss << this->Kai09;
		} break;
		case 45: {
			ss << this->Kai10;
		} break;
		case 46: {
			ss << this->Kai11;
		} break;
		case 47: {
			ss << this->Kai12;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v__nyusatsu00 : public COdbcTable {
public:
	CT_v__nyusatsu00() : COdbcTable() {
		m_TableName = "v__nyusatsu00";
		m_SqlSELECT = "SELECT "
					  "n_index,"
					  "n_kname,"
					  "n_kno,"
					  "n_scode,"
					  "n_syubetsu,"
					  "n_hatcd,"
					  "n_HAT020,"
					  "n_keiyaku,"
					  "n_tuika,"
					  "n_koukei,"
					  "n_yosan,"
					  "n_genka,"
					  "n_kdate,"
					  "n_kaisi,"
					  "n_owari,"
					  "n_tyakou,"
					  "n_kansei,"
					  "n_kensa,"
					  "n_dairi,"
					  "n_eigyou,"
					  "n_HAT030,"
					  "n_HAT040,"
					  "n_HAT050,"
					  "n_nyuudat,"
					  "n_sw,"
					  "n_bikou1,"
					  "n_bikou2,"
					  "n_nyuno,"
					  "n_sinsadat,"
					  "n_mitsumori,"
					  "n_type,"
					  "n_sya011,"
					  "n_sya012,"
					  "n_koukoku,"
					  "n_ucode,"
					  "kai00,"
					  "Kai01,"
					  "Kai02,"
					  "Kai03,"
					  "Kai04,"
					  "Kai05,"
					  "Kai06,"
					  "Kai07,"
					  "Kai08,"
					  "Kai09,"
					  "Kai10,"
					  "Kai11,"
					  "Kai12"
					  " FROM v__nyusatsu00";
		m_SqlINSERT =
			"INSERT INTO v__nyusatsu00 ("
			"n_index,"
			"n_kname,"
			"n_kno,"
			"n_scode,"
			"n_syubetsu,"
			"n_hatcd,"
			"n_HAT020,"
			"n_keiyaku,"
			"n_tuika,"
			"n_koukei,"
			"n_yosan,"
			"n_genka,"
			"n_kdate,"
			"n_kaisi,"
			"n_owari,"
			"n_tyakou,"
			"n_kansei,"
			"n_kensa,"
			"n_dairi,"
			"n_eigyou,"
			"n_HAT030,"
			"n_HAT040,"
			"n_HAT050,"
			"n_nyuudat,"
			"n_sw,"
			"n_bikou1,"
			"n_bikou2,"
			"n_nyuno,"
			"n_sinsadat,"
			"n_mitsumori,"
			"n_type,"
			"n_sya011,"
			"n_sya012,"
			"n_koukoku,"
			"n_ucode,"
			"kai00,"
			"Kai01,"
			"Kai02,"
			"Kai03,"
			"Kai04,"
			"Kai05,"
			"Kai06,"
			"Kai07,"
			"Kai08,"
			"Kai09,"
			"Kai10,"
			"Kai11,"
			"Kai12)"
			" VALUES ( "
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v__nyusatsu00 SET "
					  "n_index = ?,"
					  "n_kname = ?,"
					  "n_kno = ?,"
					  "n_scode = ?,"
					  "n_syubetsu = ?,"
					  "n_hatcd = ?,"
					  "n_HAT020 = ?,"
					  "n_keiyaku = ?,"
					  "n_tuika = ?,"
					  "n_koukei = ?,"
					  "n_yosan = ?,"
					  "n_genka = ?,"
					  "n_kdate = ?,"
					  "n_kaisi = ?,"
					  "n_owari = ?,"
					  "n_tyakou = ?,"
					  "n_kansei = ?,"
					  "n_kensa = ?,"
					  "n_dairi = ?,"
					  "n_eigyou = ?,"
					  "n_HAT030 = ?,"
					  "n_HAT040 = ?,"
					  "n_HAT050 = ?,"
					  "n_nyuudat = ?,"
					  "n_sw = ?,"
					  "n_bikou1 = ?,"
					  "n_bikou2 = ?,"
					  "n_nyuno = ?,"
					  "n_sinsadat = ?,"
					  "n_mitsumori = ?,"
					  "n_type = ?,"
					  "n_sya011 = ?,"
					  "n_sya012 = ?,"
					  "n_koukoku = ?,"
					  "n_ucode = ?,"
					  "kai00 = ?,"
					  "Kai01 = ?,"
					  "Kai02 = ?,"
					  "Kai03 = ?,"
					  "Kai04 = ?,"
					  "Kai05 = ?,"
					  "Kai06 = ?,"
					  "Kai07 = ?,"
					  "Kai08 = ?,"
					  "Kai09 = ?,"
					  "Kai10 = ?,"
					  "Kai11 = ?,"
					  "Kai12 = ?";

		m_SqlDELETE = "DELETE v__nyusatsu00 ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_index", "1", "", "NO", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_kname", "2", "", "NO", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_kno", "3", "", "YES", "nvarchar", "255", "510", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_scode", "4", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_syubetsu", "5", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_hatcd", "6", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_HAT020", "7", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_keiyaku", "8", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_tuika", "9", "", "YES", "float", "0", "0", "53", "0", "0", "",
					 "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_koukei", "10", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_yosan", "11", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_genka", "12", "", "YES", "float", "0", "0", "53", "0", "0",
					 "", "", 0, _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_kdate", "13", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_kaisi", "14", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_owari", "15", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_tyakou", "16", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_kansei", "17", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_kensa", "18", "", "YES", "smalldatetime", "0", "0", "0", "0",
					 "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_dairi", "19", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_eigyou", "20", "", "YES", "ntext", "1073741823", "2147483646",
					 "0", "0", "0", "UNICODE", "Japanese_CI_AS", 0, _ntext, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_HAT030", "21", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_HAT040", "22", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_HAT050", "23", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_nyuudat", "24", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_sw", "25", "", "NO", "bit", "0", "0", "0", "0", "0", "", "",
					 0, _bit, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_bikou1", "26", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_bikou2", "27", "", "YES", "nvarchar", "255", "510", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_nyuno", "28", "", "YES", "nvarchar", "50", "100", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_sinsadat", "29", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_mitsumori", "30", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_type", "31", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_sya011", "32", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_sya012", "33", "", "YES", "nvarchar", "40", "80", "0", "0",
					 "0", "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_koukoku", "34", "", "YES", "smalldatetime", "0", "0", "0",
					 "0", "0", "", "", 0, _smalldatetime, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "n_ucode", "35", "", "YES", "int", "0", "0", "10", "0", "0", "",
					 "", 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "kai00", "36", "", "NO", "int", "0", "0", "10", "0", "0", "", "",
					 0, _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai01", "37", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai02", "38", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai03", "39", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai04", "40", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai05", "41", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai06", "42", "", "YES", "nvarchar", "30", "60", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai07", "43", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai08", "44", "", "YES", "nvarchar", "20", "40", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai09", "45", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai10", "46", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai11", "47", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v__nyusatsu00", "Kai12", "48", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v__nyusatsu00() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *n_kname = new char[511];
		char *n_kno = new char[511];
		char *n_syubetsu = new char[101];
		char *n_HAT020 = new char[511];
		char *n_dairi = new char[MAXBUF];
		char *n_eigyou = new char[MAXBUF];
		char *n_HAT030 = new char[101];
		char *n_HAT040 = new char[101];
		char *n_HAT050 = new char[101];
		char *n_bikou1 = new char[511];
		char *n_bikou2 = new char[511];
		char *n_nyuno = new char[101];
		char *n_sya012 = new char[81];
		char *Kai01 = new char[101];
		char *Kai02 = new char[101];
		char *Kai03 = new char[101];
		char *Kai04 = new char[41];
		char *Kai05 = new char[101];
		char *Kai06 = new char[61];
		char *Kai07 = new char[41];
		char *Kai08 = new char[41];
		char *Kai09 = new char[101];
		char *Kai10 = new char[101];
		char *Kai11 = new char[101];
		char *Kai12 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v__nyusatsu00 rec;
				com->GetData(1, SQL_C_LONG, &rec.n_index, sizeof(rec.n_index), 0);
				memset(n_kname, 0, 511);
				com->GetData(2, SQL_C_CHAR, n_kname, 511, 0);
				rec.n_kname = (char *)n_kname;
				memset(n_kno, 0, 511);
				com->GetData(3, SQL_C_CHAR, n_kno, 511, 0);
				rec.n_kno = (char *)n_kno;
				com->GetData(4, SQL_C_LONG, &rec.n_scode, sizeof(rec.n_scode), 0);
				memset(n_syubetsu, 0, 101);
				com->GetData(5, SQL_C_CHAR, n_syubetsu, 101, 0);
				rec.n_syubetsu = (char *)n_syubetsu;
				com->GetData(6, SQL_C_LONG, &rec.n_hatcd, sizeof(rec.n_hatcd), 0);
				memset(n_HAT020, 0, 511);
				com->GetData(7, SQL_C_CHAR, n_HAT020, 511, 0);
				rec.n_HAT020 = (char *)n_HAT020;
				com->GetData(8, SQL_C_DOUBLE, &rec.n_keiyaku, sizeof(rec.n_keiyaku), 0);
				com->GetData(9, SQL_C_DOUBLE, &rec.n_tuika, sizeof(rec.n_tuika), 0);
				com->GetData(10, SQL_C_DOUBLE, &rec.n_koukei, sizeof(rec.n_koukei), 0);
				com->GetData(11, SQL_C_DOUBLE, &rec.n_yosan, sizeof(rec.n_yosan), 0);
				com->GetData(12, SQL_C_DOUBLE, &rec.n_genka, sizeof(rec.n_genka), 0);
				com->GetData(13, SQL_C_TYPE_TIMESTAMP, &rec.n_kdate, sizeof(rec.n_kdate), 0);
				com->GetData(14, SQL_C_TYPE_TIMESTAMP, &rec.n_kaisi, sizeof(rec.n_kaisi), 0);
				com->GetData(15, SQL_C_TYPE_TIMESTAMP, &rec.n_owari, sizeof(rec.n_owari), 0);
				com->GetData(16, SQL_C_TYPE_TIMESTAMP, &rec.n_tyakou, sizeof(rec.n_tyakou), 0);
				com->GetData(17, SQL_C_TYPE_TIMESTAMP, &rec.n_kansei, sizeof(rec.n_kansei), 0);
				com->GetData(18, SQL_C_TYPE_TIMESTAMP, &rec.n_kensa, sizeof(rec.n_kensa), 0);
				memset(n_dairi, 0, 1048576);
				com->GetData(19, SQL_C_CHAR, n_dairi, 1048576, 0);
				rec.n_dairi = (char *)n_dairi;
				memset(n_eigyou, 0, 1048576);
				com->GetData(20, SQL_C_CHAR, n_eigyou, 1048576, 0);
				rec.n_eigyou = (char *)n_eigyou;
				memset(n_HAT030, 0, 101);
				com->GetData(21, SQL_C_CHAR, n_HAT030, 101, 0);
				rec.n_HAT030 = (char *)n_HAT030;
				memset(n_HAT040, 0, 101);
				com->GetData(22, SQL_C_CHAR, n_HAT040, 101, 0);
				rec.n_HAT040 = (char *)n_HAT040;
				memset(n_HAT050, 0, 101);
				com->GetData(23, SQL_C_CHAR, n_HAT050, 101, 0);
				rec.n_HAT050 = (char *)n_HAT050;
				com->GetData(24, SQL_C_TYPE_TIMESTAMP, &rec.n_nyuudat, sizeof(rec.n_nyuudat), 0);
				com->GetData(25, SQL_C_CHAR, &rec.n_sw, sizeof(rec.n_sw), 0);
				memset(n_bikou1, 0, 511);
				com->GetData(26, SQL_C_CHAR, n_bikou1, 511, 0);
				rec.n_bikou1 = (char *)n_bikou1;
				memset(n_bikou2, 0, 511);
				com->GetData(27, SQL_C_CHAR, n_bikou2, 511, 0);
				rec.n_bikou2 = (char *)n_bikou2;
				memset(n_nyuno, 0, 101);
				com->GetData(28, SQL_C_CHAR, n_nyuno, 101, 0);
				rec.n_nyuno = (char *)n_nyuno;
				com->GetData(29, SQL_C_TYPE_TIMESTAMP, &rec.n_sinsadat, sizeof(rec.n_sinsadat), 0);
				com->GetData(30, SQL_C_TYPE_TIMESTAMP, &rec.n_mitsumori, sizeof(rec.n_mitsumori), 0);
				com->GetData(31, SQL_C_LONG, &rec.n_type, sizeof(rec.n_type), 0);
				com->GetData(32, SQL_C_LONG, &rec.n_sya011, sizeof(rec.n_sya011), 0);
				memset(n_sya012, 0, 81);
				com->GetData(33, SQL_C_CHAR, n_sya012, 81, 0);
				rec.n_sya012 = (char *)n_sya012;
				com->GetData(34, SQL_C_TYPE_TIMESTAMP, &rec.n_koukoku, sizeof(rec.n_koukoku), 0);
				com->GetData(35, SQL_C_LONG, &rec.n_ucode, sizeof(rec.n_ucode), 0);
				com->GetData(36, SQL_C_LONG, &rec.kai00, sizeof(rec.kai00), 0);
				memset(Kai01, 0, 101);
				com->GetData(37, SQL_C_CHAR, Kai01, 101, 0);
				rec.Kai01 = (char *)Kai01;
				memset(Kai02, 0, 101);
				com->GetData(38, SQL_C_CHAR, Kai02, 101, 0);
				rec.Kai02 = (char *)Kai02;
				memset(Kai03, 0, 101);
				com->GetData(39, SQL_C_CHAR, Kai03, 101, 0);
				rec.Kai03 = (char *)Kai03;
				memset(Kai04, 0, 41);
				com->GetData(40, SQL_C_CHAR, Kai04, 41, 0);
				rec.Kai04 = (char *)Kai04;
				memset(Kai05, 0, 101);
				com->GetData(41, SQL_C_CHAR, Kai05, 101, 0);
				rec.Kai05 = (char *)Kai05;
				memset(Kai06, 0, 61);
				com->GetData(42, SQL_C_CHAR, Kai06, 61, 0);
				rec.Kai06 = (char *)Kai06;
				memset(Kai07, 0, 41);
				com->GetData(43, SQL_C_CHAR, Kai07, 41, 0);
				rec.Kai07 = (char *)Kai07;
				memset(Kai08, 0, 41);
				com->GetData(44, SQL_C_CHAR, Kai08, 41, 0);
				rec.Kai08 = (char *)Kai08;
				memset(Kai09, 0, 101);
				com->GetData(45, SQL_C_CHAR, Kai09, 101, 0);
				rec.Kai09 = (char *)Kai09;
				memset(Kai10, 0, 101);
				com->GetData(46, SQL_C_CHAR, Kai10, 101, 0);
				rec.Kai10 = (char *)Kai10;
				memset(Kai11, 0, 101);
				com->GetData(47, SQL_C_CHAR, Kai11, 101, 0);
				rec.Kai11 = (char *)Kai11;
				memset(Kai12, 0, 101);
				com->GetData(48, SQL_C_CHAR, Kai12, 101, 0);
				rec.Kai12 = (char *)Kai12;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] n_kname;
		delete[] n_kno;
		delete[] n_syubetsu;
		delete[] n_HAT020;
		delete[] n_dairi;
		delete[] n_eigyou;
		delete[] n_HAT030;
		delete[] n_HAT040;
		delete[] n_HAT050;
		delete[] n_bikou1;
		delete[] n_bikou2;
		delete[] n_nyuno;
		delete[] n_sya012;
		delete[] Kai01;
		delete[] Kai02;
		delete[] Kai03;
		delete[] Kai04;
		delete[] Kai05;
		delete[] Kai06;
		delete[] Kai07;
		delete[] Kai08;
		delete[] Kai09;
		delete[] Kai10;
		delete[] Kai11;
		delete[] Kai12;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v__nyusatsu00 operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v__nyusatsu00 &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v__nyusatsu00 rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v__nyusatsu00> m_Data;
};
class CR_v_jv : public COdbcRecord {
public:
	CR_v_jv() : COdbcRecord() { Initialize(); }
	virtual ~CR_v_jv() {}

	void Initialize() {
		Kdtid = 0;
		KdtKaiid = 0;
		Kdtksdid = 0;
		Kdtflg = 0;
		Kdtritsu = 0.0;
		Kai01 = "";
		Ksd01 = "";
	}

public:
	SQLINTEGER Kdtid;
	SQLINTEGER KdtKaiid;
	SQLINTEGER Kdtksdid;
	SQLCHAR Kdtflg;
	SQLFLOAT Kdtritsu;
	std::string Kai01;
	std::string Ksd01;
	std::string operator[](int i) {
		std::string ret = "";
		std::stringstream ss;
		switch (i) {
		case 0: {
			ss << this->Kdtid;
		} break;
		case 1: {
			ss << this->KdtKaiid;
		} break;
		case 2: {
			ss << this->Kdtksdid;
		} break;
		case 3: {
			ss << this->Kdtflg;
		} break;
		case 4: {
			ss << this->Kdtritsu;
		} break;
		case 5: {
			ss << this->Kai01;
		} break;
		case 6: {
			ss << this->Ksd01;
		} break;
		defoult:
			break;
		}
		ret = ss.str();
		return ret;
	}
};
class CT_v_jv : public COdbcTable {
public:
	CT_v_jv() : COdbcTable() {
		m_TableName = "v_jv";
		m_SqlSELECT = "SELECT "
					  "Kdtid,"
					  "KdtKaiid,"
					  "Kdtksdid,"
					  "Kdtflg,"
					  "Kdtritsu,"
					  "Kai01,"
					  "Ksd01"
					  " FROM v_jv";
		m_SqlINSERT = "INSERT INTO v_jv ("
					  "Kdtid,"
					  "KdtKaiid,"
					  "Kdtksdid,"
					  "Kdtflg,"
					  "Kdtritsu,"
					  "Kai01,"
					  "Ksd01)"
					  " VALUES ( ?,?,?,?,?,?,?)";
		m_SqlUPDATE = "UPDATE v_jv SET "
					  "Kdtid = ?,"
					  "KdtKaiid = ?,"
					  "Kdtksdid = ?,"
					  "Kdtflg = ?,"
					  "Kdtritsu = ?,"
					  "Kai01 = ?,"
					  "Ksd01 = ?";

		m_SqlDELETE = "DELETE v_jv ";
		COdbcColumn col;
		col.SetValue("ootabe", "dbo", "v_jv", "Kdtid", "1", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0, _int,
					 -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv", "KdtKaiid", "2", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv", "Kdtksdid", "3", "", "NO", "int", "0", "0", "10", "0", "0", "", "", 0,
					 _int, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv", "Kdtflg", "4", "", "NO", "bit", "0", "0", "0", "0", "0", "", "", 0, _bit,
					 -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv", "Kdtritsu", "5", "", "NO", "float", "0", "0", "53", "0", "0", "", "", 0,
					 _float, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv", "Kai01", "6", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		col.SetValue("ootabe", "dbo", "v_jv", "Ksd01", "7", "", "YES", "nvarchar", "50", "100", "0", "0", "0",
					 "UNICODE", "Japanese_CI_AS", 0, _nvarchar, -1);
		m_Column.push_back(col);
		m_Key.clear();
		COdbcKeyColumn key;
	}
	virtual ~CT_v_jv() { m_Data.clear(); }

public:
	SQLLEN Set_TableData(COdbcCommand *com) {
		SQLRETURN ret = SQL_SUCCESS;
		SQLLEN Count = 0;
		this->m_Data.clear();
		ret = com->mSQLExecDirect();
		if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) return -1;
		char *Kai01 = new char[101];
		char *Ksd01 = new char[101];
		for (int i = 0;; i++) {
			ret = com->mFetch();
			if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
				CR_v_jv rec;
				com->GetData(1, SQL_C_LONG, &rec.Kdtid, sizeof(rec.Kdtid), 0);
				com->GetData(2, SQL_C_LONG, &rec.KdtKaiid, sizeof(rec.KdtKaiid), 0);
				com->GetData(3, SQL_C_LONG, &rec.Kdtksdid, sizeof(rec.Kdtksdid), 0);
				com->GetData(4, SQL_C_CHAR, &rec.Kdtflg, sizeof(rec.Kdtflg), 0);
				com->GetData(5, SQL_C_DOUBLE, &rec.Kdtritsu, sizeof(rec.Kdtritsu), 0);
				memset(Kai01, 0, 101);
				com->GetData(6, SQL_C_CHAR, Kai01, 101, 0);
				rec.Kai01 = (char *)Kai01;
				memset(Ksd01, 0, 101);
				com->GetData(7, SQL_C_CHAR, Ksd01, 101, 0);
				rec.Ksd01 = (char *)Ksd01;
				m_Data.push_back(rec);
				Count++;
			} else
				break;
		}
		delete[] Kai01;
		delete[] Ksd01;
		return Count;
	}
	SQLLEN Set_TableData(COdbcCommand *com, std::string ConditionalFormula, std::string OrderBy = "") {
		std::string sql = this->Get_SELECT();
		if (ConditionalFormula.length() > 0) {
			sql = sql + " WHERE " + ConditionalFormula;
		}
		if (OrderBy.length() > 0) {
			sql = sql + " ORDER BY " + OrderBy;
		}
		com->SetCommandString(sql);
		return this->Set_TableData(com);
	}
	CR_v_jv operator[](int n) { return m_Data.at(n); }
	std::string WherePrimaryKey(CR_v_jv &rec) {
		std::string sql = "";
		for (int j = 0; j < this->KeyCount(); j++) {
			if (j == 0)
				sql = " WHERE ";
			else
				sql = sql + " AND ";
			int pos = this->Key(j).KEY_ORDINAL_POSITION - 1;
			sql = sql + this->Key(j).KEY_COLUMN_NAME + " = '" + rec[pos] + "'";
		}
		return sql;
	}
	std::string WherePrimaryKey(int i) { return WherePrimaryKey(this->m_Data[i]); }

public:
	void Synchronize(COdbcConnection &con) {
		if (setlocale(LC_CTYPE, "") == NULL) return;
		int icnt = 0;
		SQLRETURN ret;
		for (int n = 0; n < this->m_Data.size(); n++) {
			CR_v_jv rec = this->m_Data[n];
			std::string sql = "";
			COdbcConnection co2;
			co2.Set_Driver(con.Get_Driver());
			co2.Set_Server(con.Get_Server());
			co2.Set_UserID(con.Get_UserID());
			co2.Set_Password(con.Get_Password());
			co2.Set_Database(con.Get_Database());
			co2.DriverConnect();
			COdbcCommand com(&co2);
			switch (rec.get_Modify()) {
			case _NoModify:
			case _Select:
				break;
			case _Insert: {
				std::stringstream ss;
				sql = "INSERT INTO " + Get_Name() + " (";
				icnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0) {
						if (icnt != 0) {
							sql = sql + ",";
							ss << ",";
						}
						sql = sql + Column(col).column_name;
						ss << "'" << rec[col] << "'";
						icnt++;
					}
				}
				sql = sql + ") VALUES (" + ss.str() + ")";
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Update: {
				sql = "UPDATE " + Get_Name() + " SET ";
				int cnt = 0;
				for (int col = 0; col < ColumnCount(); col++) {
					if (Column(col).isIdentity == 0 && Column(col).IsKey() < 0) {
						if (cnt > 0) sql = sql + ", ";
						sql = sql + Column(col).column_name + " = '" + rec[col] + "'";
						cnt++;
					}
				}
				sql = sql + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			case _Delete: {
				sql = "DELETE " + Get_Name() + WherePrimaryKey(n);
				ret = com.mSQLExecDirect(sql);
			} break;
			}
		}
	}

public:
	std::vector<CR_v_jv> m_Data;
};
#endif
